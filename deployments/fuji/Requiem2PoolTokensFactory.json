{
  "address": "0xEb99054e50CeaB1E1fd586704cC045d5BeB44f55",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "oracleEnabled",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreationCode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreationCodeContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractB",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPauseConfiguration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pauseWindowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bufferPeriodDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isPoolFromFactory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xff4a6959b7143e5dbd58d58e3e259a1ec88e76a304e119c9a3fc3886ed96dae2",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0xEb99054e50CeaB1E1fd586704cC045d5BeB44f55",
    "transactionIndex": 0,
    "gasUsed": "6456901",
    "logsBloom": "0x
    "blockHash": "0x310bda9900da809230b0e5dd5a5f6167cd2744d24577e7618e6bc049e08e4d78",
    "transactionHash": "0xff4a6959b7143e5dbd58d58e3e259a1ec88e76a304e119c9a3fc3886ed96dae2",
    "logs": [],
    "blockNumber": 2561382,
    "cumulativeGasUsed": "6456901",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdb27b141f15E54BB34996FA3e5B3538bf3e4cA8F",
    "0xc5Bc8BCEED9F70488213db02e105439CfD177a59"
  ],
  "solcInputHash": "ef4b6f3a008af4ef4bbab0c91377a916",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"oracleEnabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreationCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreationCodeContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pauseWindowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolFromFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(string,string,address[],uint256[],uint256,bool,address)\":{\"details\":\"Deploys a new `Requiem2PoolTokens`.\"},\"getCreationCode()\":{\"details\":\"Returns the creation code of the contract this factory creates.\"},\"getCreationCodeContracts()\":{\"details\":\"Returns the two addresses where the creation code of the contract crated by this factory is stored.\"},\"getPauseConfiguration()\":{\"details\":\"Returns the current `TemporarilyPausable` configuration that will be applied to Pools created by this factory. `pauseWindowDuration` will decrease over time until it reaches zero, at which point both it and `bufferPeriodDuration` will be zero forever, meaning deployed Pools will not be pausable.\"},\"getVault()\":{\"details\":\"Returns the Vault's address.\"},\"isPoolFromFactory(address)\":{\"details\":\"Returns true if `pool` was created by this factory.\"}},\"stateVariables\":{\"formula\":{\"details\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Requiem2PoolTokensFactory.sol\":\"Requiem2PoolTokensFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/BaseMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\nimport \\\"./BasePool.sol\\\";\\nimport \\\"./interfaces/IMinimalSwapInfoPool.sol\\\";\\n\\n/**\\n * @dev Extension of `BasePool`, adding a handler for `IMinimalSwapInfoPool.onSwap`.\\n *\\n * Derived contracts must call `BasePool`'s constructor, and implement `_onSwapGivenIn` and `_onSwapGivenOut` along with\\n * `BasePool`'s virtual functions. Inheriting from this contract lets derived contracts choose the Two Token or Minimal\\n * Swap Info specialization settings.\\n */\\nabstract contract BaseMinimalSwapInfoPool is IMinimalSwapInfoPool, BasePool {\\n    // Swap Hooks\\n\\n    function onSwap(\\n        SwapRequest memory request,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) public virtual override onlyVault(request.poolId) returns (uint256) {\\n        uint256 scalingFactorTokenIn = _scalingFactor(request.tokenIn);\\n        uint256 scalingFactorTokenOut = _scalingFactor(request.tokenOut);\\n\\n        if (request.kind == IVault.SwapKind.GIVEN_IN) {\\n            // Fees are subtracted before scaling, to reduce the complexity of the rounding direction analysis.\\n            uint256 amountInMinusSwapFees = _subtractSwapFeeAmount(request.amount);\\n\\n            // Process the (upscaled!) swap fee.\\n            uint256 swapFee = request.amount - amountInMinusSwapFees;\\n            _processSwapFeeAmount(request.tokenIn, _upscale(swapFee, scalingFactorTokenIn));\\n\\n            request.amount = amountInMinusSwapFees;\\n\\n            // All token amounts are upscaled.\\n            balanceTokenIn = _upscale(balanceTokenIn, scalingFactorTokenIn);\\n            balanceTokenOut = _upscale(balanceTokenOut, scalingFactorTokenOut);\\n            request.amount = _upscale(request.amount, scalingFactorTokenIn);\\n\\n            uint256 amountOut = _onSwapGivenIn(request, balanceTokenIn, balanceTokenOut);\\n\\n            // amountOut tokens are exiting the Pool, so we round down.\\n            return _downscaleDown(amountOut, scalingFactorTokenOut);\\n        } else {\\n            // All token amounts are upscaled.\\n            balanceTokenIn = _upscale(balanceTokenIn, scalingFactorTokenIn);\\n            balanceTokenOut = _upscale(balanceTokenOut, scalingFactorTokenOut);\\n            request.amount = _upscale(request.amount, scalingFactorTokenOut);\\n\\n            uint256 amountIn = _onSwapGivenOut(request, balanceTokenIn, balanceTokenOut);\\n\\n            // amountIn tokens are entering the Pool, so we round up.\\n            amountIn = _downscaleUp(amountIn, scalingFactorTokenIn);\\n\\n            // Fees are added after scaling happens, to reduce the complexity of the rounding direction analysis.\\n            uint256 amountInPlusSwapFees = _addSwapFeeAmount(amountIn);\\n\\n            // Process the (upscaled!) swap fee.\\n            uint256 swapFee = amountInPlusSwapFees - amountIn;\\n            _processSwapFeeAmount(request.tokenIn, _upscale(swapFee, scalingFactorTokenIn));\\n\\n            return amountInPlusSwapFees;\\n        }\\n    }\\n\\n    /*\\n     * @dev Called when a swap with the Pool occurs, where the amount of tokens entering the Pool is known.\\n     *\\n     * Returns the amount of tokens that will be taken from the Pool in return.\\n     *\\n     * All amounts inside `swapRequest`, `balanceTokenIn` and `balanceTokenOut` are upscaled. The swap fee has already\\n     * been deducted from `swapRequest.amount`.\\n     *\\n     * The return value is also considered upscaled, and will be downscaled (rounding down) before returning it to the\\n     * Vault.\\n     */\\n    function _onSwapGivenIn(\\n        SwapRequest memory swapRequest,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) internal virtual returns (uint256);\\n\\n    /*\\n     * @dev Called when a swap with the Pool occurs, where the amount of tokens exiting the Pool is known.\\n     *\\n     * Returns the amount of tokens that will be granted to the Pool in return.\\n     *\\n     * All amounts inside `swapRequest`, `balanceTokenIn` and `balanceTokenOut` are upscaled.\\n     *\\n     * The return value is also considered upscaled, and will be downscaled (rounding up) before applying the swap fee\\n     * and returning it to the Vault.\\n     */\\n    function _onSwapGivenOut(\\n        SwapRequest memory swapRequest,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) internal virtual returns (uint256);\\n\\n    /**\\n     * @dev Called whenever a swap fee is charged. Implementations should call their parents via super, to ensure all\\n     * implementations in the inheritance tree are called.\\n     *\\n     * Callers must call one of the three `_processSwapFeeAmount` functions when swap fees are computed,\\n     * and upscale `amount`.\\n     */\\n    function _processSwapFeeAmount(\\n        uint256, /*index*/\\n        uint256 /*amount*/\\n    ) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function _processSwapFeeAmount(IERC20 token, uint256 amount) internal {\\n        _processSwapFeeAmount(_tokenAddressToIndex(token), amount);\\n    }\\n\\n    function _processSwapFeeAmounts(uint256[] memory amounts) internal {\\n        InputHelpers.ensureInputLengthMatch(amounts.length, _getTotalTokens());\\n\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\n            _processSwapFeeAmount(i, amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of `token` in the Pool's token array (i.e. the one `vault.getPoolTokens()` would return).\\n     *\\n     * A trivial (and incorrect!) implementation is already provided for Pools that don't override\\n     * `_processSwapFeeAmount` and skip the entire feature. However, Pools that do override `_processSwapFeeAmount`\\n     * *must* override this function with a meaningful implementation.\\n     */\\n    function _tokenAddressToIndex(\\n        IERC20 /*token*/\\n    ) internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xb7f1ca3c171440ab834f87659b5bc7e422d0069019b2d1c4031252f703f5df19\",\"license\":\"GPL-3.0-or-later\"},\"contracts/BasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\nimport \\\"./libraries/helpers/InputHelpers.sol\\\";\\nimport \\\"./libraries/helpers/TemporarilyPausable.sol\\\";\\nimport \\\"./libraries/helpers/WordCodec.sol\\\";\\nimport \\\"./libraries/ERC20.sol\\\";\\n\\nimport \\\"./interfaces/IBasePool.sol\\\";\\n\\nimport \\\"./interfaces/IAssetManager.sol\\\";\\n\\nimport \\\"./RequiemPoolToken.sol\\\";\\nimport \\\"./BasePoolAuthorization.sol\\\";\\n\\n// solhint-disable max-states-count\\n\\n/**\\n * @dev Reference implementation for the base layer of a Pool contract that manages a single Pool with optional\\n * Asset Managers, an admin-controlled swap fee percentage, and an emergency pause mechanism.\\n *\\n * Note that neither swap fees nor the pause mechanism are used by this contract. They are passed through so that\\n * derived contracts can use them via the `_addSwapFeeAmount` and `_subtractSwapFeeAmount` functions, and the\\n * `whenNotPaused` modifier.\\n *\\n * No admin permissions are checked here: instead, this contract delegates that to the Vault's own Authorizer.\\n *\\n * Because this contract doesn't implement the swap hooks, derived contracts should generally inherit from\\n * BaseGeneralPool or BaseMinimalSwapInfoPool. Otherwise, subclasses must inherit from the corresponding interfaces\\n * and implement the swap callbacks themselves.\\n */\\nabstract contract BasePool is IBasePool, BasePoolAuthorization, RequiemPoolToken, TemporarilyPausable {\\n    using WordCodec for bytes32;\\n    using FixedPoint for uint256;\\n\\n    uint256 private constant _MIN_TOKENS = 2;\\n\\n    uint256 private constant _MINIMUM_BPT = 1e6;\\n\\n    // 1e18 corresponds to 1.0, or a 100% fee\\n    uint256 private constant _MIN_SWAP_FEE_PERCENTAGE = 1e12; // 0.0001%\\n    uint256 private constant _MAX_SWAP_FEE_PERCENTAGE = 1e17; // 10% - this fits in 64 bits\\n\\n    // Storage slot that can be used to store unrelated pieces of information. In particular, by default is used\\n    // to store only the swap fee percentage of a pool. But it can be extended to store some more pieces of information.\\n    // The swap fee percentage is stored in the most-significant 64 bits, therefore the remaining 192 bits can be\\n    // used to store any other piece of information.\\n    bytes32 private _miscData;\\n    uint256 private constant _SWAP_FEE_PERCENTAGE_OFFSET = 192;\\n\\n    bytes32 private immutable _poolId;\\n\\n    event SwapFeePercentageChanged(uint256 swapFeePercentage);\\n\\n    constructor(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers,\\n        uint256 swapFeePercentage,\\n        uint256 pauseWindowDuration,\\n        uint256 bufferPeriodDuration,\\n        address owner\\n    )\\n        // Base Pools are expected to be deployed using factories. By using the factory address as the action\\n        // disambiguator, we make all Pools deployed by the same factory share action identifiers. This allows for\\n        // simpler management of permissions (such as being able to manage granting the 'set fee percentage' action in\\n        // any Pool created by the same factory), while still making action identifiers unique among different factories\\n        // if the selectors match, preventing accidental errors.\\n        Authentication(bytes32(uint256(uint160(msg.sender)) << 96))\\n        RequiemPoolToken(name, symbol, vault)\\n        BasePoolAuthorization(owner)\\n        TemporarilyPausable(pauseWindowDuration, bufferPeriodDuration)\\n    {\\n        RequiemErrors._require(tokens.length >= _MIN_TOKENS, Errors.MIN_TOKENS);\\n        RequiemErrors._require(tokens.length <= _getMaxTokens(), Errors.MAX_TOKENS);\\n\\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\\n        // Also, since these Pools will register tokens only once, we can ensure the Pool tokens will follow the same\\n        // order. We rely on this property to make Pools simpler to write, as it lets us assume that the\\n        // order of token-specific parameters (such as token weights) will not change.\\n        InputHelpers.ensureArrayIsSorted(tokens);\\n\\n        _setSwapFeePercentage(swapFeePercentage);\\n\\n        bytes32 poolId = vault.registerPool(specialization);\\n\\n        vault.registerTokens(poolId, tokens, assetManagers);\\n\\n        // Set immutable state variables - these cannot be read from during construction\\n        _poolId = poolId;\\n    }\\n\\n    // Getters / Setters\\n\\n    function getPoolId() public view override returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function _getTotalTokens() internal view virtual returns (uint256);\\n\\n    function _getMaxTokens() internal pure virtual returns (uint256);\\n\\n    function _getMinimumBpt() internal pure virtual returns (uint256) {\\n        return _MINIMUM_BPT;\\n    }\\n\\n    function getSwapFeePercentage() public view returns (uint256) {\\n        return _miscData.decodeUint64(_SWAP_FEE_PERCENTAGE_OFFSET);\\n    }\\n\\n    function setSwapFeePercentage(uint256 swapFeePercentage) external virtual authenticate whenNotPaused {\\n        _setSwapFeePercentage(swapFeePercentage);\\n    }\\n\\n    function _setSwapFeePercentage(uint256 swapFeePercentage) private {\\n        RequiemErrors._require(swapFeePercentage >= _MIN_SWAP_FEE_PERCENTAGE, Errors.MIN_SWAP_FEE_PERCENTAGE);\\n        RequiemErrors._require(swapFeePercentage <= _MAX_SWAP_FEE_PERCENTAGE, Errors.MAX_SWAP_FEE_PERCENTAGE);\\n\\n        _miscData = _miscData.insertUint64(swapFeePercentage, _SWAP_FEE_PERCENTAGE_OFFSET);\\n        emit SwapFeePercentageChanged(swapFeePercentage);\\n    }\\n\\n    function setAssetManagerPoolConfig(IERC20 token, bytes memory poolConfig) public virtual authenticate whenNotPaused {\\n        _setAssetManagerPoolConfig(token, poolConfig);\\n    }\\n\\n    function _setAssetManagerPoolConfig(IERC20 token, bytes memory poolConfig) private {\\n        bytes32 poolId = getPoolId();\\n        (, , , address assetManager) = getVault().getPoolTokenInfo(poolId, token);\\n\\n        IAssetManager(assetManager).setConfig(poolId, poolConfig);\\n    }\\n\\n    function setPaused(bool paused) external authenticate {\\n        _setPaused(paused);\\n    }\\n\\n    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {\\n        return (actionId == getActionId(this.setSwapFeePercentage.selector)) || (actionId == getActionId(this.setAssetManagerPoolConfig.selector));\\n    }\\n\\n    function _getMiscData() internal view returns (bytes32) {\\n        return _miscData;\\n    }\\n\\n    /**\\n     * Inserts data into the least-significant 192 bits of the misc data storage slot.\\n     * Note that the remaining 64 bits are used for the swap fee percentage and cannot be overloaded.\\n     */\\n    function _setMiscData(bytes32 newData) internal {\\n        _miscData = _miscData.insertBits192(newData, 0);\\n    }\\n\\n    // Join / Exit Hooks\\n\\n    modifier onlyVault(bytes32 poolId) {\\n        RequiemErrors._require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);\\n        RequiemErrors._require(poolId == getPoolId(), Errors.INVALID_POOL_ID);\\n        _;\\n    }\\n\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) public virtual override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        uint256[] memory scalingFactors = _scalingFactors();\\n\\n        if (totalSupply() == 0) {\\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(poolId, sender, recipient, scalingFactors, userData);\\n\\n            // On initialization, we lock _getMinimumBpt() by minting it for the zero address. This BPT acts as a\\n            // minimum as it will never be burned, which reduces potential issues with rounding, and also prevents the\\n            // Pool from ever being fully drained.\\n            RequiemErrors._require(bptAmountOut >= _getMinimumBpt(), Errors.MINIMUM_BPT);\\n            _mintPoolTokens(address(0), _getMinimumBpt());\\n            _mintPoolTokens(recipient, bptAmountOut - _getMinimumBpt());\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n\\n            return (amountsIn, new uint256[](_getTotalTokens()));\\n        } else {\\n            _upscaleArray(balances, scalingFactors);\\n            (uint256 bptAmountOut, uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts) = _onJoinPool(\\n                poolId,\\n                sender,\\n                recipient,\\n                balances,\\n                lastChangeBlock,\\n                protocolSwapFeePercentage,\\n                scalingFactors,\\n                userData\\n            );\\n\\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\\n\\n            _mintPoolTokens(recipient, bptAmountOut);\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n            // dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\\n            _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\\n\\n            return (amountsIn, dueProtocolFeeAmounts);\\n        }\\n    }\\n\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) public virtual override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        uint256[] memory scalingFactors = _scalingFactors();\\n        _upscaleArray(balances, scalingFactors);\\n\\n        (uint256 bptAmountIn, uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts) = _onExitPool(\\n            poolId,\\n            sender,\\n            recipient,\\n            balances,\\n            lastChangeBlock,\\n            protocolSwapFeePercentage,\\n            scalingFactors,\\n            userData\\n        );\\n\\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\\n\\n        _burnPoolTokens(sender, bptAmountIn);\\n\\n        // Both amountsOut and dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\\n        _downscaleDownArray(amountsOut, scalingFactors);\\n        _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\\n\\n        return (amountsOut, dueProtocolFeeAmounts);\\n    }\\n\\n    // Query functions\\n\\n    /**\\n     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn) {\\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\\n\\n        _queryAction(poolId, sender, recipient, balances, lastChangeBlock, protocolSwapFeePercentage, userData, _onJoinPool, _downscaleUpArray);\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptOut, amountsIn);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut) {\\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\\n\\n        _queryAction(poolId, sender, recipient, balances, lastChangeBlock, protocolSwapFeePercentage, userData, _onExitPool, _downscaleDownArray);\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptIn, amountsOut);\\n    }\\n\\n    // Internal hooks to be overridden by derived contracts - all token amounts (except BPT) in these interfaces are\\n    // upscaled.\\n\\n    /**\\n     * @dev Called when the Pool is joined for the first time; that is, when the BPT total supply is zero.\\n     *\\n     * Returns the amount of BPT to mint, and the token amounts the Pool will receive in return.\\n     *\\n     * Minted BPT will be sent to `recipient`, except for _getMinimumBpt(), which will be deducted from this amount and\\n     * sent to the zero address instead. This will cause that BPT to remain forever locked there, preventing total BTP\\n     * from ever dropping below that value, and ensuring `_onInitializePool` can only be called once in the entire\\n     * Pool's lifetime.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     */\\n    function _onInitializePool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);\\n\\n    /**\\n     * @dev Called whenever the Pool is joined after the first initialization join (see `_onInitializePool`).\\n     *\\n     * Returns the amount of BPT to mint, the token amounts that the Pool will receive in return, and the number of\\n     * tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * Minted BPT will be sent to `recipient`.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onJoinPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        returns (\\n            uint256 bptAmountOut,\\n            uint256[] memory amountsIn,\\n            uint256[] memory dueProtocolFeeAmounts\\n        );\\n\\n    /**\\n     * @dev Called whenever the Pool is exited.\\n     *\\n     * Returns the amount of BPT to burn, the token amounts for each Pool token that the Pool will grant in return, and\\n     * the number of tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * BPT will be burnt from `sender`.\\n     *\\n     * The Pool will grant tokens to `recipient`. These amounts are considered upscaled and will be downscaled\\n     * (rounding down) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onExitPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        returns (\\n            uint256 bptAmountIn,\\n            uint256[] memory amountsOut,\\n            uint256[] memory dueProtocolFeeAmounts\\n        );\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev Adds swap fee amount to `amount`, returning a higher value.\\n     */\\n    function _addSwapFeeAmount(uint256 amount) internal view returns (uint256) {\\n        // This returns amount + fee amount, so we round up (favoring a higher fee amount).\\n        return amount.divUp(FixedPoint.ONE - getSwapFeePercentage());\\n    }\\n\\n    /**\\n     * @dev Subtracts swap fee amount from `amount`, returning a lower value.\\n     */\\n    function _subtractSwapFeeAmount(uint256 amount) internal view returns (uint256) {\\n        // This returns amount - fee amount, so we round up (favoring a higher fee amount).\\n        uint256 feeAmount = amount.mulUp(getSwapFeePercentage());\\n        return amount - feeAmount;\\n    }\\n\\n    // Scaling\\n\\n    /**\\n     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\\n     * it had 18 decimals.\\n     */\\n    function _computeScalingFactor(IERC20 token) internal view returns (uint256) {\\n        if (address(token) == address(this)) {\\n            return FixedPoint.ONE;\\n        }\\n\\n        // Tokens that don't implement the `decimals` method are not supported.\\n        uint256 tokenDecimals = ERC20(address(token)).decimals();\\n\\n        // Tokens with more than 18 decimals are not supported.\\n        uint256 decimalsDifference = 18 - tokenDecimals;\\n        return FixedPoint.ONE * 10**decimalsDifference;\\n    }\\n\\n    /**\\n     * @dev Returns the scaling factor for one of the Pool's tokens. Reverts if `token` is not a token registered by the\\n     * Pool.\\n     *\\n     * All scaling factors are fixed-point values with 18 decimals, to allow for this function to be overridden by\\n     * derived contracts that need to apply further scaling, making these factors potentially non-integer.\\n     *\\n     * The largest 'base' scaling factor (i.e. in tokens with less than 18 decimals) is 10**18, which in fixed-point is\\n     * 10**36. This value can be multiplied with a 112 bit Vault balance with no overflow by a factor of ~1e7, making\\n     * even relatively 'large' factors safe to use.\\n     *\\n     * The 1e7 figure is the result of 2**256 / (1e18 * 1e18 * 2**112).\\n     */\\n    function _scalingFactor(IERC20 token) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Same as `_scalingFactor()`, except for all registered tokens (in the same order as registered). The Vault\\n     * will always pass balances in this order when calling any of the Pool hooks.\\n     */\\n    function _scalingFactors() internal view virtual returns (uint256[] memory);\\n\\n    function getScalingFactors() external view returns (uint256[] memory) {\\n        return _scalingFactors();\\n    }\\n\\n    /**\\n     * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\\n     * scaling or not.\\n     */\\n    function _upscale(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        // Upscale rounding wouldn't necessarily always go in the same direction: in a swap for example the balance of\\n        // token in should be rounded up, and that of token out rounded down. This is the only place where we round in\\n        // the same direction for all amounts, as the impact of this rounding is expected to be minimal (and there's no\\n        // rounding error unless `_scalingFactor()` is overriden).\\n        return FixedPoint.mulDown(amount, scalingFactor);\\n    }\\n\\n    /**\\n     * @dev Same as `_upscale`, but for an entire array. This function does not return anything, but instead *mutates*\\n     * the `amounts` array.\\n     */\\n    function _upscaleArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal view {\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\n            amounts[i] = FixedPoint.mulDown(amounts[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n     * whether it needed scaling or not. The result is rounded down.\\n     */\\n    function _downscaleDown(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return FixedPoint.divDown(amount, scalingFactor);\\n    }\\n\\n    /**\\n     * @dev Same as `_downscaleDown`, but for an entire array. This function does not return anything, but instead\\n     * *mutates* the `amounts` array.\\n     */\\n    function _downscaleDownArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal view {\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\n            amounts[i] = FixedPoint.divDown(amounts[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n     * whether it needed scaling or not. The result is rounded up.\\n     */\\n    function _downscaleUp(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return FixedPoint.divUp(amount, scalingFactor);\\n    }\\n\\n    /**\\n     * @dev Same as `_downscaleUp`, but for an entire array. This function does not return anything, but instead\\n     * *mutates* the `amounts` array.\\n     */\\n    function _downscaleUpArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal view {\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\n            amounts[i] = FixedPoint.divUp(amounts[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _getAuthorizer() internal view override returns (IAuthorizer) {\\n        // Access control management is delegated to the Vault's Authorizer. This lets Balancer Governance manage which\\n        // accounts can call permissioned functions: for example, to perform emergency pauses.\\n        // If the owner is delegated, then *all* permissioned functions, including `setSwapFeePercentage`, will be under\\n        // Governance control.\\n        return getVault().getAuthorizer();\\n    }\\n\\n    function _queryAction(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        function(bytes32, address, address, uint256[] memory, uint256, uint256, uint256[] memory, bytes memory) internal returns (uint256, uint256[] memory, uint256[] memory) _action,\\n        function(uint256[] memory, uint256[] memory) internal view _downscaleArray\\n    ) private {\\n        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed\\n        // explanation.\\n\\n        if (msg.sender != address(this)) {\\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\\n            // the preceding if statement will be executed instead.\\n\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = address(this).call(msg.data);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // This call should always revert to decode the bpt and token amounts from the revert reason\\n                switch success\\n                case 0 {\\n                    // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\\n                    // stored there as we take full control of the execution and then immediately return.\\n\\n                    // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\\n                    // there was another revert reason and we should forward it.\\n                    returndatacopy(0, 0, 0x04)\\n                    let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n\\n                    // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\\n                    if eq(eq(error, 0x43adbafb00000000000000000000000000000000000000000000000000000000), 0) {\\n                        returndatacopy(0, 0, returndatasize())\\n                        revert(0, returndatasize())\\n                    }\\n\\n                    // The returndata contains the signature, followed by the raw memory representation of the\\n                    // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded\\n                    // representation of these.\\n                    // An ABI-encoded response will include one additional field to indicate the starting offset of\\n                    // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the\\n                    // returndata.\\n                    //\\n                    // In returndata:\\n                    // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]\\n                    // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]\\n                    //\\n                    // We now need to return (ABI-encoded values):\\n                    // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]\\n                    // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]\\n\\n                    // We copy 32 bytes for the `bptAmount` from returndata into memory.\\n                    // Note that we skip the first 4 bytes for the error signature\\n                    returndatacopy(0, 0x04, 32)\\n\\n                    // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after\\n                    // the initial 64 bytes.\\n                    mstore(0x20, 64)\\n\\n                    // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.\\n                    // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also\\n                    // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.\\n                    returndatacopy(0x40, 0x24, sub(returndatasize(), 36))\\n\\n                    // We finally return the ABI-encoded uint256 and the array, which has a total length equal to\\n                    // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the\\n                    // error signature.\\n                    return(0, add(returndatasize(), 28))\\n                }\\n                default {\\n                    // This call should always revert, but we fail nonetheless if that didn't happen\\n                    invalid()\\n                }\\n            }\\n        } else {\\n            uint256[] memory scalingFactors = _scalingFactors();\\n            _upscaleArray(balances, scalingFactors);\\n\\n            (uint256 bptAmount, uint256[] memory tokenAmounts, ) = _action(poolId, sender, recipient, balances, lastChangeBlock, protocolSwapFeePercentage, scalingFactors, userData);\\n\\n            _downscaleArray(tokenAmounts, scalingFactors);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of\\n                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values\\n                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32\\n                let size := mul(mload(tokenAmounts), 32)\\n\\n                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there\\n                // will be at least one available slot due to how the memory scratch space works.\\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\\n                let start := sub(tokenAmounts, 0x20)\\n                mstore(start, bptAmount)\\n\\n                // We send one extra value for the error signature \\\"QueryError(uint256,uint256[])\\\" which is 0x43adbafb\\n                // We use the previous slot to `bptAmount`.\\n                mstore(sub(start, 0x20), 0x0000000000000000000000000000000000000000000000000000000043adbafb)\\n                start := sub(start, 0x04)\\n\\n                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return\\n                // the `bptAmount`, the array 's length, and the error signature.\\n                revert(start, add(size, 68))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x20921152b823b4976b64d61c5b0e0b5e65cdaff3b555493a9c0e5bf5025f84bb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/BasePoolAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./libraries/helpers/Authentication.sol\\\";\\nimport \\\"./interfaces/IAuthorizer.sol\\\";\\n\\n/**\\n * @dev Base authorization layer implementation for Pools.\\n *\\n * The owner account can call some of the permissioned functions - access control of the rest is delegated to the\\n * Authorizer. Note that this owner is immutable: more sophisticated permission schemes, such as multiple ownership,\\n * granular roles, etc., could be built on top of this by making the owner a smart contract.\\n *\\n * Access control of all other permissioned functions is delegated to an Authorizer. It is also possible to delegate\\n * control of *all* permissioned functions to the Authorizer by setting the owner address to `_DELEGATE_OWNER`.\\n */\\nabstract contract BasePoolAuthorization is Authentication {\\n    address private immutable _owner;\\n\\n    address private constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;\\n\\n    constructor(address owner) {\\n        _owner = owner;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function getAuthorizer() external view returns (IAuthorizer) {\\n        return _getAuthorizer();\\n    }\\n\\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\\n        if ((getOwner() != _DELEGATE_OWNER) && _isOwnerOnlyAction(actionId)) {\\n            // Only the owner can perform \\\"owner only\\\" actions, unless the owner is delegated.\\n            return msg.sender == getOwner();\\n        } else {\\n            // Non-owner actions are always processed via the Authorizer, as \\\"owner only\\\" ones are when delegated.\\n            return _getAuthorizer().canPerform(actionId, account, address(this));\\n        }\\n    }\\n\\n    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual returns (bool);\\n\\n    function _getAuthorizer() internal view virtual returns (IAuthorizer);\\n}\\n\",\"keccak256\":\"0x8d9d1e76ab92b2164888001a2a60d5a80a8e3b1fd7a65971ca2d81a12bdbab6d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/BaseWeightedPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\nimport \\\"./libraries/helpers/InputHelpers.sol\\\";\\n\\nimport \\\"./BaseMinimalSwapInfoPool.sol\\\";\\n\\nimport \\\"./libraries/weighted/WeightedMath.sol\\\";\\nimport \\\"./libraries/weighted/WeightedPoolUserDataHelpers.sol\\\";\\n\\n/**\\n * @dev Base class for WeightedPools containing swap, join and exit logic, but leaving storage and management of\\n * the weights to subclasses. Derived contracts can choose to make weights immutable, mutable, or even dynamic\\n *  based on local or external logic.\\n */\\nabstract contract BaseWeightedPool is BaseMinimalSwapInfoPool {\\n    using FixedPoint for uint256;\\n    using WeightedPoolUserDataHelpers for bytes;\\n\\n    uint256 private _lastInvariant;\\n\\n    // For backwards compatibility, make sure new join and exit kinds are added at the end of the enum.\\n\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n    }\\n    enum ExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\\n        MANAGEMENT_FEE_TOKENS_OUT // for ManagedPool\\n    }\\n\\n    constructor(\\n        IVault vault,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers,\\n        uint256 swapFeePercentage,\\n        uint256 pauseWindowDuration,\\n        uint256 bufferPeriodDuration,\\n        address owner\\n    )\\n        BasePool(\\n            vault,\\n            // Given BaseMinimalSwapInfoPool supports both of these specializations, and this Pool never registers or\\n            // deregisters any tokens after construction, picking Two Token when the Pool only has two tokens is free\\n            // gas savings.\\n            tokens.length == 2 ? IVault.PoolSpecialization.TWO_TOKEN : IVault.PoolSpecialization.MINIMAL_SWAP_INFO,\\n            name,\\n            symbol,\\n            tokens,\\n            assetManagers,\\n            swapFeePercentage,\\n            pauseWindowDuration,\\n            bufferPeriodDuration,\\n            owner\\n        )\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // Virtual functions\\n\\n    /**\\n     * @dev Returns the normalized weight of `token`. Weights are fixed point numbers that sum to FixedPoint.ONE.\\n     */\\n    function _getNormalizedWeight(IERC20 token) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns all normalized weights, in the same order as the Pool's tokens.\\n     */\\n    function _getNormalizedWeights() internal view virtual returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns all normalized weights, in the same order as the Pool's tokens, along with the index of the token\\n     * with the highest weight.\\n     */\\n    function _getNormalizedWeightsAndMaxWeightIndex() internal view virtual returns (uint256[] memory, uint256);\\n\\n    function getLastInvariant() public view virtual returns (uint256) {\\n        return _lastInvariant;\\n    }\\n\\n    /**\\n     * @dev Returns the current value of the invariant.\\n     */\\n    function getInvariant() public view returns (uint256) {\\n        (, uint256[] memory balances, ) = getVault().getPoolTokens(getPoolId());\\n\\n        // Since the Pool hooks always work with upscaled balances, we manually\\n        // upscale here for consistency\\n        _upscaleArray(balances, _scalingFactors());\\n\\n        (uint256[] memory normalizedWeights, ) = _getNormalizedWeightsAndMaxWeightIndex();\\n        return WeightedMath._calculateInvariant(normalizedWeights, balances);\\n    }\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory) {\\n        return _getNormalizedWeights();\\n    }\\n\\n    // Base Pool handlers\\n\\n    // Swap\\n\\n    function _onSwapGivenIn(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) internal view virtual override whenNotPaused returns (uint256) {\\n        // Swaps are disabled while the contract is paused.\\n\\n        return WeightedMath._calcOutGivenIn(currentBalanceTokenIn, _getNormalizedWeight(swapRequest.tokenIn), currentBalanceTokenOut, _getNormalizedWeight(swapRequest.tokenOut), swapRequest.amount);\\n    }\\n\\n    function _onSwapGivenOut(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) internal view virtual override whenNotPaused returns (uint256) {\\n        // Swaps are disabled while the contract is paused.\\n\\n        return WeightedMath._calcInGivenOut(currentBalanceTokenIn, _getNormalizedWeight(swapRequest.tokenIn), currentBalanceTokenOut, _getNormalizedWeight(swapRequest.tokenOut), swapRequest.amount);\\n    }\\n\\n    // Initialize\\n\\n    function _onInitializePool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal virtual override whenNotPaused returns (uint256, uint256[] memory) {\\n        // It would be strange for the Pool to be paused before it is initialized, but for consistency we prevent\\n        // initialization in this case.\\n\\n        JoinKind kind = userData.joinKind();\\n        RequiemErrors._require(kind == JoinKind.INIT, Errors.UNINITIALIZED);\\n\\n        uint256[] memory amountsIn = userData.initialAmountsIn();\\n        InputHelpers.ensureInputLengthMatch(_getTotalTokens(), amountsIn.length);\\n        _upscaleArray(amountsIn, scalingFactors);\\n\\n        (uint256[] memory normalizedWeights, ) = _getNormalizedWeightsAndMaxWeightIndex();\\n\\n        uint256 invariantAfterJoin = WeightedMath._calculateInvariant(normalizedWeights, amountsIn);\\n\\n        // Set the initial BPT to the value of the invariant times the number of tokens. This makes BPT supply more\\n        // consistent in Pools with similar compositions but different number of tokens.\\n        uint256 bptAmountOut = invariantAfterJoin * _getTotalTokens();\\n\\n        _lastInvariant = invariantAfterJoin;\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    // Join\\n\\n    function _onJoinPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory balances,\\n        uint256,\\n        uint256 protocolSwapFeePercentage,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        override\\n        whenNotPaused\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        // All joins are disabled while the contract is paused.\\n\\n        (uint256[] memory normalizedWeights, uint256 maxWeightTokenIndex) = _getNormalizedWeightsAndMaxWeightIndex();\\n\\n        // Due protocol swap fee amounts are computed by measuring the growth of the invariant between the previous join\\n        // or exit event and now - the invariant's growth is due exclusively to swap fees. This avoids spending gas\\n        // computing them on each individual swap\\n        uint256 invariantBeforeJoin = WeightedMath._calculateInvariant(normalizedWeights, balances);\\n\\n        uint256[] memory dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(balances, normalizedWeights, maxWeightTokenIndex, _lastInvariant, invariantBeforeJoin, protocolSwapFeePercentage);\\n\\n        // Update current balances by subtracting the protocol fee amounts\\n        _mutateAmounts(balances, dueProtocolFeeAmounts, FixedPoint.sub);\\n        (uint256 bptAmountOut, uint256[] memory amountsIn) = _doJoin(balances, normalizedWeights, scalingFactors, userData);\\n\\n        // Update the invariant with the balances the Pool will have after the join, in order to compute the\\n        // protocol swap fee amounts due in future joins and exits.\\n        _lastInvariant = _invariantAfterJoin(balances, amountsIn, normalizedWeights);\\n\\n        return (bptAmountOut, amountsIn, dueProtocolFeeAmounts);\\n    }\\n\\n    function _doJoin(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal returns (uint256, uint256[] memory) {\\n        JoinKind kind = userData.joinKind();\\n\\n        if (kind == JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\n            return _joinExactTokensInForBPTOut(balances, normalizedWeights, scalingFactors, userData);\\n        } else if (kind == JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {\\n            return _joinTokenInForExactBPTOut(balances, normalizedWeights, userData);\\n        } else if (kind == JoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT) {\\n            return _joinAllTokensInForExactBPTOut(balances, userData);\\n        } else {\\n            RequiemErrors._revert(Errors.UNHANDLED_JOIN_KIND);\\n        }\\n    }\\n\\n    function _joinExactTokensInForBPTOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) private returns (uint256, uint256[] memory) {\\n        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();\\n        InputHelpers.ensureInputLengthMatch(_getTotalTokens(), amountsIn.length);\\n\\n        _upscaleArray(amountsIn, scalingFactors);\\n\\n        (uint256 bptAmountOut, uint256[] memory swapFees) = WeightedMath._calcBptOutGivenExactTokensIn(balances, normalizedWeights, amountsIn, totalSupply(), getSwapFeePercentage());\\n\\n        // Note that swapFees is already upscaled\\n        _processSwapFeeAmounts(swapFees);\\n\\n        RequiemErrors._require(bptAmountOut >= minBPTAmountOut, Errors.BPT_OUT_MIN_AMOUNT);\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function _joinTokenInForExactBPTOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private returns (uint256, uint256[] memory) {\\n        (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();\\n        // Note that there is no maximum amountIn parameter: this is handled by `IVault.joinPool`.\\n\\n        RequiemErrors._require(tokenIndex < _getTotalTokens(), Errors.OUT_OF_BOUNDS);\\n\\n        (uint256 amountIn, uint256 swapFee) = WeightedMath._calcTokenInGivenExactBptOut(balances[tokenIndex], normalizedWeights[tokenIndex], bptAmountOut, totalSupply(), getSwapFeePercentage());\\n\\n        // Note that swapFee is already upscaled\\n        _processSwapFeeAmount(tokenIndex, swapFee);\\n\\n        // We join in a single token, so we initialize amountsIn with zeros\\n        uint256[] memory amountsIn = new uint256[](_getTotalTokens());\\n        // And then assign the result to the selected token\\n        amountsIn[tokenIndex] = amountIn;\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function _joinAllTokensInForExactBPTOut(uint256[] memory balances, bytes memory userData) private view returns (uint256, uint256[] memory) {\\n        uint256 bptAmountOut = userData.allTokensInForExactBptOut();\\n        // Note that there is no maximum amountsIn parameter: this is handled by `IVault.joinPool`.\\n\\n        uint256[] memory amountsIn = WeightedMath._calcAllTokensInGivenExactBptOut(balances, bptAmountOut, totalSupply());\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    // Exit\\n\\n    function _onExitPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory balances,\\n        uint256,\\n        uint256 protocolSwapFeePercentage,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 bptAmountIn,\\n            uint256[] memory amountsOut,\\n            uint256[] memory dueProtocolFeeAmounts\\n        )\\n    {\\n        (uint256[] memory normalizedWeights, uint256 maxWeightTokenIndex) = _getNormalizedWeightsAndMaxWeightIndex();\\n\\n        // Exits are not completely disabled while the contract is paused: proportional exits (exact BPT in for tokens\\n        // out) remain functional.\\n\\n        if (_isNotPaused()) {\\n            // Due protocol swap fee amounts are computed by measuring the growth of the invariant between the previous\\n            // join or exit event and now - the invariant's growth is due exclusively to swap fees. This avoids\\n            // spending gas calculating the fees on each individual swap.\\n            uint256 invariantBeforeExit = WeightedMath._calculateInvariant(normalizedWeights, balances);\\n            dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(balances, normalizedWeights, maxWeightTokenIndex, _lastInvariant, invariantBeforeExit, protocolSwapFeePercentage);\\n\\n            // Update current balances by subtracting the protocol fee amounts\\n            _mutateAmounts(balances, dueProtocolFeeAmounts, FixedPoint.sub);\\n        } else {\\n            // If the contract is paused, swap protocol fee amounts are not charged to avoid extra calculations and\\n            // reduce the potential for errors.\\n            dueProtocolFeeAmounts = new uint256[](_getTotalTokens());\\n        }\\n\\n        (bptAmountIn, amountsOut) = _doExit(balances, normalizedWeights, scalingFactors, userData);\\n\\n        // Update the invariant with the balances the Pool will have after the exit, in order to compute the\\n        // protocol swap fees due in future joins and exits.\\n        _lastInvariant = _invariantAfterExit(balances, amountsOut, normalizedWeights);\\n\\n        return (bptAmountIn, amountsOut, dueProtocolFeeAmounts);\\n    }\\n\\n    function _doExit(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal returns (uint256, uint256[] memory) {\\n        ExitKind kind = userData.exitKind();\\n\\n        if (kind == ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {\\n            return _exitExactBPTInForTokenOut(balances, normalizedWeights, userData);\\n        } else if (kind == ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\\n            return _exitExactBPTInForTokensOut(balances, userData);\\n        } else if (kind == ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {\\n            return _exitBPTInForExactTokensOut(balances, normalizedWeights, scalingFactors, userData);\\n        } else {\\n            RequiemErrors._revert(Errors.UNHANDLED_EXIT_KIND);\\n        }\\n    }\\n\\n    function _exitExactBPTInForTokenOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private whenNotPaused returns (uint256, uint256[] memory) {\\n        // This exit function is disabled if the contract is paused.\\n\\n        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();\\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\\n\\n        RequiemErrors._require(tokenIndex < _getTotalTokens(), Errors.OUT_OF_BOUNDS);\\n\\n        (uint256 amountOut, uint256 swapFee) = WeightedMath._calcTokenOutGivenExactBptIn(balances[tokenIndex], normalizedWeights[tokenIndex], bptAmountIn, totalSupply(), getSwapFeePercentage());\\n\\n        // This is an exceptional situation in which the fee is charged on a token out instead of a token in.\\n        // Note that swapFee is already upscaled.\\n        _processSwapFeeAmount(tokenIndex, swapFee);\\n\\n        // We exit in a single token, so we initialize amountsOut with zeros\\n        uint256[] memory amountsOut = new uint256[](_getTotalTokens());\\n        // And then assign the result to the selected token\\n        amountsOut[tokenIndex] = amountOut;\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function _exitExactBPTInForTokensOut(uint256[] memory balances, bytes memory userData) private view returns (uint256, uint256[] memory) {\\n        // This exit function is the only one that is not disabled if the contract is paused: it remains unrestricted\\n        // in an attempt to provide users with a mechanism to retrieve their tokens in case of an emergency.\\n        // This particular exit function is the only one that remains available because it is the simplest one, and\\n        // therefore the one with the lowest likelihood of errors.\\n\\n        uint256 bptAmountIn = userData.exactBptInForTokensOut();\\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\\n\\n        uint256[] memory amountsOut = WeightedMath._calcTokensOutGivenExactBptIn(balances, bptAmountIn, totalSupply());\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function _exitBPTInForExactTokensOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) private whenNotPaused returns (uint256, uint256[] memory) {\\n        // This exit function is disabled if the contract is paused.\\n\\n        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();\\n        InputHelpers.ensureInputLengthMatch(amountsOut.length, _getTotalTokens());\\n        _upscaleArray(amountsOut, scalingFactors);\\n\\n        (uint256 bptAmountIn, uint256[] memory swapFees) = WeightedMath._calcBptInGivenExactTokensOut(balances, normalizedWeights, amountsOut, totalSupply(), getSwapFeePercentage());\\n        RequiemErrors._require(bptAmountIn <= maxBPTAmountIn, Errors.BPT_IN_MAX_AMOUNT);\\n\\n        // This is an exceptional situation in which the fee is charged on a token out instead of a token in.\\n        // Note that swapFee is already upscaled.\\n        _processSwapFeeAmounts(swapFees);\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    // Helpers\\n\\n    function _getDueProtocolFeeAmounts(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256 maxWeightTokenIndex,\\n        uint256 previousInvariant,\\n        uint256 currentInvariant,\\n        uint256 protocolSwapFeePercentage\\n    ) private view returns (uint256[] memory) {\\n        // Initialize with zeros\\n        uint256[] memory dueProtocolFeeAmounts = new uint256[](_getTotalTokens());\\n\\n        // Early return if the protocol swap fee percentage is zero, saving gas.\\n        if (protocolSwapFeePercentage == 0) {\\n            return dueProtocolFeeAmounts;\\n        }\\n\\n        // The protocol swap fees are always paid using the token with the largest weight in the Pool. As this is the\\n        // token that is expected to have the largest balance, using it to pay fees should not unbalance the Pool.\\n        dueProtocolFeeAmounts[maxWeightTokenIndex] = WeightedMath._calcDueTokenProtocolSwapFeeAmount(\\n            balances[maxWeightTokenIndex],\\n            normalizedWeights[maxWeightTokenIndex],\\n            previousInvariant,\\n            currentInvariant,\\n            protocolSwapFeePercentage\\n        );\\n\\n        return dueProtocolFeeAmounts;\\n    }\\n\\n    /**\\n     * @dev Returns the value of the invariant given `balances`, assuming they are increased by `amountsIn`. All\\n     * amounts are expected to be upscaled.\\n     */\\n    function _invariantAfterJoin(\\n        uint256[] memory balances,\\n        uint256[] memory amountsIn,\\n        uint256[] memory normalizedWeights\\n    ) private view returns (uint256) {\\n        _mutateAmounts(balances, amountsIn, FixedPoint.add);\\n        return WeightedMath._calculateInvariant(normalizedWeights, balances);\\n    }\\n\\n    function _invariantAfterExit(\\n        uint256[] memory balances,\\n        uint256[] memory amountsOut,\\n        uint256[] memory normalizedWeights\\n    ) private view returns (uint256) {\\n        _mutateAmounts(balances, amountsOut, FixedPoint.sub);\\n        return WeightedMath._calculateInvariant(normalizedWeights, balances);\\n    }\\n\\n    /**\\n     * @dev Mutates `amounts` by applying `mutation` with each entry in `arguments`.\\n     *\\n     * Equivalent to `amounts = amounts.map(mutation)`.\\n     */\\n    function _mutateAmounts(\\n        uint256[] memory toMutate,\\n        uint256[] memory arguments,\\n        function(uint256, uint256) pure returns (uint256) mutation\\n    ) private view {\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\n            toMutate[i] = mutation(toMutate[i], arguments[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev This function returns the appreciation of one BPT relative to the\\n     * underlying tokens. This starts at 1 when the pool is created and grows over time\\n     */\\n    function getRate() public view returns (uint256) {\\n        // The initial BPT supply is equal to the invariant times the number of tokens.\\n        return (getInvariant() * _getTotalTokens()).divDown(totalSupply());\\n    }\\n}\\n\",\"keccak256\":\"0x74b15082a5518b65d1ba7ab90c088aa4faa7e583c143ebedf7c869753aeec33a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Requiem2PoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\nimport \\\"./libraries/helpers/InputHelpers.sol\\\";\\nimport \\\"./libraries/LogCompression.sol\\\";\\nimport \\\"./libraries/helpers/TemporarilyPausable.sol\\\";\\n// import \\\"./libraries/ERC20.sol\\\";\\nimport \\\"./libraries/math/Math.sol\\\";\\nimport \\\"./interfaces/IMinimalSwapInfoPool.sol\\\";\\n\\nimport \\\"./BasePoolAuthorization.sol\\\";\\nimport \\\"./RequiemPoolToken.sol\\\";\\nimport \\\"./BasePool.sol\\\";\\nimport \\\"./libraries/oracle/PoolPriceOracle.sol\\\";\\nimport \\\"./libraries/oracle/Buffer.sol\\\";\\nimport \\\"./interfaces/pool/IFormulaProvider.sol\\\";\\nimport \\\"./interfaces/pool/IRequiemWeightedMath.sol\\\";\\nimport \\\"./libraries/weighted/WeightedOracleMath.sol\\\";\\nimport \\\"./libraries/weighted/WeightedPoolUserDataHelpers.sol\\\";\\nimport \\\"./libraries/weighted/WeightedPool2TokensMiscData.sol\\\";\\n\\ncontract Requiem2PoolTokens is IMinimalSwapInfoPool, BasePoolAuthorization, RequiemPoolToken, TemporarilyPausable, PoolPriceOracle, WeightedOracleMath {\\n    using FixedPoint for uint256;\\n    using WeightedPoolUserDataHelpers for bytes;\\n    using WeightedPool2TokensMiscData for bytes32;\\n\\n    uint256 private constant _MINIMUM_BPT = 1e6;\\n\\n    // 1e18 corresponds to 1.0, or a 100% fee\\n    uint256 private constant _MIN_SWAP_FEE_PERCENTAGE = 1e12; // 0.0001%\\n    uint256 private constant _MAX_SWAP_FEE_PERCENTAGE = 1e17; // 10%\\n    // The swap fee is internally stored using 64 bits, which is enough to represent _MAX_SWAP_FEE_PERCENTAGE.\\n\\n    bytes32 internal _miscData;\\n    uint256 private _lastInvariant;\\n\\n    bytes32 private immutable _poolId;\\n\\n    IERC20 internal immutable _token0;\\n    IERC20 internal immutable _token1;\\n\\n    uint256 private immutable _normalizedWeight0;\\n    uint256 private immutable _normalizedWeight1;\\n\\n    // The protocol fees will always be charged using the token associated with the max weight in the pool.\\n    // Since these Pools will register tokens only once, we can assume this index will be constant.\\n    uint256 private immutable _maxWeightTokenIndex;\\n\\n    // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will\\n    // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.\\n    // These factors are always greater than or equal to one: tokens with more than 18 decimals are not supported.\\n    uint256 internal immutable _scalingFactor0;\\n    uint256 internal immutable _scalingFactor1;\\n\\n    IRequiemWeightedMath private immutable weightedMath;\\n\\n    event OracleEnabledChanged(bool enabled);\\n    event SwapFeePercentageChanged(uint256 swapFeePercentage);\\n\\n    address public factory;\\n\\n    modifier onlyVault(bytes32 poolId) {\\n        RequiemErrors._require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);\\n        RequiemErrors._require(poolId == getPoolId(), Errors.INVALID_POOL_ID);\\n        _;\\n    }\\n\\n    struct NewPoolParams {\\n        IVault vault;\\n        string name;\\n        string symbol;\\n        IERC20 token0;\\n        IERC20 token1;\\n        uint256 normalizedWeight0;\\n        uint256 normalizedWeight1;\\n        uint256 swapFeePercentage;\\n        uint256 pauseWindowDuration;\\n        uint256 bufferPeriodDuration;\\n        bool oracleEnabled;\\n        address owner;\\n        address factory;\\n    }\\n\\n    constructor(NewPoolParams memory params)\\n        // Base Pools are expected to be deployed using factories. By using the factory address as the action\\n        // disambiguator, we make all Pools deployed by the same factory share action identifiers. This allows for\\n        // simpler management of permissions (such as being able to manage granting the 'set fee percentage' action in\\n        // any Pool created by the same factory), while still making action identifiers unique among different factories\\n        // if the selectors match, preventing accidental errors.\\n        Authentication(bytes32(uint256(uint160(msg.sender)) << (12 * 8)))\\n        RequiemPoolToken(params.name, params.symbol, params.vault)\\n        BasePoolAuthorization(params.owner)\\n        TemporarilyPausable(params.pauseWindowDuration, params.bufferPeriodDuration)\\n    {\\n        _setOracleEnabled(params.oracleEnabled);\\n        _setSwapFeePercentage(params.swapFeePercentage);\\n\\n        bytes32 poolId = params.vault.registerPool(IVault.PoolSpecialization.TWO_TOKEN);\\n\\n        // Pass in zero addresses for Asset Managers\\n        IERC20[] memory tokens = new IERC20[](2);\\n        tokens[0] = params.token0;\\n        tokens[1] = params.token1;\\n        params.vault.registerTokens(poolId, tokens, new address[](2));\\n\\n        // Set immutable state variables - these cannot be read from during construction\\n        _poolId = poolId;\\n\\n        _token0 = params.token0;\\n        _token1 = params.token1;\\n\\n        _scalingFactor0 = _computeScalingFactor(params.token0);\\n        _scalingFactor1 = _computeScalingFactor(params.token1);\\n\\n        weightedMath = IRequiemWeightedMath(IFormulaProvider(params.factory).formula());\\n\\n        // Ensure each normalized weight is above them minimum and find the token index of the maximum weight\\n        RequiemErrors._require(params.normalizedWeight0 >= weightedMath._MIN_WEIGHT(), Errors.MIN_WEIGHT);\\n        RequiemErrors._require(params.normalizedWeight1 >= weightedMath._MIN_WEIGHT(), Errors.MIN_WEIGHT);\\n\\n        // Ensure that the normalized weights sum to ONE\\n        uint256 normalizedSum = params.normalizedWeight0.add(params.normalizedWeight1);\\n        RequiemErrors._require(normalizedSum == FixedPoint.ONE, Errors.NORMALIZED_WEIGHT_INVARIANT);\\n\\n        _normalizedWeight0 = params.normalizedWeight0;\\n        _normalizedWeight1 = params.normalizedWeight1;\\n        _maxWeightTokenIndex = params.normalizedWeight0 >= params.normalizedWeight1 ? 0 : 1;\\n    }\\n\\n    // Getters / Setters\\n\\n    function getPoolId() public view override returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function getMiscData()\\n        external\\n        view\\n        returns (\\n            int256 logInvariant,\\n            int256 logTotalSupply,\\n            uint256 oracleSampleCreationTimestamp,\\n            uint256 oracleIndex,\\n            bool oracleEnabled,\\n            uint256 swapFeePercentage\\n        )\\n    {\\n        bytes32 miscData = _miscData;\\n        logInvariant = miscData.logInvariant();\\n        logTotalSupply = miscData.logTotalSupply();\\n        oracleSampleCreationTimestamp = miscData.oracleSampleCreationTimestamp();\\n        oracleIndex = miscData.oracleIndex();\\n        oracleEnabled = miscData.oracleEnabled();\\n        swapFeePercentage = miscData.swapFeePercentage();\\n    }\\n\\n    function getSwapFeePercentage() public view returns (uint256) {\\n        return _miscData.swapFeePercentage();\\n    }\\n\\n    // Caller must be approved by the Vault's Authorizer\\n    function setSwapFeePercentage(uint256 swapFeePercentage) public virtual authenticate whenNotPaused {\\n        _setSwapFeePercentage(swapFeePercentage);\\n    }\\n\\n    function _setSwapFeePercentage(uint256 swapFeePercentage) private {\\n        RequiemErrors._require(swapFeePercentage >= _MIN_SWAP_FEE_PERCENTAGE, Errors.MIN_SWAP_FEE_PERCENTAGE);\\n        RequiemErrors._require(swapFeePercentage <= _MAX_SWAP_FEE_PERCENTAGE, Errors.MAX_SWAP_FEE_PERCENTAGE);\\n\\n        _miscData = _miscData.setSwapFeePercentage(swapFeePercentage);\\n        emit SwapFeePercentageChanged(swapFeePercentage);\\n    }\\n\\n    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {\\n        return (actionId == getActionId(BasePool.setSwapFeePercentage.selector)) || (actionId == getActionId(BasePool.setAssetManagerPoolConfig.selector));\\n    }\\n\\n    /**\\n     * @dev Balancer Governance can always enable the Oracle, even if it was originally not enabled. This allows for\\n     * Pools that unexpectedly drive much more volume and liquidity than expected to serve as Price Oracles.\\n     *\\n     * Note that the Oracle can only be enabled - it can never be disabled.\\n     */\\n    function enableOracle() external whenNotPaused authenticate {\\n        _setOracleEnabled(true);\\n\\n        // Cache log invariant and supply only if the pool was initialized\\n        if (totalSupply() > 0) {\\n            _cacheInvariantAndSupply();\\n        }\\n    }\\n\\n    function _setOracleEnabled(bool enabled) internal {\\n        _miscData = _miscData.setOracleEnabled(enabled);\\n        emit OracleEnabledChanged(enabled);\\n    }\\n\\n    // Caller must be approved by the Vault's Authorizer\\n    function setPaused(bool paused) external authenticate {\\n        _setPaused(paused);\\n    }\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory) {\\n        return _normalizedWeights();\\n    }\\n\\n    function _normalizedWeights() internal view virtual returns (uint256[] memory) {\\n        uint256[] memory normalizedWeights = new uint256[](2);\\n        normalizedWeights[0] = _normalizedWeights(true);\\n        normalizedWeights[1] = _normalizedWeights(false);\\n        return normalizedWeights;\\n    }\\n\\n    function _normalizedWeights(bool token0) internal view virtual returns (uint256) {\\n        return token0 ? _normalizedWeight0 : _normalizedWeight1;\\n    }\\n\\n    function getLastInvariant() external view returns (uint256) {\\n        return _lastInvariant;\\n    }\\n\\n    /**\\n     * @dev Returns the current value of the invariant.\\n     */\\n    function getInvariant() public view returns (uint256) {\\n        (, uint256[] memory balances, ) = getVault().getPoolTokens(getPoolId());\\n\\n        // Since the Pool hooks always work with upscaled balances, we manually\\n        // upscale here for consistency\\n        _upscaleArray(balances);\\n\\n        uint256[] memory normalizedWeights = _normalizedWeights();\\n        return weightedMath._calculateInvariant(normalizedWeights, balances);\\n    }\\n\\n    // Swap Hooks\\n\\n    function onSwap(\\n        SwapRequest memory request,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) public virtual override whenNotPaused onlyVault(request.poolId) returns (uint256) {\\n        bool tokenInIsToken0 = request.tokenIn == _token0;\\n\\n        uint256 scalingFactorTokenIn = _scalingFactor(tokenInIsToken0);\\n        uint256 scalingFactorTokenOut = _scalingFactor(!tokenInIsToken0);\\n\\n        uint256 normalizedWeightIn = _normalizedWeights(tokenInIsToken0);\\n        uint256 normalizedWeightOut = _normalizedWeights(!tokenInIsToken0);\\n\\n        // All token amounts are upscaled.\\n        balanceTokenIn = _upscale(balanceTokenIn, scalingFactorTokenIn);\\n        balanceTokenOut = _upscale(balanceTokenOut, scalingFactorTokenOut);\\n\\n        // Update price oracle with the pre-swap balances\\n        _updateOracle(request.lastChangeBlock, tokenInIsToken0 ? balanceTokenIn : balanceTokenOut, tokenInIsToken0 ? balanceTokenOut : balanceTokenIn);\\n\\n        if (request.kind == IVault.SwapKind.GIVEN_IN) {\\n            // Fees are subtracted before scaling, to reduce the complexity of the rounding direction analysis.\\n            // This is amount - fee amount, so we round up (favoring a higher fee amount).\\n            uint256 feeAmount = request.amount.mulUp(getSwapFeePercentage());\\n            request.amount = _upscale(request.amount.sub(feeAmount), scalingFactorTokenIn);\\n\\n            uint256 amountOut = _onSwapGivenIn(request, balanceTokenIn, balanceTokenOut, normalizedWeightIn, normalizedWeightOut);\\n\\n            // amountOut tokens are exiting the Pool, so we round down.\\n            return _downscaleDown(amountOut, scalingFactorTokenOut);\\n        } else {\\n            request.amount = _upscale(request.amount, scalingFactorTokenOut);\\n\\n            uint256 amountIn = _onSwapGivenOut(request, balanceTokenIn, balanceTokenOut, normalizedWeightIn, normalizedWeightOut);\\n\\n            // amountIn tokens are entering the Pool, so we round up.\\n            amountIn = _downscaleUp(amountIn, scalingFactorTokenIn);\\n\\n            // Fees are added after scaling happens, to reduce the complexity of the rounding direction analysis.\\n            // This is amount + fee amount, so we round up (favoring a higher fee amount).\\n            return amountIn.divUp(getSwapFeePercentage().complement());\\n        }\\n    }\\n\\n    function _onSwapGivenIn(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut,\\n        uint256 normalizedWeightIn,\\n        uint256 normalizedWeightOut\\n    ) private view returns (uint256) {\\n        // Swaps are disabled while the contract is paused.\\n        return weightedMath._calcOutGivenIn(currentBalanceTokenIn, normalizedWeightIn, currentBalanceTokenOut, normalizedWeightOut, swapRequest.amount);\\n    }\\n\\n    function _onSwapGivenOut(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut,\\n        uint256 normalizedWeightIn,\\n        uint256 normalizedWeightOut\\n    ) private view returns (uint256) {\\n        // Swaps are disabled while the contract is paused.\\n        return weightedMath._calcInGivenOut(currentBalanceTokenIn, normalizedWeightIn, currentBalanceTokenOut, normalizedWeightOut, swapRequest.amount);\\n    }\\n\\n    // Join Hook\\n\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) public virtual override onlyVault(poolId) whenNotPaused returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts) {\\n        // All joins, including initializations, are disabled while the contract is paused.\\n\\n        uint256 bptAmountOut;\\n        if (totalSupply() == 0) {\\n            (bptAmountOut, amountsIn) = _onInitializePool(poolId, sender, recipient, userData);\\n\\n            // On initialization, we lock _MINIMUM_BPT by minting it for the zero address. This BPT acts as a minimum\\n            // as it will never be burned, which reduces potential issues with rounding, and also prevents the Pool from\\n            // ever being fully drained.\\n            RequiemErrors._require(bptAmountOut >= _MINIMUM_BPT, Errors.MINIMUM_BPT);\\n            _mintPoolTokens(address(0), _MINIMUM_BPT);\\n            _mintPoolTokens(recipient, bptAmountOut - _MINIMUM_BPT);\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn);\\n\\n            // There are no due protocol fee amounts during initialization\\n            dueProtocolFeeAmounts = new uint256[](2);\\n        } else {\\n            _upscaleArray(balances);\\n\\n            // Update price oracle with the pre-join balances\\n            _updateOracle(lastChangeBlock, balances[0], balances[1]);\\n\\n            (bptAmountOut, amountsIn, dueProtocolFeeAmounts) = _onJoinPool(poolId, sender, recipient, balances, lastChangeBlock, protocolSwapFeePercentage, userData);\\n\\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\\n\\n            _mintPoolTokens(recipient, bptAmountOut);\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn);\\n            // dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\\n            _downscaleDownArray(dueProtocolFeeAmounts);\\n        }\\n\\n        // Update cached total supply and invariant using the results after the join that will be used for future\\n        // oracle updates.\\n        _cacheInvariantAndSupply();\\n    }\\n\\n    /**\\n     * @dev Called when the Pool is joined for the first time; that is, when the BPT total supply is zero.\\n     *\\n     * Returns the amount of BPT to mint, and the token amounts the Pool will receive in return.\\n     *\\n     * Minted BPT will be sent to `recipient`, except for _MINIMUM_BPT, which will be deducted from this amount and sent\\n     * to the zero address instead. This will cause that BPT to remain forever locked there, preventing total BTP from\\n     * ever dropping below that value, and ensuring `_onInitializePool` can only be called once in the entire Pool's\\n     * lifetime.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     */\\n    function _onInitializePool(\\n        bytes32,\\n        address,\\n        address,\\n        bytes memory userData\\n    ) private returns (uint256, uint256[] memory) {\\n        BaseWeightedPool.JoinKind kind = userData.joinKind();\\n        RequiemErrors._require(kind == BaseWeightedPool.JoinKind.INIT, Errors.UNINITIALIZED);\\n\\n        uint256[] memory amountsIn = userData.initialAmountsIn();\\n        InputHelpers.ensureInputLengthMatch(amountsIn.length, 2);\\n        _upscaleArray(amountsIn);\\n\\n        uint256[] memory normalizedWeights = _normalizedWeights();\\n\\n        uint256 invariantAfterJoin = weightedMath._calculateInvariant(normalizedWeights, amountsIn);\\n\\n        // Set the initial BPT to the value of the invariant times the number of tokens. This makes BPT supply more\\n        // consistent in Pools with similar compositions but different number of tokens.\\n        uint256 bptAmountOut = invariantAfterJoin * 2;\\n\\n        _lastInvariant = invariantAfterJoin;\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    /**\\n     * @dev Called whenever the Pool is joined after the first initialization join (see `_onInitializePool`).\\n     *\\n     * Returns the amount of BPT to mint, the token amounts that the Pool will receive in return, and the number of\\n     * tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * Minted BPT will be sent to `recipient`.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onJoinPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onJoinPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory balances,\\n        uint256,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        private\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        uint256[] memory normalizedWeights = _normalizedWeights();\\n\\n        // Due protocol swap fee amounts are computed by measuring the growth of the invariant between the previous join\\n        // or exit event and now - the invariant's growth is due exclusively to swap fees. This avoids spending gas\\n        // computing them on each individual swap\\n        uint256 invariantBeforeJoin = weightedMath._calculateInvariant(normalizedWeights, balances);\\n\\n        uint256[] memory dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(balances, normalizedWeights, _lastInvariant, invariantBeforeJoin, protocolSwapFeePercentage);\\n\\n        // Update current balances by subtracting the protocol fee amounts\\n        _mutateAmounts(balances, dueProtocolFeeAmounts, FixedPoint.sub);\\n        (uint256 bptAmountOut, uint256[] memory amountsIn) = _doJoin(balances, normalizedWeights, userData);\\n\\n        // Update the invariant with the balances the Pool will have after the join, in order to compute the\\n        // protocol swap fee amounts due in future joins and exits.\\n        _mutateAmounts(balances, amountsIn, FixedPoint.add);\\n        _lastInvariant = weightedMath._calculateInvariant(normalizedWeights, balances);\\n\\n        return (bptAmountOut, amountsIn, dueProtocolFeeAmounts);\\n    }\\n\\n    function _doJoin(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        BaseWeightedPool.JoinKind kind = userData.joinKind();\\n\\n        if (kind == BaseWeightedPool.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\n            return _joinExactTokensInForBPTOut(balances, normalizedWeights, userData);\\n        } else if (kind == BaseWeightedPool.JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {\\n            return _joinTokenInForExactBPTOut(balances, normalizedWeights, userData);\\n        } else if (kind == BaseWeightedPool.JoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT) {\\n            return _joinAllTokensInForExactBPTOut(balances, userData);\\n        } else {\\n            RequiemErrors._revert(Errors.UNHANDLED_JOIN_KIND);\\n        }\\n    }\\n\\n    function _joinExactTokensInForBPTOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();\\n        InputHelpers.ensureInputLengthMatch(amountsIn.length, 2);\\n\\n        _upscaleArray(amountsIn);\\n\\n        (uint256 bptAmountOut, ) = weightedMath._calcBptOutGivenExactTokensIn(balances, normalizedWeights, amountsIn, totalSupply(), getSwapFeePercentage());\\n\\n        RequiemErrors._require(bptAmountOut >= minBPTAmountOut, Errors.BPT_OUT_MIN_AMOUNT);\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function _joinTokenInForExactBPTOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();\\n        // Note that there is no maximum amountIn parameter: this is handled by `IVault.joinPool`.\\n\\n        RequiemErrors._require(tokenIndex < 2, Errors.OUT_OF_BOUNDS);\\n\\n        uint256[] memory amountsIn = new uint256[](2);\\n        (amountsIn[tokenIndex], ) = weightedMath._calcTokenInGivenExactBptOut(balances[tokenIndex], normalizedWeights[tokenIndex], bptAmountOut, totalSupply(), getSwapFeePercentage());\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function _joinAllTokensInForExactBPTOut(uint256[] memory balances, bytes memory userData) private view returns (uint256, uint256[] memory) {\\n        uint256 bptAmountOut = userData.allTokensInForExactBptOut();\\n        // Note that there is no maximum amountsIn parameter: this is handled by `IVault.joinPool`.\\n\\n        uint256[] memory amountsIn = weightedMath._calcAllTokensInGivenExactBptOut(balances, bptAmountOut, totalSupply());\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    // Exit Hook\\n\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) public virtual override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        _upscaleArray(balances);\\n\\n        (uint256 bptAmountIn, uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts) = _onExitPool(\\n            poolId,\\n            sender,\\n            recipient,\\n            balances,\\n            lastChangeBlock,\\n            protocolSwapFeePercentage,\\n            userData\\n        );\\n\\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\\n\\n        _burnPoolTokens(sender, bptAmountIn);\\n\\n        // Both amountsOut and dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\\n        _downscaleDownArray(amountsOut);\\n        _downscaleDownArray(dueProtocolFeeAmounts);\\n\\n        // Update cached total supply and invariant using the results after the exit that will be used for future\\n        // oracle updates, only if the pool was not paused (to minimize code paths taken while paused).\\n        if (_isNotPaused()) {\\n            _cacheInvariantAndSupply();\\n        }\\n\\n        return (amountsOut, dueProtocolFeeAmounts);\\n    }\\n\\n    /**\\n     * @dev Called whenever the Pool is exited.\\n     *\\n     * Returns the amount of BPT to burn, the token amounts for each Pool token that the Pool will grant in return, and\\n     * the number of tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * BPT will be burnt from `sender`.\\n     *\\n     * The Pool will grant tokens to `recipient`. These amounts are considered upscaled and will be downscaled\\n     * (rounding down) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onExitPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onExitPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        private\\n        returns (\\n            uint256 bptAmountIn,\\n            uint256[] memory amountsOut,\\n            uint256[] memory dueProtocolFeeAmounts\\n        )\\n    {\\n        // Exits are not completely disabled while the contract is paused: proportional exits (exact BPT in for tokens\\n        // out) remain functional.\\n\\n        uint256[] memory normalizedWeights = _normalizedWeights();\\n\\n        if (_isNotPaused()) {\\n            // Update price oracle with the pre-exit balances\\n            _updateOracle(lastChangeBlock, balances[0], balances[1]);\\n\\n            // Due protocol swap fee amounts are computed by measuring the growth of the invariant between the previous\\n            // join or exit event and now - the invariant's growth is due exclusively to swap fees. This avoids\\n            // spending gas calculating the fees on each individual swap.\\n            uint256 invariantBeforeExit = weightedMath._calculateInvariant(normalizedWeights, balances);\\n            dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(balances, normalizedWeights, _lastInvariant, invariantBeforeExit, protocolSwapFeePercentage);\\n\\n            // Update current balances by subtracting the protocol fee amounts\\n            _mutateAmounts(balances, dueProtocolFeeAmounts, FixedPoint.sub);\\n        } else {\\n            // If the contract is paused, swap protocol fee amounts are not charged and the oracle is not updated\\n            // to avoid extra calculations and reduce the potential for errors.\\n            dueProtocolFeeAmounts = new uint256[](2);\\n        }\\n\\n        (bptAmountIn, amountsOut) = _doExit(balances, normalizedWeights, userData);\\n\\n        // Update the invariant with the balances the Pool will have after the exit, in order to compute the\\n        // protocol swap fees due in future joins and exits.\\n        _mutateAmounts(balances, amountsOut, FixedPoint.sub);\\n        _lastInvariant = weightedMath._calculateInvariant(normalizedWeights, balances);\\n\\n        return (bptAmountIn, amountsOut, dueProtocolFeeAmounts);\\n    }\\n\\n    function _doExit(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        BaseWeightedPool.ExitKind kind = userData.exitKind();\\n\\n        if (kind == BaseWeightedPool.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {\\n            return _exitExactBPTInForTokenOut(balances, normalizedWeights, userData);\\n        } else if (kind == BaseWeightedPool.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\\n            return _exitExactBPTInForTokensOut(balances, userData);\\n        } else if (kind == BaseWeightedPool.ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {\\n            return _exitBPTInForExactTokensOut(balances, normalizedWeights, userData);\\n        } else {\\n            RequiemErrors._revert(Errors.UNHANDLED_EXIT_KIND);\\n        }\\n    }\\n\\n    function _exitExactBPTInForTokenOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view whenNotPaused returns (uint256, uint256[] memory) {\\n        // This exit function is disabled if the contract is paused.\\n\\n        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();\\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\\n\\n        RequiemErrors._require(tokenIndex < 2, Errors.OUT_OF_BOUNDS);\\n\\n        // We exit in a single token, so we initialize amountsOut with zeros\\n        uint256[] memory amountsOut = new uint256[](2);\\n\\n        // And then assign the result to the selected token\\n        (amountsOut[tokenIndex], ) = weightedMath._calcTokenOutGivenExactBptIn(balances[tokenIndex], normalizedWeights[tokenIndex], bptAmountIn, totalSupply(), getSwapFeePercentage());\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function _exitExactBPTInForTokensOut(uint256[] memory balances, bytes memory userData) private view returns (uint256, uint256[] memory) {\\n        // This exit function is the only one that is not disabled if the contract is paused: it remains unrestricted\\n        // in an attempt to provide users with a mechanism to retrieve their tokens in case of an emergency.\\n        // This particular exit function is the only one that remains available because it is the simplest one, and\\n        // therefore the one with the lowest likelihood of errors.\\n\\n        uint256 bptAmountIn = userData.exactBptInForTokensOut();\\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\\n\\n        uint256[] memory amountsOut = weightedMath._calcTokensOutGivenExactBptIn(balances, bptAmountIn, totalSupply());\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function _exitBPTInForExactTokensOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view whenNotPaused returns (uint256, uint256[] memory) {\\n        // This exit function is disabled if the contract is paused.\\n\\n        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();\\n        InputHelpers.ensureInputLengthMatch(amountsOut.length, 2);\\n        _upscaleArray(amountsOut);\\n\\n        (uint256 bptAmountIn, ) = weightedMath._calcBptInGivenExactTokensOut(balances, normalizedWeights, amountsOut, totalSupply(), getSwapFeePercentage());\\n        RequiemErrors._require(bptAmountIn <= maxBPTAmountIn, Errors.BPT_IN_MAX_AMOUNT);\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    // Oracle functions\\n\\n    /**\\n     * @dev Updates the Price Oracle based on the Pool's current state (balances, BPT supply and invariant). Must be\\n     * called on *all* state-changing functions with the balances *before* the state change happens, and with\\n     * `lastChangeBlock` as the number of the block in which any of the balances last changed.\\n     */\\n    function _updateOracle(\\n        uint256 lastChangeBlock,\\n        uint256 balanceToken0,\\n        uint256 balanceToken1\\n    ) internal {\\n        bytes32 miscData = _miscData;\\n        if (miscData.oracleEnabled() && block.number > lastChangeBlock) {\\n            int256 logSpotPrice = WeightedOracleMath._calcLogSpotPrice(_normalizedWeight0, balanceToken0, _normalizedWeight1, balanceToken1);\\n\\n            int256 logBPTPrice = WeightedOracleMath._calcLogBPTPrice(_normalizedWeight0, balanceToken0, miscData.logTotalSupply());\\n\\n            uint256 oracleCurrentIndex = miscData.oracleIndex();\\n            uint256 oracleCurrentSampleInitialTimestamp = miscData.oracleSampleCreationTimestamp();\\n            uint256 oracleUpdatedIndex = _processPriceData(oracleCurrentSampleInitialTimestamp, oracleCurrentIndex, logSpotPrice, logBPTPrice, miscData.logInvariant());\\n\\n            if (oracleCurrentIndex != oracleUpdatedIndex) {\\n                // solhint-disable not-rely-on-time\\n                miscData = miscData.setOracleIndex(oracleUpdatedIndex);\\n                miscData = miscData.setOracleSampleCreationTimestamp(block.timestamp);\\n                _miscData = miscData;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores the logarithm of the invariant and BPT total supply, to be later used in each oracle update. Because\\n     * it is stored in miscData, which is read in all operations (including swaps), this saves gas by not requiring to\\n     * compute or read these values when updating the oracle.\\n     *\\n     * This function must be called by all actions that update the invariant and BPT supply (joins and exits). Swaps\\n     * also alter the invariant due to collected swap fees, but this growth is considered negligible and not accounted\\n     * for.\\n     */\\n    function _cacheInvariantAndSupply() internal {\\n        bytes32 miscData = _miscData;\\n        if (miscData.oracleEnabled()) {\\n            miscData = miscData.setLogInvariant(LogCompression.toLowResLog(_lastInvariant));\\n            miscData = miscData.setLogTotalSupply(LogCompression.toLowResLog(totalSupply()));\\n            _miscData = miscData;\\n        }\\n    }\\n\\n    function _getOracleIndex() internal view override returns (uint256) {\\n        return _miscData.oracleIndex();\\n    }\\n\\n    // Query functions\\n\\n    /**\\n     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn) {\\n        InputHelpers.ensureInputLengthMatch(balances.length, 2);\\n\\n        _queryAction(poolId, sender, recipient, balances, lastChangeBlock, protocolSwapFeePercentage, userData, _onJoinPool, _downscaleUpArray);\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptOut, amountsIn);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut) {\\n        InputHelpers.ensureInputLengthMatch(balances.length, 2);\\n\\n        _queryAction(poolId, sender, recipient, balances, lastChangeBlock, protocolSwapFeePercentage, userData, _onExitPool, _downscaleDownArray);\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptIn, amountsOut);\\n    }\\n\\n    // Helpers\\n\\n    function _getDueProtocolFeeAmounts(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256 previousInvariant,\\n        uint256 currentInvariant,\\n        uint256 protocolSwapFeePercentage\\n    ) private view returns (uint256[] memory) {\\n        // Initialize with zeros\\n        uint256[] memory dueProtocolFeeAmounts = new uint256[](2);\\n\\n        // Early return if the protocol swap fee percentage is zero, saving gas.\\n        if (protocolSwapFeePercentage == 0) {\\n            return dueProtocolFeeAmounts;\\n        }\\n\\n        // The protocol swap fees are always paid using the token with the largest weight in the Pool. As this is the\\n        // token that is expected to have the largest balance, using it to pay fees should not unbalance the Pool.\\n        dueProtocolFeeAmounts[_maxWeightTokenIndex] = weightedMath._calcDueTokenProtocolSwapFeeAmount(\\n            balances[_maxWeightTokenIndex],\\n            normalizedWeights[_maxWeightTokenIndex],\\n            previousInvariant,\\n            currentInvariant,\\n            protocolSwapFeePercentage\\n        );\\n\\n        return dueProtocolFeeAmounts;\\n    }\\n\\n    /**\\n     * @dev Mutates `amounts` by applying `mutation` with each entry in `arguments`.\\n     *\\n     * Equivalent to `amounts = amounts.map(mutation)`.\\n     */\\n    function _mutateAmounts(\\n        uint256[] memory toMutate,\\n        uint256[] memory arguments,\\n        function(uint256, uint256) pure returns (uint256) mutation\\n    ) private pure {\\n        toMutate[0] = mutation(toMutate[0], arguments[0]);\\n        toMutate[1] = mutation(toMutate[1], arguments[1]);\\n    }\\n\\n    /**\\n     * @dev This function returns the appreciation of one BPT relative to the\\n     * underlying tokens. This starts at 1 when the pool is created and grows over time\\n     */\\n    function getRate() public view returns (uint256) {\\n        // The initial BPT supply is equal to the invariant times the number of tokens.\\n        return (getInvariant() * 2).divDown(totalSupply());\\n    }\\n\\n    // Scaling\\n\\n    /**\\n     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\\n     * it had 18 decimals.\\n     */\\n    function _computeScalingFactor(IERC20 token) private view returns (uint256) {\\n        // Tokens that don't implement the `decimals` method are not supported.\\n        uint256 tokenDecimals = ERC20(address(token)).decimals();\\n\\n        // Tokens with more than 18 decimals are not supported.\\n        uint256 decimalsDifference = 18 - tokenDecimals;\\n        return 10**decimalsDifference;\\n    }\\n\\n    /**\\n     * @dev Returns the scaling factor for one of the Pool's tokens. Reverts if `token` is not a token registered by the\\n     * Pool.\\n     */\\n    function _scalingFactor(bool token0) internal view returns (uint256) {\\n        return token0 ? _scalingFactor0 : _scalingFactor1;\\n    }\\n\\n    /**\\n     * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\\n     * scaling or not.\\n     */\\n    function _upscale(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return amount * scalingFactor;\\n    }\\n\\n    /**\\n     * @dev Same as `_upscale`, but for an entire array (of two elements). This function does not return anything, but\\n     * instead *mutates* the `amounts` array.\\n     */\\n    function _upscaleArray(uint256[] memory amounts) internal view {\\n        amounts[0] = amounts[0] * _scalingFactor(true);\\n        amounts[1] = amounts[1] * _scalingFactor(false);\\n    }\\n\\n    /**\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n     * whether it needed scaling or not. The result is rounded down.\\n     */\\n    function _downscaleDown(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.divDown(amount, scalingFactor);\\n    }\\n\\n    /**\\n     * @dev Same as `_downscaleDown`, but for an entire array (of two elements). This function does not return anything,\\n     * but instead *mutates* the `amounts` array.\\n     */\\n    function _downscaleDownArray(uint256[] memory amounts) internal view {\\n        amounts[0] = Math.divDown(amounts[0], _scalingFactor(true));\\n        amounts[1] = Math.divDown(amounts[1], _scalingFactor(false));\\n    }\\n\\n    /**\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n     * whether it needed scaling or not. The result is rounded up.\\n     */\\n    function _downscaleUp(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.divUp(amount, scalingFactor);\\n    }\\n\\n    /**\\n     * @dev Same as `_downscaleUp`, but for an entire array (of two elements). This function does not return anything,\\n     * but instead *mutates* the `amounts` array.\\n     */\\n    function _downscaleUpArray(uint256[] memory amounts) internal view {\\n        amounts[0] = Math.divUp(amounts[0], _scalingFactor(true));\\n        amounts[1] = Math.divUp(amounts[1], _scalingFactor(false));\\n    }\\n\\n    function _getAuthorizer() internal view override returns (IAuthorizer) {\\n        // Access control management is delegated to the Vault's Authorizer. This lets Balancer Governance manage which\\n        // accounts can call permissioned functions: for example, to perform emergency pauses.\\n        // If the owner is delegated, then *all* permissioned functions, including `setSwapFeePercentage`, will be under\\n        // Governance control.\\n        return getVault().getAuthorizer();\\n    }\\n\\n    function _queryAction(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        function(bytes32, address, address, uint256[] memory, uint256, uint256, bytes memory) internal returns (uint256, uint256[] memory, uint256[] memory) _action,\\n        function(uint256[] memory) internal view _downscaleArray\\n    ) private {\\n        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed\\n        // explanation.\\n\\n        if (msg.sender != address(this)) {\\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\\n            // the preceding if statement will be executed instead.\\n\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = address(this).call(msg.data);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // This call should always revert to decode the bpt and token amounts from the revert reason\\n                switch success\\n                case 0 {\\n                    // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\\n                    // stored there as we take full control of the execution and then immediately return.\\n\\n                    // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\\n                    // there was another revert reason and we should forward it.\\n                    returndatacopy(0, 0, 0x04)\\n                    let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n\\n                    // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\\n                    if eq(eq(error, 0x43adbafb00000000000000000000000000000000000000000000000000000000), 0) {\\n                        returndatacopy(0, 0, returndatasize())\\n                        revert(0, returndatasize())\\n                    }\\n\\n                    // The returndata contains the signature, followed by the raw memory representation of the\\n                    // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded\\n                    // representation of these.\\n                    // An ABI-encoded response will include one additional field to indicate the starting offset of\\n                    // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the\\n                    // returndata.\\n                    //\\n                    // In returndata:\\n                    // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]\\n                    // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]\\n                    //\\n                    // We now need to return (ABI-encoded values):\\n                    // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]\\n                    // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]\\n\\n                    // We copy 32 bytes for the `bptAmount` from returndata into memory.\\n                    // Note that we skip the first 4 bytes for the error signature\\n                    returndatacopy(0, 0x04, 32)\\n\\n                    // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after\\n                    // the initial 64 bytes.\\n                    mstore(0x20, 64)\\n\\n                    // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.\\n                    // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also\\n                    // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.\\n                    returndatacopy(0x40, 0x24, sub(returndatasize(), 36))\\n\\n                    // We finally return the ABI-encoded uint256 and the array, which has a total length equal to\\n                    // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the\\n                    // error signature.\\n                    return(0, add(returndatasize(), 28))\\n                }\\n                default {\\n                    // This call should always revert, but we fail nonetheless if that didn't happen\\n                    invalid()\\n                }\\n            }\\n        } else {\\n            _upscaleArray(balances);\\n\\n            (uint256 bptAmount, uint256[] memory tokenAmounts, ) = _action(poolId, sender, recipient, balances, lastChangeBlock, protocolSwapFeePercentage, userData);\\n\\n            _downscaleArray(tokenAmounts);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of\\n                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values\\n                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32\\n                let size := mul(mload(tokenAmounts), 32)\\n\\n                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there\\n                // will be at least one available slot due to how the memory scratch space works.\\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\\n                let start := sub(tokenAmounts, 0x20)\\n                mstore(start, bptAmount)\\n\\n                // We send one extra value for the error signature \\\"QueryError(uint256,uint256[])\\\" which is 0x43adbafb\\n                // We use the previous slot to `bptAmount`.\\n                mstore(sub(start, 0x20), 0x0000000000000000000000000000000000000000000000000000000043adbafb)\\n                start := sub(start, 0x04)\\n\\n                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return\\n                // the `bptAmount`, the array length, and the error signature.\\n                revert(start, add(size, 68))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd37ea1da7c3e2c6f683218a27882edddcea1c7090abb5267595648a4e354323\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Requiem2PoolTokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\n\\nimport \\\"./libraries/factories/BasePoolSplitCodeFactory.sol\\\";\\nimport \\\"./interfaces/pool/IFormulaProvider.sol\\\";\\nimport \\\"./libraries/factories/FactoryWidePauseWindow.sol\\\";\\nimport \\\"./interfaces/pool/IRequiemWeightedMath.sol\\\";\\nimport \\\"./Requiem2PoolTokens.sol\\\";\\n\\ncontract Requiem2PoolTokensFactory is IFormulaProvider, BasePoolSplitCodeFactory, FactoryWidePauseWindow {\\n    address public formula;\\n\\n    constructor(IVault vault, address _formula) BasePoolSplitCodeFactory(vault, type(Requiem2PoolTokens).creationCode) {\\n        formula = _formula;\\n    }\\n\\n    /**\\n     * @dev Deploys a new `Requiem2PoolTokens`.\\n     */\\n    function create(\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256[] memory weights,\\n        uint256 swapFeePercentage,\\n        bool oracleEnabled,\\n        address owner\\n    ) external returns (address) {\\n        // TODO: Do not use arrays in the interface for tokens and weights\\n\\n        (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) = getPauseConfiguration();\\n\\n        Requiem2PoolTokens.NewPoolParams memory params = Requiem2PoolTokens.NewPoolParams({\\n            vault: getVault(),\\n            name: name,\\n            symbol: symbol,\\n            token0: tokens[0],\\n            token1: tokens[1],\\n            normalizedWeight0: weights[0],\\n            normalizedWeight1: weights[1],\\n            swapFeePercentage: swapFeePercentage,\\n            pauseWindowDuration: pauseWindowDuration,\\n            bufferPeriodDuration: bufferPeriodDuration,\\n            oracleEnabled: oracleEnabled,\\n            owner: owner,\\n            factory: address(this)\\n        });\\n\\n        return _create(abi.encode(params));\\n    }\\n}\\n\",\"keccak256\":\"0x60949e33ec4e73e858b158d760ef124f7283ef69f14ff45e8f11ea5c21743146\",\"license\":\"GPL-3.0-or-later\"},\"contracts/RequiemPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./libraries/ERC20.sol\\\";\\nimport \\\"./libraries/ERC20Permit.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\n\\n/**\\n * @title Highly opinionated token implementation\\n * @author Balancer Labs\\n * @dev\\n * - Includes functions to increase and decrease allowance as a workaround\\n *   for the well-known issue with `approve`:\\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n *   decreased by calls to transferFrom\\n * - Lets a token holder use `transferFrom` to send their own tokens,\\n *   without first setting allowance\\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\\n * - Assigns infinite allowance for all token holders to the Vault\\n */\\ncontract RequiemPoolToken is ERC20, ERC20Permit {\\n    IVault private immutable _vault;\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        IVault vault\\n    ) ERC20(tokenName, tokenSymbol) ERC20Permit(tokenName) {\\n        _vault = vault;\\n    }\\n\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    // Overrides\\n\\n    /**\\n     * @dev Override to grant the Vault infinite allowance, causing for Pool Tokens to not require approval.\\n     *\\n     * This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this\\n     * contract inherits.\\n     */\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        if (spender == address(getVault())) {\\n            return type(uint128).max;\\n        } else {\\n            return super.allowance(owner, spender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 currentAllowance = allowance(sender, msg.sender);\\n        require(msg.sender == sender || currentAllowance >= amount, \\\"ERC20_TRANSFER_EXCEEDS_ALLOWANCE\\\");\\n\\n        _transfer(sender, recipient, amount);\\n\\n        if (msg.sender != sender && currentAllowance != type(uint128).max) {\\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Override to allow decreasing allowance by more than the current amount (setting it to zero)\\n     */\\n    function decreaseAllowance(address spender, uint256 amount) public override returns (bool) {\\n        uint256 currentAllowance = allowance(msg.sender, spender);\\n\\n        if (amount >= currentAllowance) {\\n            _approve(msg.sender, spender, 0);\\n        } else {\\n            // No risk of underflow due to if condition\\n            _approve(msg.sender, spender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    // Internal functions\\n\\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\\n        _mint(recipient, amount);\\n    }\\n\\n    function _burnPoolTokens(address sender, uint256 amount) internal {\\n        _burn(sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6dfe9aa979c2156b1e76b6b77b655a6be3937682e36a3bfef4f8c457780c0a5e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa772d64fa4bd14838257646fb10d2a032790fea4bc835562f622a20be212b8e1\",\"license\":\"MIT\"},\"contracts/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x02bae8f193113580d895f1504bce6f442852b80d025051610696fe55a5e91058\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAssetManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IAssetManager {\\n    /**\\n     * @notice Emitted when asset manager is rebalanced\\n     */\\n    event Rebalance(bytes32 poolId);\\n\\n    /**\\n     * @notice Sets the config\\n     */\\n    function setConfig(bytes32 poolId, bytes calldata config) external;\\n\\n    /**\\n     * Note: No function to read the asset manager config is included in IAssetManager\\n     * as the signature is expected to vary between asset manager implementations\\n     */\\n\\n    /**\\n     * @notice Returns the asset manager's token\\n     */\\n    function getToken() external view returns (IERC20);\\n\\n    /**\\n     * @return the current assets under management of this asset manager\\n     */\\n    function getAUM(bytes32 poolId) external view returns (uint256);\\n\\n    /**\\n     * @return poolCash - The up-to-date cash balance of the pool\\n     * @return poolManaged - The up-to-date managed balance of the pool\\n     */\\n    function getPoolBalances(bytes32 poolId) external view returns (uint256 poolCash, uint256 poolManaged);\\n\\n    /**\\n     * @return The difference in tokens between the target investment\\n     * and the currently invested amount (i.e. the amount that can be invested)\\n     */\\n    function maxInvestableBalance(bytes32 poolId) external view returns (int256);\\n\\n    /**\\n     * @notice Updates the Vault on the value of the pool's investment returns\\n     */\\n    function updateBalanceOfPool(bytes32 poolId) external;\\n\\n    /**\\n     * @notice Determines whether the pool should rebalance given the provided balances\\n     */\\n    function shouldRebalance(uint256 cash, uint256 managed) external view returns (bool);\\n\\n    /**\\n     * @notice Rebalances funds between the pool and the asset manager to maintain target investment percentage.\\n     * @param poolId - the poolId of the pool to be rebalanced\\n     * @param force - a boolean representing whether a rebalance should be forced even when the pool is near balance\\n     */\\n    function rebalance(bytes32 poolId, bool force) external;\\n\\n    /**\\n     * @notice allows an authorized rebalancer to remove capital to facilitate large withdrawals\\n     * @param poolId - the poolId of the pool to withdraw funds back to\\n     * @param amount - the amount of tokens to withdraw back to the pool\\n     */\\n    function capitalOut(bytes32 poolId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xcfb124ae7f76bd53702e9a36616e70b07d261809f8ad87868d5fb24fb8c446d7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7b3b08ea1755ac1efb50e8d37dbeeece8f5257c5546d2a1fba6216cd1cf6c765\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x5148cace194d1c6914341a3084d8c463a433877f8f0763011a2b7f3dc0d06e2f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4d18419360b139dc464dade393d19d7d3a4742bc9600bf9464b53fb42cd6dc61\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xa3db41b75bbcdf2a243d25990dd362c5fe13de6511a4e0e05ea42b4483a08fea\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0x87d2ac19bfb3f5c33d01d53957eb25f13384f1a54921ba5134f5e69fdb8df412\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\",\"keccak256\":\"0xfb6c596db8e64e1b9cc45d000366ff9cbc86802cf19270e99f5ff49db08fb5d5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x125f6f4b5d7ce0461fdf71dde36b25b877937b5289282e8e9577fd764c96d2be\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0xc8ed355b31fc6bf3c558a325d598b69f6e4df2c379bb4fdcb462edfaa549d681\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\nimport \\\"./ISignaturesValidator.sol\\\";\\nimport \\\"./ITemporarilyPausable.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    // function flashLoan(\\n    //     IFlashLoanRecipient recipient,\\n    //     IERC20[] memory tokens,\\n    //     uint256[] memory amounts,\\n    //     bytes memory userData\\n    // ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0xebf8e5e43a2ceff799d9ad5a24a873fc24838b97a345f07d74a4edc152546ccc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x13735d45257a1ea45c2a7dc3bb8a68c89ae9b7159f57180c395793f57c05afcc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/oracle/IPoolPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\ninterface IPoolPriceOracle {\\n    /**\\n     * @dev Returns the raw data of the sample at `index`.\\n     */\\n    function getSample(uint256 index)\\n        external\\n        view\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 timestamp\\n        );\\n\\n    /**\\n     * @dev Returns the total number of samples.\\n     */\\n    function getTotalSamples() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdd24ec93651de1a1394ec3639f44c139ef8a0bd76ca712c6eb8d883b5c63d444\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/oracle/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\n/**\\n * @dev Interface for querying historical data from a Pool that can be used as a Price Oracle.\\n *\\n * This lets third parties retrieve average prices of tokens held by a Pool over a given period of time, as well as the\\n * price of the Pool share token (BPT) and invariant. Since the invariant is a sensible measure of Pool liquidity, it\\n * can be used to compare two different price sources, and choose the most liquid one.\\n *\\n * Once the oracle is fully initialized, all queries are guaranteed to succeed as long as they require no data that\\n * is not older than the largest safe query window.\\n */\\ninterface IPriceOracle {\\n    // The three values that can be queried:\\n    //\\n    // - PAIR_PRICE: the price of the tokens in the Pool, expressed as the price of the second token in units of the\\n    //   first token. For example, if token A is worth $2, and token B is worth $4, the pair price will be 2.0.\\n    //   Note that the price is computed *including* the tokens decimals. This means that the pair price of a Pool with\\n    //   DAI and USDC will be close to 1.0, despite DAI having 18 decimals and USDC 6.\\n    //\\n    // - BPT_PRICE: the price of the Pool share token (BPT), in units of the first token.\\n    //   Note that the price is computed *including* the tokens decimals. This means that the BPT price of a Pool with\\n    //   USDC in which BPT is worth $5 will be 5.0, despite the BPT having 18 decimals and USDC 6.\\n    //\\n    // - INVARIANT: the value of the Pool's invariant, which serves as a measure of its liquidity.\\n    enum Variable { PAIR_PRICE, BPT_PRICE, INVARIANT }\\n\\n    /**\\n     * @dev Returns the time average weighted price corresponding to each of `queries`. Prices are represented as 18\\n     * decimal fixed point values.\\n     */\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        returns (uint256[] memory results);\\n\\n    /**\\n     * @dev Returns latest sample of `variable`. Prices are represented as 18 decimal fixed point values.\\n     */\\n    function getLatest(Variable variable) external view returns (uint256);\\n\\n    /**\\n     * @dev Information for a Time Weighted Average query.\\n     *\\n     * Each query computes the average over a window of duration `secs` seconds that ended `ago` seconds ago. For\\n     * example, the average over the past 30 minutes is computed by settings secs to 1800 and ago to 0. If secs is 1800\\n     * and ago is 1800 as well, the average between 60 and 30 minutes ago is computed instead.\\n     */\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n\\n    /**\\n     * @dev Returns largest time window that can be safely queried, where 'safely' means the Oracle is guaranteed to be\\n     * able to produce a result and not revert.\\n     *\\n     * If a query has a non-zero `ago` value, then `secs + ago` (the oldest point in time) must be smaller than this\\n     * value for 'safe' queries.\\n     */\\n    function getLargestSafeQueryWindow() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the accumulators corresponding to each of `queries`.\\n     */\\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries)\\n        external\\n        view\\n        returns (int256[] memory results);\\n\\n    /**\\n     * @dev Information for an Accumulator query.\\n     *\\n     * Each query estimates the accumulator at a time `ago` seconds ago.\\n     */\\n    struct OracleAccumulatorQuery {\\n        Variable variable;\\n        uint256 ago;\\n    }\\n}\\n\",\"keccak256\":\"0x3280c28f034cb30a70755357cdf5c882ba49eea96a9da14362f35844d698d73e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/pool/IFormulaProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFormulaProvider {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function formula() external view returns (address);\\n}\\n\",\"keccak256\":\"0xadc9a8b96a99520ab7475ff395b126b29d63dcc022b42766aa9304af420aa590\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/pool/IRequiemWeightedMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// These functions start with an underscore, as if they were part of a contract and not a library. At some point this\\n// should be fixed.\\n// solhint-disable private-vars-leading-underscore\\n\\ninterface IRequiemWeightedMath {\\n    function _MIN_WEIGHT() external pure returns (uint256);\\n\\n    // Having a minimum normalized weight imposes a limit on the maximum number of tokens;\\n    // i.e., the largest possible pool is one where all tokens have exactly the minimum weight.\\n    function _MAX_WEIGHTED_TOKENS() external pure returns (uint256);\\n\\n    // Pool limits that arise from limitations in the fixed point power function (and the imposed 1:100 maximum weight\\n    // ratio).\\n\\n    // Swap limits: amounts swapped may not be larger than this percentage of total balance.\\n    function _MAX_IN_RATIO() external pure returns (uint256);\\n\\n    function _MAX_OUT_RATIO() external pure returns (uint256);\\n\\n    // Invariant growth limit: non-proportional joins cannot cause the invariant to increase by more than this ratio.\\n    function _MAX_INVARIANT_RATIO() external pure returns (uint256);\\n\\n    // Invariant shrink limit: non-proportional exits cannot cause the invariant to decrease by less than this ratio.\\n    function _MIN_INVARIANT_RATIO() external pure returns (uint256);\\n\\n    // Invariant is used to collect protocol swap fees by comparing its value between two times.\\n    // So we can round always to the same direction. It is also used to initiate the BPT amount\\n    // and, because there is a minimum BPT, we round down the invariant.\\n    function _calculateInvariant(uint256[] memory normalizedWeights, uint256[] memory balances) external pure returns (uint256 invariant);\\n\\n    // Computes how many tokens can be taken out of a pool if `amountIn` are sent, given the\\n    // current balances and weights.\\n    function _calcOutGivenIn(\\n        uint256 balanceIn,\\n        uint256 weightIn,\\n        uint256 balanceOut,\\n        uint256 weightOut,\\n        uint256 amountIn\\n    ) external pure returns (uint256);\\n\\n    // Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\\n    // current balances and weights.\\n    function _calcInGivenOut(\\n        uint256 balanceIn,\\n        uint256 weightIn,\\n        uint256 balanceOut,\\n        uint256 weightOut,\\n        uint256 amountOut\\n    ) external pure returns (uint256);\\n\\n    function _calcBptOutGivenExactTokensIn(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256, uint256[] memory);\\n\\n    /**\\n     * @dev Intermediate function to avoid stack-too-deep \\\"\\n     */\\n    function _computeJoinExactTokensInInvariantRatio(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsIn,\\n        uint256[] memory balanceRatiosWithFee,\\n        uint256 invariantRatioWithFees,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256 invariantRatio, uint256[] memory swapFees);\\n\\n    function _calcTokenInGivenExactBptOut(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 bptAmountOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256 amountIn, uint256 swapFee);\\n\\n    function _calcAllTokensInGivenExactBptOut(\\n        uint256[] memory balances,\\n        uint256 bptAmountOut,\\n        uint256 totalBPT\\n    ) external pure returns (uint256[] memory);\\n\\n    function _calcBptInGivenExactTokensOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256, uint256[] memory);\\n\\n    /**\\n     * @dev Intermediate function to avoid stack-too-deep \\\"\\n     */\\n    function _computeExitExactTokensOutInvariantRatio(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsOut,\\n        uint256[] memory balanceRatiosWithoutFee,\\n        uint256 invariantRatioWithoutFees,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256 invariantRatio, uint256[] memory swapFees);\\n\\n    function _calcTokenOutGivenExactBptIn(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 bptAmountIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256 amountOut, uint256 swapFee);\\n\\n    function _calcTokensOutGivenExactBptIn(\\n        uint256[] memory balances,\\n        uint256 bptAmountIn,\\n        uint256 totalBPT\\n    ) external pure returns (uint256[] memory);\\n\\n    function _calcDueTokenProtocolSwapFeeAmount(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 previousInvariant,\\n        uint256 currentInvariant,\\n        uint256 protocolSwapFeePercentage\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xda49ae8751d04d0b95706ee5b8ee80bb2ae2b3d8a7f151f090709a859aecb4b9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        // Silence state mutability warning without generating bytecode.\\n        // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and\\n        // https://github.com/ethereum/solidity/issues/2691\\n        this;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44d49dfe61b52db6aa85bc8678a33876becb1f124a3bd95a94289b5bc8393e21\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        RequiemErrors._require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\\n        RequiemErrors._require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_BALANCE);\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply + amount;\\n        _balances[account] = _balances[account] + amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        RequiemErrors._require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\n        _totalSupply = _totalSupply - amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x9f9ef78dc4eb776bfa7531511f71fa23844af1d0dae5c60d053ea5dc37bdcbd1\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Permit.sol\\\";\\nimport \\\"./EIP712.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    mapping(address => uint256) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        RequiemErrors._require(block.timestamp <= deadline, Errors.EXPIRED_PERMIT);\\n\\n        uint256 nonce = _nonces[owner];\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, nonce, deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        RequiemErrors._require((signer != address(0)) && (signer == owner), Errors.INVALID_SIGNATURE);\\n\\n        _nonces[owner] = nonce + 1;\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc1407674ad1c04621017bb12a95e7f45e08110593e8be66923ea504d749f37ee\",\"license\":\"MIT\"},\"contracts/libraries/LogCompression.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./math/LogExpMath.sol\\\";\\n\\n/**\\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\\n * a single storage slot, saving gas by performing less storage accesses.\\n *\\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\\n */\\nlibrary LogCompression {\\n    int256 private constant _LOG_COMPRESSION_FACTOR = 1e14;\\n    int256 private constant _HALF_LOG_COMPRESSION_FACTOR = 0.5e14;\\n\\n    /**\\n     * @dev Returns the natural logarithm of `value`, dropping most of the decimal places to arrive at a value that,\\n     * when passed to `fromLowResLog`, will have a maximum relative error of ~0.05% compared to `value`.\\n     *\\n     * Values returned from this function should not be mixed with other fixed-point values (as they have a different\\n     * number of digits), but can be added or subtracted. Use `fromLowResLog` to undo this process and return to an\\n     * 18 decimal places fixed point value.\\n     *\\n     * Because so much precision is lost, the logarithmic values can be stored using much fewer bits than the original\\n     * value required.\\n     */\\n    function toLowResLog(uint256 value) internal pure returns (int256) {\\n        int256 ln = LogExpMath.ln(int256(value));\\n\\n        // Rounding division for signed numerator\\n        int256 lnWithError = (ln > 0 ? ln + _HALF_LOG_COMPRESSION_FACTOR : ln - _HALF_LOG_COMPRESSION_FACTOR);\\n        return lnWithError / _LOG_COMPRESSION_FACTOR;\\n    }\\n\\n    /**\\n     * @dev Restores `value` from logarithmic space. `value` is expected to be the result of a call to `toLowResLog`,\\n     * any other function that returns 4 decimals fixed point logarithms, or the sum of such values.\\n     */\\n    function fromLowResLog(int256 value) internal pure returns (uint256) {\\n        return uint256(LogExpMath.exp(value * _LOG_COMPRESSION_FACTOR));\\n    }\\n}\\n\",\"keccak256\":\"0xc9dfba355f4661c3ba5bb7aa7b13850b5a5867bf7c703f1e90cb3ee42ba31881\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca9410190843ca26b36e4ca812c0ed41245da05b0b5d595041b377470d6fb3e3\",\"license\":\"MIT\"},\"contracts/libraries/factories/BasePoolSplitCodeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\nimport \\\"../helpers/BaseSplitCodeFactory.sol\\\";\\nimport \\\"../../interfaces/IVault.sol\\\";\\n\\n/**\\n * @dev Same as `BasePoolFactory`, for Pools whose creation code is so large that the factory cannot hold it.\\n */\\nabstract contract BasePoolSplitCodeFactory is BaseSplitCodeFactory {\\n    IVault private immutable _vault;\\n    mapping(address => bool) private _isPoolFromFactory;\\n\\n    event PoolCreated(address indexed pool);\\n\\n    constructor(IVault vault, bytes memory creationCode) BaseSplitCodeFactory(creationCode) {\\n        _vault = vault;\\n    }\\n\\n    /**\\n     * @dev Returns the Vault's address.\\n     */\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    /**\\n     * @dev Returns true if `pool` was created by this factory.\\n     */\\n    function isPoolFromFactory(address pool) external view returns (bool) {\\n        return _isPoolFromFactory[pool];\\n    }\\n\\n    function _create(bytes memory constructorArgs) internal override returns (address) {\\n        address pool = super._create(constructorArgs);\\n\\n        _isPoolFromFactory[pool] = true;\\n        emit PoolCreated(pool);\\n\\n        return pool;\\n    }\\n}\\n\",\"keccak256\":\"0x23715a12525494d7074f1f84c4f600de79647c45046f433e88b1c45655b0be11\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/factories/FactoryWidePauseWindow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\n/**\\n * @dev Utility to create Pool factories for Pools that use the `TemporarilyPausable` contract.\\n *\\n * By calling `TemporarilyPausable`'s constructor with the result of `getPauseConfiguration`, all Pools created by this\\n * factory will share the same Pause Window end time, after which both old and new Pools will not be pausable.\\n */\\ncontract FactoryWidePauseWindow {\\n    // This contract relies on timestamps in a similar way as `TemporarilyPausable` does - the same caveats apply.\\n    // solhint-disable not-rely-on-time\\n\\n    uint256 private constant _INITIAL_PAUSE_WINDOW_DURATION = 90 days;\\n    uint256 private constant _BUFFER_PERIOD_DURATION = 30 days;\\n\\n    // Time when the pause window for all created Pools expires, and the pause window duration of new Pools becomes\\n    // zero.\\n    uint256 private immutable _poolsPauseWindowEndTime;\\n\\n    constructor() {\\n        _poolsPauseWindowEndTime = block.timestamp + _INITIAL_PAUSE_WINDOW_DURATION;\\n    }\\n\\n    /**\\n     * @dev Returns the current `TemporarilyPausable` configuration that will be applied to Pools created by this\\n     * factory.\\n     *\\n     * `pauseWindowDuration` will decrease over time until it reaches zero, at which point both it and\\n     * `bufferPeriodDuration` will be zero forever, meaning deployed Pools will not be pausable.\\n     */\\n    function getPauseConfiguration() public view returns (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime < _poolsPauseWindowEndTime) {\\n            // The buffer period is always the same since its duration is related to how much time is needed to respond\\n            // to a potential emergency. The Pause Window duration however decreases as the end time approaches.\\n\\n            pauseWindowDuration = _poolsPauseWindowEndTime - currentTime; // No need for checked arithmetic.\\n            bufferPeriodDuration = _BUFFER_PERIOD_DURATION;\\n        } else {\\n            // After the end time, newly created Pools have no Pause Window, nor Buffer Period (since they are not\\n            // pausable in the first place).\\n\\n            pauseWindowDuration = 0;\\n            bufferPeriodDuration = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8948064613df3375f2d82dd81956d372bf7305193f6538ad5087665e9868752f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/helpers/Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./RequiemErrors.sol\\\";\\nimport \\\"./IAuthentication.sol\\\";\\n\\n/**\\n * @dev Building block for performing access control on external functions.\\n *\\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\\n * to external functions to only make them callable by authorized accounts.\\n *\\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\\n */\\nabstract contract Authentication is IAuthentication {\\n    bytes32 private immutable _actionIdDisambiguator;\\n\\n    /**\\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\\n     * multi contract systems.\\n     *\\n     * There are two main uses for it:\\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\\n     *    unique. The contract's own address is a good option.\\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\\n     *    shared by the entire family (and no other contract) should be used instead.\\n     */\\n    constructor(bytes32 actionIdDisambiguator) {\\n        _actionIdDisambiguator = actionIdDisambiguator;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\n     */\\n    modifier authenticate() {\\n        _authenticateCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\n     */\\n    function _authenticateCaller() internal view {\\n        bytes32 actionId = getActionId(msg.sig);\\n        RequiemErrors._require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\\n    }\\n\\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\\n        // multiple contracts.\\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\\n    }\\n\\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x1fca2fb59592b7a1c9813cc290b46ba067911138a90955c776f5acd86cc33ba2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/helpers/BaseSplitCodeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CodeDeployer.sol\\\";\\n\\n/**\\n * @dev Base factory for contracts whose creation code is so large that the factory cannot hold it. This happens when\\n * the contract's creation code grows close to 24kB.\\n *\\n * Note that this factory cannot help with contracts that have a *runtime* (deployed) bytecode larger than 24kB.\\n */\\nabstract contract BaseSplitCodeFactory {\\n    // The contract's creation code is stored as code in two separate addresses, and retrieved via `extcodecopy`. This\\n    // means this factory supports contracts with creation code of up to 48kB.\\n    // We rely on inline-assembly to achieve this, both to make the entire operation highly gas efficient, and because\\n    // `extcodecopy` is not available in Solidity.\\n\\n    // solhint-disable no-inline-assembly\\n\\n    address private immutable _creationCodeContractA;\\n    uint256 private immutable _creationCodeSizeA;\\n\\n    address private immutable _creationCodeContractB;\\n    uint256 private immutable _creationCodeSizeB;\\n\\n    /**\\n     * @dev The creation code of a contract Foo can be obtained inside Solidity with `type(Foo).creationCode`.\\n     */\\n    constructor(bytes memory creationCode) {\\n        uint256 creationCodeSize = creationCode.length;\\n\\n        // We are going to deploy two contracts: one with approximately the first half of `creationCode`'s contents\\n        // (A), and another with the remaining half (B).\\n        // We store the lengths in both immutable and stack variables, since immutable variables cannot be read during\\n        // construction.\\n        uint256 creationCodeSizeA = creationCodeSize / 2;\\n        _creationCodeSizeA = creationCodeSizeA;\\n\\n        uint256 creationCodeSizeB = creationCodeSize - creationCodeSizeA;\\n        _creationCodeSizeB = creationCodeSizeB;\\n\\n        // To deploy the contracts, we're going to use `CodeDeployer.deploy()`, which expects a memory array with\\n        // the code to deploy. Note that we cannot simply create arrays for A and B's code by copying or moving\\n        // `creationCode`'s contents as they are expected to be very large (> 24kB), so we must operate in-place.\\n\\n        // Memory: [ code length ] [ A.data ] [ B.data ]\\n\\n        // Creating A's array is simple: we simply replace `creationCode`'s length with A's length. We'll later restore\\n        // the original length.\\n\\n        bytes memory creationCodeA;\\n        assembly {\\n            creationCodeA := creationCode\\n            mstore(creationCodeA, creationCodeSizeA)\\n        }\\n\\n        // Memory: [ A.length ] [ A.data ] [ B.data ]\\n        //         ^ creationCodeA\\n\\n        _creationCodeContractA = CodeDeployer.deploy(creationCodeA);\\n\\n        // Creating B's array is a bit more involved: since we cannot move B's contents, we are going to create a 'new'\\n        // memory array starting at A's last 32 bytes, which will be replaced with B's length. We'll back-up this last\\n        // byte to later restore it.\\n\\n        bytes memory creationCodeB;\\n        bytes32 lastByteA;\\n\\n        assembly {\\n            // `creationCode` points to the array's length, not data, so by adding A's length to it we arrive at A's\\n            // last 32 bytes.\\n            creationCodeB := add(creationCode, creationCodeSizeA)\\n            lastByteA := mload(creationCodeB)\\n            mstore(creationCodeB, creationCodeSizeB)\\n        }\\n\\n        // Memory: [ A.length ] [ A.data[ : -1] ] [ B.length ][ B.data ]\\n        //         ^ creationCodeA                ^ creationCodeB\\n\\n        _creationCodeContractB = CodeDeployer.deploy(creationCodeB);\\n\\n        // We now restore the original contents of `creationCode` by writing back the original length and A's last byte.\\n        assembly {\\n            mstore(creationCodeA, creationCodeSize)\\n            mstore(creationCodeB, lastByteA)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the two addresses where the creation code of the contract crated by this factory is stored.\\n     */\\n    function getCreationCodeContracts() public view returns (address contractA, address contractB) {\\n        return (_creationCodeContractA, _creationCodeContractB);\\n    }\\n\\n    /**\\n     * @dev Returns the creation code of the contract this factory creates.\\n     */\\n    function getCreationCode() public view returns (bytes memory) {\\n        return _getCreationCodeWithArgs(\\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the creation code that will result in a contract being deployed with `constructorArgs`.\\n     */\\n    function _getCreationCodeWithArgs(bytes memory constructorArgs) private view returns (bytes memory code) {\\n        // This function exists because `abi.encode()` cannot be instructed to place its result at a specific address.\\n        // We need for the ABI-encoded constructor arguments to be located immediately after the creation code, but\\n        // cannot rely on `abi.encodePacked()` to perform concatenation as that would involve copying the creation code,\\n        // which would be prohibitively expensive.\\n        // Instead, we compute the creation code in a pre-allocated array that is large enough to hold *both* the\\n        // creation code and the constructor arguments, and then copy the ABI-encoded arguments (which should not be\\n        // overly long) right after the end of the creation code.\\n\\n        // Immutable variables cannot be used in assembly, so we store them in the stack first.\\n        address creationCodeContractA = _creationCodeContractA;\\n        uint256 creationCodeSizeA = _creationCodeSizeA;\\n        address creationCodeContractB = _creationCodeContractB;\\n        uint256 creationCodeSizeB = _creationCodeSizeB;\\n\\n        uint256 creationCodeSize = creationCodeSizeA + creationCodeSizeB;\\n        uint256 constructorArgsSize = constructorArgs.length;\\n\\n        uint256 codeSize = creationCodeSize + constructorArgsSize;\\n\\n        assembly {\\n            // First, we allocate memory for `code` by retrieving the free memory pointer and then moving it ahead of\\n            // `code` by the size of the creation code plus constructor arguments, and 32 bytes for the array length.\\n            code := mload(0x40)\\n            mstore(0x40, add(code, add(codeSize, 32)))\\n\\n            // We now store the length of the code plus constructor arguments.\\n            mstore(code, codeSize)\\n\\n            // Next, we concatenate the creation code stored in A and B.\\n            let dataStart := add(code, 32)\\n            extcodecopy(creationCodeContractA, dataStart, 0, creationCodeSizeA)\\n            extcodecopy(creationCodeContractB, add(dataStart, creationCodeSizeA), 0, creationCodeSizeB)\\n        }\\n\\n        // Finally, we copy the constructorArgs to the end of the array. Unfortunately there is no way to avoid this\\n        // copy, as it is not possible to tell Solidity where to store the result of `abi.encode()`.\\n        uint256 constructorArgsDataPtr;\\n        uint256 constructorArgsCodeDataPtr;\\n        assembly {\\n            constructorArgsDataPtr := add(constructorArgs, 32)\\n            constructorArgsCodeDataPtr := add(add(code, 32), creationCodeSize)\\n        }\\n\\n        _memcpy(constructorArgsCodeDataPtr, constructorArgsDataPtr, constructorArgsSize);\\n    }\\n\\n    /**\\n     * @dev Deploys a contract with constructor arguments. To create `constructorArgs`, call `abi.encode()` with the\\n     * contract's constructor arguments, in order.\\n     */\\n    function _create(bytes memory constructorArgs) internal virtual returns (address) {\\n        bytes memory creationCode = _getCreationCodeWithArgs(constructorArgs);\\n\\n        address destination;\\n        assembly {\\n            destination := create(0, add(creationCode, 32), mload(creationCode))\\n        }\\n\\n        if (destination == address(0)) {\\n            // Bubble up inner revert reason\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        return destination;\\n    }\\n\\n    // From\\n    // https://github.com/Arachnid/solidity-stringutils/blob/b9a6f6615cf18a87a823cbc461ce9e140a61c305/src/strings.sol\\n    function _memcpy(\\n        uint256 dest,\\n        uint256 src,\\n        uint256 len\\n    ) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask;\\n        // Copy remaining bytes\\n        unchecked {\\n            mask = 256**(32 - len) - 1;\\n        }\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba57fdcaa7a4025f4198be13b10499f34e3ae58d9d2e264c2bca7437742f3fba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/helpers/CodeDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Library used to deploy contracts with specific code. This can be used for long-term storage of immutable data as\\n * contract code, which can be retrieved via the `extcodecopy` opcode.\\n */\\nlibrary CodeDeployer {\\n    // During contract construction, the full code supplied exists as code, and can be accessed via `codesize` and\\n    // `codecopy`. This is not the contract's final code however: whatever the constructor returns is what will be\\n    // stored as its code.\\n    //\\n    // We use this mechanism to have a simple constructor that stores whatever is appended to it. The following opcode\\n    // sequence corresponds to the creation code of the following equivalent Solidity contract, plus padding to make the\\n    // full code 32 bytes long:\\n    //\\n    // contract CodeDeployer {\\n    //     constructor() payable {\\n    //         uint256 size;\\n    //         assembly {\\n    //             size := sub(codesize(), 32) // size of appended data, as constructor is 32 bytes long\\n    //             codecopy(0, 32, size) // copy all appended data to memory at position 0\\n    //             return(0, size) // return appended data for it to be stored as code\\n    //         }\\n    //     }\\n    // }\\n    //\\n    // More specifically, it is composed of the following opcodes (plus padding):\\n    //\\n    // [1] PUSH1 0x20\\n    // [2] CODESIZE\\n    // [3] SUB\\n    // [4] DUP1\\n    // [6] PUSH1 0x20\\n    // [8] PUSH1 0x00\\n    // [9] CODECOPY\\n    // [11] PUSH1 0x00\\n    // [12] RETURN\\n    //\\n    // The padding is just the 0xfe sequence (invalid opcode).\\n    bytes32 private constant _DEPLOYER_CREATION_CODE = 0x602038038060206000396000f3fefefefefefefefefefefefefefefefefefefe;\\n\\n    /**\\n     * @dev Deploys a contract with `code` as its code, returning the destination address.\\n     *\\n     * Reverts if deployment fails.\\n     */\\n    function deploy(bytes memory code) internal returns (address destination) {\\n        bytes32 deployerCreationCode = _DEPLOYER_CREATION_CODE;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let codeLength := mload(code)\\n\\n            // `code` is composed of length and data. We've already stored its length in `codeLength`, so we simply\\n            // replace it with the deployer creation code (which is exactly 32 bytes long).\\n            mstore(code, deployerCreationCode)\\n\\n            // At this point, `code` now points to the deployer creation code immediately followed by `code`'s data\\n            // contents. This is exactly what the deployer expects to receive when created.\\n            destination := create(0, code, add(codeLength, 32))\\n\\n            // Finally, we restore the original length in order to not mutate `code`.\\n            mstore(code, codeLength)\\n        }\\n\\n        // The create opcode returns the zero address when contract creation fails, so we revert if this happens.\\n        require(destination != address(0), \\\"CODE_DEPLOYMENT_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9047bab500aab8bf55975944cb4adec582bbc5214a347a3823b18f22d207f249\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x5eac8aa811050d066d9f64e6b6d13ddcaeb33b7258a38b4ed374c7e752b37486\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/helpers/InputHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../interfaces/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./RequiemErrors.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        RequiemErrors._require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        RequiemErrors._require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            RequiemErrors._require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec45066ec176d339a9c3edc33452b52e3b0a75f43af6e917629a80a9d2c5aa92\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'BAL#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n            // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x26ec56b070a8871f0e043afd9f098b8152206bdfb96c1cde296a80af01582f52\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/helpers/TemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./RequiemErrors.sol\\\";\\nimport \\\"../../interfaces/ITemporarilyPausable.sol\\\";\\n\\n/**\\n * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be\\n * used as an emergency switch in case a security vulnerability or threat is identified.\\n *\\n * The contract can only be paused during the Pause Window, a period that starts at deployment. It can also be\\n * unpaused and repaused any number of times during this period. This is intended to serve as a safety measure: it lets\\n * system managers react quickly to potentially dangerous situations, knowing that this action is reversible if careful\\n * analysis later determines there was a false alarm.\\n *\\n * If the contract is paused when the Pause Window finishes, it will remain in the paused state through an additional\\n * Buffer Period, after which it will be automatically unpaused forever. This is to ensure there is always enough time\\n * to react to an emergency, even if the threat is discovered shortly before the Pause Window expires.\\n *\\n * Note that since the contract can only be paused within the Pause Window, unpausing during the Buffer Period is\\n * irreversible.\\n */\\nabstract contract TemporarilyPausable is ITemporarilyPausable {\\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\\n    // solhint-disable not-rely-on-time\\n\\n    uint256 private constant _MAX_PAUSE_WINDOW_DURATION = 90 days;\\n    uint256 private constant _MAX_BUFFER_PERIOD_DURATION = 30 days;\\n\\n    uint256 private immutable _pauseWindowEndTime;\\n    uint256 private immutable _bufferPeriodEndTime;\\n\\n    bool private _paused;\\n\\n    constructor(uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\\n        RequiemErrors._require(pauseWindowDuration <= _MAX_PAUSE_WINDOW_DURATION, Errors.MAX_PAUSE_WINDOW_DURATION);\\n        RequiemErrors._require(bufferPeriodDuration <= _MAX_BUFFER_PERIOD_DURATION, Errors.MAX_BUFFER_PERIOD_DURATION);\\n\\n        uint256 pauseWindowEndTime = block.timestamp + pauseWindowDuration;\\n\\n        _pauseWindowEndTime = pauseWindowEndTime;\\n        _bufferPeriodEndTime = pauseWindowEndTime + bufferPeriodDuration;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is paused.\\n     */\\n    modifier whenNotPaused() {\\n        _ensureNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\\n     * Period.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        override\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        )\\n    {\\n        paused = !_isNotPaused();\\n        pauseWindowEndTime = _getPauseWindowEndTime();\\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\\n    }\\n\\n    /**\\n     * @dev Sets the pause state to `paused`. The contract can only be paused until the end of the Pause Window, and\\n     * unpaused until the end of the Buffer Period.\\n     *\\n     * Once the Buffer Period expires, this function reverts unconditionally.\\n     */\\n    function _setPaused(bool paused) internal {\\n        if (paused) {\\n            RequiemErrors._require(block.timestamp < _getPauseWindowEndTime(), Errors.PAUSE_WINDOW_EXPIRED);\\n        } else {\\n            RequiemErrors._require(block.timestamp < _getBufferPeriodEndTime(), Errors.BUFFER_PERIOD_EXPIRED);\\n        }\\n\\n        _paused = paused;\\n        emit PausedStateChanged(paused);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is paused.\\n     */\\n    function _ensureNotPaused() internal view {\\n        RequiemErrors._require(_isNotPaused(), Errors.PAUSED);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not paused.\\n     */\\n    function _ensurePaused() internal view {\\n        RequiemErrors._require(!_isNotPaused(), Errors.NOT_PAUSED);\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is unpaused.\\n     *\\n     * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no\\n     * longer accessed.\\n     */\\n    function _isNotPaused() internal view returns (bool) {\\n        // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.\\n        return block.timestamp > _getBufferPeriodEndTime() || !_paused;\\n    }\\n\\n    // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.\\n\\n    function _getPauseWindowEndTime() private view returns (uint256) {\\n        return _pauseWindowEndTime;\\n    }\\n\\n    function _getBufferPeriodEndTime() private view returns (uint256) {\\n        return _bufferPeriodEndTime;\\n    }\\n}\\n\",\"keccak256\":\"0x17062b8a880171246772c5a54da51653ff393ae768faebe5aab7a39735deda72\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/helpers/WordCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\\n * a single storage slot, saving gas by performing less storage accesses.\\n *\\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\\n *\\n * We could use Solidity structs to pack values together in a single storage slot instead of relying on a custom and\\n * error-prone library, but unfortunately Solidity only allows for structs to live in either storage, calldata or\\n * memory. Because a memory struct uses not just memory but also a slot in the stack (to store its memory location),\\n * using memory for word-sized values (i.e. of 256 bits or less) is strictly less gas performant, and doesn't even\\n * prevent stack-too-deep issues. This is compounded by the fact that Balancer contracts typically are memory-intensive,\\n * and the cost of accesing memory increases quadratically with the number of allocated words. Manual packing and\\n * unpacking is therefore the preferred approach.\\n */\\nlibrary WordCodec {\\n    // Masks are values with the least significant N bits set. They can be used to extract an encoded value from a word,\\n    // or to insert a new one replacing the old.\\n    uint256 private constant _MASK_1 = 2**(1) - 1;\\n    uint256 private constant _MASK_5 = 2**(5) - 1;\\n    uint256 private constant _MASK_7 = 2**(7) - 1;\\n    uint256 private constant _MASK_10 = 2**(10) - 1;\\n    uint256 private constant _MASK_16 = 2**(16) - 1;\\n    uint256 private constant _MASK_22 = 2**(22) - 1;\\n    uint256 private constant _MASK_31 = 2**(31) - 1;\\n    uint256 private constant _MASK_32 = 2**(32) - 1;\\n    uint256 private constant _MASK_53 = 2**(53) - 1;\\n    uint256 private constant _MASK_64 = 2**(64) - 1;\\n    uint256 private constant _MASK_128 = 2**(128) - 1;\\n    uint256 private constant _MASK_192 = 2**(192) - 1;\\n\\n    // Largest positive values that can be represented as N bits signed integers.\\n    int256 private constant _MAX_INT_22 = 2**(21) - 1;\\n    int256 private constant _MAX_INT_53 = 2**(52) - 1;\\n\\n    // In-place insertion\\n\\n    /**\\n     * @dev Inserts a boolean value shifted by an offset into a 256 bit word, replacing the old value. Returns the new\\n     * word.\\n     */\\n    function insertBool(\\n        bytes32 word,\\n        bool value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_1 << offset));\\n        return clearedWord | bytes32(uint256(value ? 1 : 0) << offset);\\n    }\\n\\n    // Unsigned\\n\\n    /**\\n     * @dev Inserts a 5 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 5 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint5(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_5 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 7 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 7 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint7(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_7 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 10 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 10 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint10(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_10 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 16 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value.\\n     * Returns the new word.\\n     *\\n     * Assumes `value` only uses its least significant 16 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint16(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_16 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 31 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` can be represented using 31 bits.\\n     */\\n    function insertUint31(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_31 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 32 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 32 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint32(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_32 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 64 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 64 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint64(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_64 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    // Signed\\n\\n    /**\\n     * @dev Inserts a 22 bits signed integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` can be represented using 22 bits.\\n     */\\n    function insertInt22(\\n        bytes32 word,\\n        int256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_22 << offset));\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return clearedWord | bytes32((uint256(value) & _MASK_22) << offset);\\n    }\\n\\n    // Bytes\\n\\n    /**\\n     * @dev Inserts 192 bit shifted by an offset into a 256 bit word, replacing the old value. Returns the new word.\\n     *\\n     * Assumes `value` can be represented using 192 bits.\\n     */\\n    function insertBits192(\\n        bytes32 word,\\n        bytes32 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_192 << offset));\\n        return clearedWord | bytes32((uint256(value) & _MASK_192) << offset);\\n    }\\n\\n    // Encoding\\n\\n    // Unsigned\\n\\n    /**\\n     * @dev Encodes an unsigned integer shifted by an offset. This performs no size checks: it is up to the caller to\\n     * ensure that the values are bounded.\\n     *\\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\\n     */\\n    function encodeUint(uint256 value, uint256 offset) internal pure returns (bytes32) {\\n        return bytes32(value << offset);\\n    }\\n\\n    // Signed\\n\\n    /**\\n     * @dev Encodes a 22 bits signed integer shifted by an offset.\\n     *\\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\\n     */\\n    function encodeInt22(int256 value, uint256 offset) internal pure returns (bytes32) {\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return bytes32((uint256(value) & _MASK_22) << offset);\\n    }\\n\\n    /**\\n     * @dev Encodes a 53 bits signed integer shifted by an offset.\\n     *\\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\\n     */\\n    function encodeInt53(int256 value, uint256 offset) internal pure returns (bytes32) {\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return bytes32((uint256(value) & _MASK_53) << offset);\\n    }\\n\\n    // Decoding\\n\\n    /**\\n     * @dev Decodes and returns a boolean shifted by an offset from a 256 bit word.\\n     */\\n    function decodeBool(bytes32 word, uint256 offset) internal pure returns (bool) {\\n        return (uint256(word >> offset) & _MASK_1) == 1;\\n    }\\n\\n    // Unsigned\\n\\n    /**\\n     * @dev Decodes and returns a 5 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint5(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_5;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 7 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint7(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_7;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 10 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint10(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_10;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 16 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint16(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_16;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 31 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint31(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_31;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 32 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint32(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_32;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 64 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint64(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_64;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 128 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint128(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_128;\\n    }\\n\\n    // Signed\\n\\n    /**\\n     * @dev Decodes and returns a 22 bits signed integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeInt22(bytes32 word, uint256 offset) internal pure returns (int256) {\\n        int256 value = int256(uint256(word >> offset) & _MASK_22);\\n        // In case the decoded value is greater than the max positive integer that can be represented with 22 bits,\\n        // we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n        // representation.\\n        return value > _MAX_INT_22 ? (value | int256(~_MASK_22)) : value;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 53 bits signed integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeInt53(bytes32 word, uint256 offset) internal pure returns (int256) {\\n        int256 value = int256(uint256(word >> offset) & _MASK_53);\\n        // In case the decoded value is greater than the max positive integer that can be represented with 53 bits,\\n        // we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n        // representation.\\n\\n        return value > _MAX_INT_53 ? (value | int256(~_MASK_53)) : value;\\n    }\\n}\\n\",\"keccak256\":\"0xdfa3eb3152864bee82a29a8f5cfb829a6b9de068a56ba32d192c1db2cbdc5396\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./LogExpMath.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        require(b <= a, \\\"SUB_OVERFLOW\\\");\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        require(a == 0 || product / a == b, \\\"MUL_OVERFLOW\\\");\\n\\n        return product / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        require(a == 0 || product / a == b, \\\"MUL_OVERFLOW\\\");\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\\n     * the true value (that is, the error function expected - actual is always positive).\\n     */\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        if (raw < maxError) {\\n            return 0;\\n        } else {\\n            return sub(raw, maxError);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\\n     * the true value (that is, the error function expected - actual is always negative).\\n     */\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        return add(raw, maxError);\\n    }\\n\\n    /**\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\n     *\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\n     * prevents intermediate negative values.\\n     */\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return (x < ONE) ? (ONE - x) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0xe2959bd91a7efbccc2258eb94d48a5fc1602fa52d51dc43799b0c38fccd9f60d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../helpers/RequiemErrors.sol\\\";\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            // We solve the 0^0 indetermination by making it equal one.\\n            return uint256(ONE_18);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n        // x^y = exp(y * ln(x)).\\n\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n        RequiemErrors._require(x < 2**255, Errors.X_OUT_OF_BOUNDS);\\n        int256 x_int256 = int256(x);\\n\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n        RequiemErrors._require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\\n        int256 y_int256 = int256(y);\\n\\n        int256 logx_times_y;\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n            int256 ln_36_x = _ln_36(x_int256);\\n\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n            // (downscaled) last 18 decimals.\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n        } else {\\n            logx_times_y = _ln(x_int256) * y_int256;\\n        }\\n        logx_times_y /= ONE_18;\\n\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n        RequiemErrors._require(\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n            Errors.PRODUCT_OUT_OF_BOUNDS\\n        );\\n\\n        return uint256(exp(logx_times_y));\\n    }\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        RequiemErrors._require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\\n\\n        if (x < 0) {\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n            // Fixed point division requires multiplying by ONE_18.\\n            return ((ONE_18 * ONE_18) / exp(-x));\\n        }\\n\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n        // decomposition.\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest x_n.\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n        // decomposition.\\n\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n        // it and compute the accumulated product.\\n\\n        int256 firstAN;\\n        if (x >= x0) {\\n            x -= x0;\\n            firstAN = a0;\\n        } else if (x >= x1) {\\n            x -= x1;\\n            firstAN = a1;\\n        } else {\\n            firstAN = 1; // One with no decimal places\\n        }\\n\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n        // smaller terms.\\n        x *= 100;\\n\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n        int256 product = ONE_20;\\n\\n        if (x >= x2) {\\n            x -= x2;\\n            product = (product * a2) / ONE_20;\\n        }\\n        if (x >= x3) {\\n            x -= x3;\\n            product = (product * a3) / ONE_20;\\n        }\\n        if (x >= x4) {\\n            x -= x4;\\n            product = (product * a4) / ONE_20;\\n        }\\n        if (x >= x5) {\\n            x -= x5;\\n            product = (product * a5) / ONE_20;\\n        }\\n        if (x >= x6) {\\n            x -= x6;\\n            product = (product * a6) / ONE_20;\\n        }\\n        if (x >= x7) {\\n            x -= x7;\\n            product = (product * a7) / ONE_20;\\n        }\\n        if (x >= x8) {\\n            x -= x8;\\n            product = (product * a8) / ONE_20;\\n        }\\n        if (x >= x9) {\\n            x -= x9;\\n            product = (product * a9) / ONE_20;\\n        }\\n\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n        // The first term is simply x.\\n        term = x;\\n        seriesSum += term;\\n\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n        term = ((term * x) / ONE_20) / 2;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 3;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 4;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 5;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 6;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 7;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 8;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 9;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 10;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 11;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 12;\\n        seriesSum += term;\\n\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n        // and then drop two digits to return an 18 decimal value.\\n\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n    }\\n\\n    /**\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\n\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\n        // upscaling.\\n\\n        int256 logBase;\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\n            logBase = _ln_36(base);\\n        } else {\\n            logBase = _ln(base) * ONE_18;\\n        }\\n\\n        int256 logArg;\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\n            logArg = _ln_36(arg);\\n        } else {\\n            logArg = _ln(arg) * ONE_18;\\n        }\\n\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\n        return (logArg * ONE_18) / logBase;\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        // The real natural logarithm is not defined for negative numbers or zero.\\n        RequiemErrors._require(a > 0, Errors.OUT_OF_BOUNDS);\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n            return _ln_36(a) / ONE_18;\\n        } else {\\n            return _ln(a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        if (a < ONE_18) {\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n            // Fixed point division requires multiplying by ONE_18.\\n            return (-_ln((ONE_18 * ONE_18) / a));\\n        }\\n\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest a_n.\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n        // ONE_18 to convert them to fixed point.\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n        // by it and compute the accumulated sum.\\n\\n        int256 sum = 0;\\n        if (a >= a0 * ONE_18) {\\n            a /= a0; // Integer, not fixed point division\\n            sum += x0;\\n        }\\n\\n        if (a >= a1 * ONE_18) {\\n            a /= a1; // Integer, not fixed point division\\n            sum += x1;\\n        }\\n\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n        sum *= 100;\\n        a *= 100;\\n\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n        if (a >= a2) {\\n            a = (a * ONE_20) / a2;\\n            sum += x2;\\n        }\\n\\n        if (a >= a3) {\\n            a = (a * ONE_20) / a3;\\n            sum += x3;\\n        }\\n\\n        if (a >= a4) {\\n            a = (a * ONE_20) / a4;\\n            sum += x4;\\n        }\\n\\n        if (a >= a5) {\\n            a = (a * ONE_20) / a5;\\n            sum += x5;\\n        }\\n\\n        if (a >= a6) {\\n            a = (a * ONE_20) / a6;\\n            sum += x6;\\n        }\\n\\n        if (a >= a7) {\\n            a = (a * ONE_20) / a7;\\n            sum += x7;\\n        }\\n\\n        if (a >= a8) {\\n            a = (a * ONE_20) / a8;\\n            sum += x8;\\n        }\\n\\n        if (a >= a9) {\\n            a = (a * ONE_20) / a9;\\n            sum += x9;\\n        }\\n\\n        if (a >= a10) {\\n            a = (a * ONE_20) / a10;\\n            sum += x10;\\n        }\\n\\n        if (a >= a11) {\\n            a = (a * ONE_20) / a11;\\n            sum += x11;\\n        }\\n\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n        // Let z = (a - 1) / (a + 1).\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n        // division by ONE_20.\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n        int256 z_squared = (z * z) / ONE_20;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 11;\\n\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n        seriesSum *= 2;\\n\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n        // value.\\n\\n        return (sum + seriesSum) / 100;\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n        // worthwhile.\\n\\n        // First, we transform x to a 36 digit fixed point value.\\n        x *= ONE_18;\\n\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n        // division by ONE_36.\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n        int256 z_squared = (z * z) / ONE_36;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 11;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 13;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 15;\\n\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // All that remains is multiplying by 2 (non fixed point).\\n        return seriesSum * 2;\\n    }\\n}\\n\",\"keccak256\":\"0x7625ecc2db94810b99e4e74f03ccb8f2cd29e4f3ee2bb02baac696532472d537\",\"license\":\"MIT\"},\"contracts/libraries/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library\\n */\\nlibrary Math {\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        RequiemErrors._require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        RequiemErrors._require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x08d70e0ac9ebce46772c157f02d18d9da78b4c1424a02bc7e4247028f02d925b\",\"license\":\"MIT\"},\"contracts/libraries/oracle/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nlibrary Buffer {\\n    // The buffer is a circular storage structure with 1024 slots.\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    uint256 internal constant SIZE = 1024;\\n\\n    /**\\n     * @dev Returns the index of the element before the one pointed by `index`.\\n     */\\n    function prev(uint256 index) internal pure returns (uint256) {\\n        return sub(index, 1);\\n    }\\n\\n    /**\\n     * @dev Returns the index of the element after the one pointed by `index`.\\n     */\\n    function next(uint256 index) internal pure returns (uint256) {\\n        return add(index, 1);\\n    }\\n\\n    /**\\n     * @dev Returns the index of an element `offset` slots after the one pointed by `index`.\\n     */\\n    function add(uint256 index, uint256 offset) internal pure returns (uint256) {\\n        return (index + offset) % SIZE;\\n    }\\n\\n    /**\\n     * @dev Returns the index of an element `offset` slots before the one pointed by `index`.\\n     */\\n    function sub(uint256 index, uint256 offset) internal pure returns (uint256) {\\n        return (index + SIZE - offset) % SIZE;\\n    }\\n}\\n\",\"keccak256\":\"0x499afbba585e3597fc5cabdcf5fa5f247a3d0a12e78911124ec4879ec0685807\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/oracle/PoolPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\n\\nimport \\\"../../interfaces/oracle/IPriceOracle.sol\\\";\\nimport \\\"../../interfaces/oracle/IPoolPriceOracle.sol\\\";\\n\\nimport \\\"./Buffer.sol\\\";\\nimport \\\"./Samples.sol\\\";\\nimport \\\"./QueryProcessor.sol\\\";\\n\\n/**\\n * @dev This module allows Pools to access historical pricing information.\\n *\\n * It uses a 1024 long circular buffer to store past data, where the data within each sample is the result of\\n * accumulating live data for no more than two minutes. Therefore, assuming the worst case scenario where new data is\\n * updated in every single block, the oldest samples in the buffer (and therefore largest queryable period) will\\n * be slightly over 34 hours old.\\n *\\n * Usage of this module requires the caller to keep track of two variables: the latest circular buffer index, and the\\n * timestamp when the index last changed. Aditionally, access to the latest circular buffer index must be exposed by\\n * implementing `_getOracleIndex`.\\n *\\n * This contract relies on the `QueryProcessor` linked library to reduce bytecode size.\\n */\\nabstract contract PoolPriceOracle is IPoolPriceOracle, IPriceOracle {\\n    using Buffer for uint256;\\n    using Samples for bytes32;\\n\\n    // Each sample in the buffer accumulates information for up to 2 minutes. This is simply to reduce the size of the\\n    // buffer: small time deviations will not have any significant effect.\\n    // solhint-disable not-rely-on-time\\n    uint256 private constant _MAX_SAMPLE_DURATION = 2 minutes;\\n\\n    // We use a mapping to simulate an array: the buffer won't grow or shrink, and since we will always use valid\\n    // indexes using a mapping saves gas by skipping the bounds checks.\\n    mapping(uint256 => bytes32) internal _samples;\\n\\n    // IPoolPriceOracle\\n\\n    function getSample(uint256 index)\\n        external\\n        view\\n        override\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 timestamp\\n        )\\n    {\\n        require(index < Buffer.SIZE, \\\"ORACLE_INVALID_INDEX\\\");\\n\\n        bytes32 sample = _getSample(index);\\n        return sample.unpack();\\n    }\\n\\n    function getTotalSamples() external pure override returns (uint256) {\\n        return Buffer.SIZE;\\n    }\\n\\n    /**\\n     * @dev Manually dirty oracle sample storage slots with dummy data, to reduce the gas cost of the future swaps\\n     * that will initialize them. This function is only useful before the oracle has been fully initialized.\\n     *\\n     * `endIndex` is non-inclusive.\\n     */\\n    function dirtyUninitializedOracleSamples(uint256 startIndex, uint256 endIndex) external {\\n        require(startIndex < endIndex && endIndex <= Buffer.SIZE, \\\"OUT_OF_BOUNDS\\\");\\n\\n        // Uninitialized samples are identified by a zero timestamp -- all other fields are ignored,\\n        // so any non-zero value with a zero timestamp suffices.\\n        bytes32 initSample = Samples.pack(1, 0, 0, 0, 0, 0, 0);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            if (_samples[i].timestamp() == 0) {\\n                _samples[i] = initSample;\\n            }\\n        }\\n    }\\n\\n    // IPriceOracle\\n\\n    function getLargestSafeQueryWindow() external pure override returns (uint256) {\\n        return 34 hours;\\n    }\\n\\n    function getLatest(Variable variable) external view override returns (uint256) {\\n        return QueryProcessor.getInstantValue(_samples, variable, _getOracleIndex());\\n    }\\n\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory results)\\n    {\\n        results = new uint256[](queries.length);\\n        uint256 latestIndex = _getOracleIndex();\\n\\n        for (uint256 i = 0; i < queries.length; ++i) {\\n            results[i] = QueryProcessor.getTimeWeightedAverage(_samples, queries[i], latestIndex);\\n        }\\n    }\\n\\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries)\\n        external\\n        view\\n        override\\n        returns (int256[] memory results)\\n    {\\n        results = new int256[](queries.length);\\n        uint256 latestIndex = _getOracleIndex();\\n\\n        OracleAccumulatorQuery memory query;\\n        for (uint256 i = 0; i < queries.length; ++i) {\\n            query = queries[i];\\n            results[i] = _getPastAccumulator(query.variable, latestIndex, query.ago);\\n        }\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev Processes new price and invariant data, updating the latest sample or creating a new one.\\n     *\\n     * Receives the new logarithms of values to store: `logPairPrice`, `logBptPrice` and `logInvariant`, as well the\\n     * index of the latest sample and the timestamp of its creation.\\n     *\\n     * Returns the index of the latest sample. If different from `latestIndex`, the caller should also store the\\n     * timestamp, and pass it on future calls to this function.\\n     */\\n    function _processPriceData(\\n        uint256 latestSampleCreationTimestamp,\\n        uint256 latestIndex,\\n        int256 logPairPrice,\\n        int256 logBptPrice,\\n        int256 logInvariant\\n    ) internal returns (uint256) {\\n        // Read latest sample, and compute the next one by updating it with the newly received data.\\n        bytes32 sample = _getSample(latestIndex).update(logPairPrice, logBptPrice, logInvariant, block.timestamp);\\n\\n        // We create a new sample if more than _MAX_SAMPLE_DURATION seconds have elapsed since the creation of the\\n        // latest one. In other words, no sample accumulates data over a period larger than _MAX_SAMPLE_DURATION.\\n        bool newSample = block.timestamp - latestSampleCreationTimestamp >= _MAX_SAMPLE_DURATION;\\n        latestIndex = newSample ? latestIndex.next() : latestIndex;\\n\\n        // Store the updated or new sample.\\n        _samples[latestIndex] = sample;\\n\\n        return latestIndex;\\n    }\\n\\n    function _getPastAccumulator(\\n        IPriceOracle.Variable variable,\\n        uint256 latestIndex,\\n        uint256 ago\\n    ) internal view returns (int256) {\\n        return QueryProcessor.getPastAccumulator(_samples, variable, latestIndex, ago);\\n    }\\n\\n    function _findNearestSample(\\n        uint256 lookUpDate,\\n        uint256 offset,\\n        uint256 length\\n    ) internal view returns (bytes32 prev, bytes32 next) {\\n        return QueryProcessor.findNearestSample(_samples, lookUpDate, offset, length);\\n    }\\n\\n    /**\\n     * @dev Returns the sample that corresponds to a given `index`.\\n     *\\n     * Using this function instead of accessing storage directly results in denser bytecode (since the storage slot is\\n     * only computed here).\\n     */\\n    function _getSample(uint256 index) internal view returns (bytes32) {\\n        return _samples[index];\\n    }\\n\\n    /**\\n     * @dev Virtual function to be implemented by derived contracts. Must return the current index of the oracle\\n     * circular buffer.\\n     */\\n    function _getOracleIndex() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d764f43d5517eef5867debfb50bcebc6b22ee56adaffd4bfd16332f101a34af\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/oracle/QueryProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n\\nimport \\\"../LogCompression.sol\\\";\\n\\nimport \\\"../../interfaces/oracle/IPriceOracle.sol\\\";\\n\\nimport \\\"./Buffer.sol\\\";\\nimport \\\"./Samples.sol\\\";\\n\\n/**\\n * @dev Auxiliary library for PoolPriceOracle, offloading most of the query code to reduce bytecode size by using this\\n * as a linked library. The downside is an extra DELEGATECALL is added (2600 gas as of the Berlin hardfork), but the\\n * bytecode size gains are so big (specially of the oracle contract does not use `LogCompression.fromLowResLog`) that\\n * it is worth it.\\n */\\nlibrary QueryProcessor {\\n    using Buffer for uint256;\\n    using Samples for bytes32;\\n    using LogCompression for int256;\\n\\n    /**\\n     * @dev Returns the value for `variable` at the indexed sample.\\n     */\\n    function getInstantValue(\\n        mapping(uint256 => bytes32) storage samples,\\n        IPriceOracle.Variable variable,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        bytes32 sample = samples[index];\\n        require(sample.timestamp() > 0, \\\"ORACLE_NOT_INITIALIZED\\\");\\n\\n        int256 rawInstantValue = sample.instant(variable);\\n        return LogCompression.fromLowResLog(rawInstantValue);\\n    }\\n\\n    /**\\n     * @dev Returns the time average weighted price corresponding to `query`.\\n     */\\n    function getTimeWeightedAverage(\\n        mapping(uint256 => bytes32) storage samples,\\n        IPriceOracle.OracleAverageQuery memory query,\\n        uint256 latestIndex\\n    ) internal view returns (uint256) {\\n        require(query.secs != 0, \\\"ORACLE_BAD_SECS\\\");\\n\\n        int256 beginAccumulator = getPastAccumulator(samples, query.variable, latestIndex, query.ago + query.secs);\\n        int256 endAccumulator = getPastAccumulator(samples, query.variable, latestIndex, query.ago);\\n        return LogCompression.fromLowResLog((endAccumulator - beginAccumulator) / int256(query.secs));\\n    }\\n\\n    /**\\n     * @dev Returns the value of the accumulator for `variable` `ago` seconds ago. `latestIndex` must be the index of\\n     * the latest sample in the buffer.\\n     *\\n     * Reverts under the following conditions:\\n     *  - if the buffer is empty.\\n     *  - if querying past information and the buffer has not been fully initialized.\\n     *  - if querying older information than available in the buffer. Note that a full buffer guarantees queries for the\\n     *    past 34 hours will not revert.\\n     *\\n     * If requesting information for a timestamp later than the latest one, it is extrapolated using the latest\\n     * available data.\\n     *\\n     * When no exact information is available for the requested past timestamp (as usually happens, since at most one\\n     * timestamp is stored every two minutes), it is estimated by performing linear interpolation using the closest\\n     * values. This process is guaranteed to complete performing at most 10 storage reads.\\n     */\\n    function getPastAccumulator(\\n        mapping(uint256 => bytes32) storage samples,\\n        IPriceOracle.Variable variable,\\n        uint256 latestIndex,\\n        uint256 ago\\n    ) internal view returns (int256) {\\n        // solhint-disable not-rely-on-time\\n        // `ago` must not be before the epoch.\\n        require(block.timestamp >= ago, \\\"ORACLE_INVALID_SECONDS_QUERY\\\");\\n        uint256 lookUpTime = block.timestamp - ago;\\n\\n        bytes32 latestSample = samples[latestIndex];\\n        uint256 latestTimestamp = latestSample.timestamp();\\n\\n        // The latest sample only has a non-zero timestamp if no data was ever processed and stored in the buffer.\\n        require(latestTimestamp > 0, \\\"ORACLE_NOT_INITIALIZED\\\");\\n\\n        if (latestTimestamp <= lookUpTime) {\\n            // The accumulator at times ahead of the latest one are computed by extrapolating the latest data. This is\\n            // equivalent to the instant value not changing between the last timestamp and the look up time.\\n\\n            // We can use unchecked arithmetic since the accumulator can be represented in 53 bits, timestamps in 31\\n            // bits, and the instant value in 22 bits.\\n            uint256 elapsed = lookUpTime - latestTimestamp;\\n            return latestSample.accumulator(variable) + (latestSample.instant(variable) * int256(elapsed));\\n        } else {\\n            // The look up time is before the latest sample, but we need to make sure that it is not before the oldest\\n            // sample as well.\\n\\n            // Since we use a circular buffer, the oldest sample is simply the next one.\\n            uint256 bufferLength;\\n            uint256 oldestIndex = latestIndex.next();\\n            {\\n                // Local scope used to prevent stack-too-deep \\\"\\n                bytes32 oldestSample = samples[oldestIndex];\\n                uint256 oldestTimestamp = oldestSample.timestamp();\\n\\n                if (oldestTimestamp > 0) {\\n                    // If the oldest timestamp is not zero, it means the buffer was fully initialized.\\n                    bufferLength = Buffer.SIZE;\\n                } else {\\n                    // If the buffer was not fully initialized, we haven't wrapped around it yet,\\n                    // and can treat it as a regular array where the oldest index is the first one,\\n                    // and the length the number of samples.\\n                    bufferLength = oldestIndex; // Equal to latestIndex.next()\\n                    oldestIndex = 0;\\n                    oldestTimestamp = samples[0].timestamp();\\n                }\\n\\n                // Finally check that the look up time is not previous to the oldest timestamp.\\n                require(oldestTimestamp <= lookUpTime, \\\"ORACLE_QUERY_TOO_OLD\\\");\\n            }\\n\\n            // Perform binary search to find nearest samples to the desired timestamp.\\n            (bytes32 prev, bytes32 next) = findNearestSample(samples, lookUpTime, oldestIndex, bufferLength);\\n\\n            // `next`'s timestamp is guaranteed to be larger than `prev`'s, so we can skip checked arithmetic.\\n            uint256 samplesTimeDiff = next.timestamp() - prev.timestamp();\\n\\n            if (samplesTimeDiff > 0) {\\n                // We estimate the accumulator at the requested look up time by interpolating linearly between the\\n                // previous and next accumulators.\\n\\n                // We can use unchecked arithmetic since the accumulators can be represented in 53 bits, and timestamps\\n                // in 31 bits.\\n                int256 samplesAccDiff = next.accumulator(variable) - prev.accumulator(variable);\\n                uint256 elapsed = lookUpTime - prev.timestamp();\\n                return prev.accumulator(variable) + ((samplesAccDiff * int256(elapsed)) / int256(samplesTimeDiff));\\n            } else {\\n                // Rarely, one of the samples will have the exact requested look up time, which is indicated by `prev`\\n                // and `next` being the same. In this case, we simply return the accumulator at that point in time.\\n                return prev.accumulator(variable);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Finds the two samples with timestamps before and after `lookUpDate`. If one of the samples matches exactly,\\n     * both `prev` and `next` will be it. `offset` is the index of the oldest sample in the buffer. `length` is the size\\n     * of the samples list.\\n     *\\n     * Assumes `lookUpDate` is greater or equal than the timestamp of the oldest sample, and less or equal than the\\n     * timestamp of the latest sample.\\n     */\\n    function findNearestSample(\\n        mapping(uint256 => bytes32) storage samples,\\n        uint256 lookUpDate,\\n        uint256 offset,\\n        uint256 length\\n    ) internal view returns (bytes32 prev, bytes32 next) {\\n        // We're going to perform a binary search in the circular buffer, which requires it to be sorted. To achieve\\n        // this, we offset all buffer accesses by `offset`, making the first element the oldest one.\\n\\n        // Auxiliary variables in a typical binary search: we will look at some value `mid` between `low` and `high`,\\n        // periodically increasing `low` or decreasing `high` until we either find a match or determine the element is\\n        // not in the array.\\n        uint256 low = 0;\\n        uint256 high = length - 1;\\n        uint256 mid;\\n\\n        // If the search fails and no sample has a timestamp of `lookUpDate` (as is the most common scenario), `sample`\\n        // will be either the sample with the largest timestamp smaller than `lookUpDate`, or the one with the smallest\\n        // timestamp larger than `lookUpDate`.\\n        bytes32 sample;\\n        uint256 sampleTimestamp;\\n\\n        while (low <= high) {\\n            // Mid is the floor of the average.\\n            uint256 midWithoutOffset = (high + low) / 2;\\n\\n            // Recall that the buffer is not actually sorted: we need to apply the offset to access it in a sorted way.\\n            mid = midWithoutOffset.add(offset);\\n            sample = samples[mid];\\n            sampleTimestamp = sample.timestamp();\\n\\n            if (sampleTimestamp < lookUpDate) {\\n                // If the mid sample is bellow the look up date, then increase the low index to start from there.\\n                low = midWithoutOffset + 1;\\n            } else if (sampleTimestamp > lookUpDate) {\\n                // If the mid sample is above the look up date, then decrease the high index to start from there.\\n\\n                // We can skip checked arithmetic: it is impossible for `high` to ever be 0, as a scenario where `low`\\n                // equals 0 and `high` equals 1 would result in `low` increasing to 1 in the previous `if` clause.\\n                high = midWithoutOffset - 1;\\n            } else {\\n                // sampleTimestamp == lookUpDate\\n                // If we have an exact match, return the sample as both `prev` and `next`.\\n                return (sample, sample);\\n            }\\n        }\\n\\n        // In case we reach here, it means we didn't find exactly the sample we where looking for.\\n        return sampleTimestamp < lookUpDate ? (sample, samples[mid.next()]) : (samples[mid.prev()], sample);\\n    }\\n}\\n\",\"keccak256\":\"0x9940711fe39cc11347bc5ba929095ad0bdc7f9d6777948f2d54baedaf56436c1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/oracle/Samples.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../helpers/WordCodec.sol\\\";\\n\\nimport \\\"../../interfaces/oracle/IPriceOracle.sol\\\";\\n\\n/**\\n * @dev This library provides functions to help manipulating samples for Pool Price Oracles. It handles updates,\\n * encoding, and decoding of samples.\\n *\\n * Each sample holds the timestamp of its last update, plus information about three pieces of data: the price pair, the\\n * price of BPT (the associated Pool token), and the invariant.\\n *\\n * Prices and invariant are not stored directly: instead, we store their logarithm. These are known as the 'instant'\\n * values: the exact value at that timestamp.\\n *\\n * Additionally, for each value we keep an accumulator with the sum of all past values, each weighted by the time\\n * elapsed since the previous update. This lets us later subtract accumulators at different points in time and divide by\\n * the time elapsed between them, arriving at the geometric mean of the values (also known as log-average).\\n *\\n * All samples are stored in a single 256 bit word with the following structure:\\n *\\n * [    log pair price     |        bpt price      |       invariant       |  timestamp ]\\n * [ instant | accumulator | instant | accumulator | instant | accumulator |            ]\\n * [  int22  |    int53    |  int22  |    int53    |  int22  |    int53    |    uint31  ]\\n * MSB                                                                                LSB\\n *\\n * Assuming the timestamp doesn't overflow (which holds until the year 2038), the largest elapsed time is 2^31, which\\n * means the largest possible accumulator value is 2^21 * 2^31, which can be represented using a signed 53 bit integer.\\n */\\nlibrary Samples {\\n    using WordCodec for int256;\\n    using WordCodec for uint256;\\n    using WordCodec for bytes32;\\n\\n    uint256 internal constant _TIMESTAMP_OFFSET = 0;\\n    uint256 internal constant _ACC_LOG_INVARIANT_OFFSET = 31;\\n    uint256 internal constant _INST_LOG_INVARIANT_OFFSET = 84;\\n    uint256 internal constant _ACC_LOG_BPT_PRICE_OFFSET = 106;\\n    uint256 internal constant _INST_LOG_BPT_PRICE_OFFSET = 159;\\n    uint256 internal constant _ACC_LOG_PAIR_PRICE_OFFSET = 181;\\n    uint256 internal constant _INST_LOG_PAIR_PRICE_OFFSET = 234;\\n\\n    /**\\n     * @dev Updates a sample, accumulating the new data based on the elapsed time since the previous update. Returns the\\n     * updated sample.\\n     *\\n     * IMPORTANT: This function does not perform any arithmetic checks. In particular, it assumes the caller will never\\n     * pass values that cannot be represented as 22 bit signed integers. Additionally, it also assumes\\n     * `currentTimestamp` is greater than `sample`'s timestamp.\\n     */\\n    function update(\\n        bytes32 sample,\\n        int256 instLogPairPrice,\\n        int256 instLogBptPrice,\\n        int256 instLogInvariant,\\n        uint256 currentTimestamp\\n    ) internal pure returns (bytes32) {\\n        // Because elapsed can be represented as a 31 bit unsigned integer, and the received values can be represented\\n        // as 22 bit signed integers, we don't need to perform checked arithmetic.\\n\\n        int256 elapsed = int256(currentTimestamp - timestamp(sample));\\n        int256 accLogPairPrice = _accLogPairPrice(sample) + instLogPairPrice * elapsed;\\n        int256 accLogBptPrice = _accLogBptPrice(sample) + instLogBptPrice * elapsed;\\n        int256 accLogInvariant = _accLogInvariant(sample) + instLogInvariant * elapsed;\\n\\n        return\\n            pack(\\n                instLogPairPrice,\\n                accLogPairPrice,\\n                instLogBptPrice,\\n                accLogBptPrice,\\n                instLogInvariant,\\n                accLogInvariant,\\n                currentTimestamp\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the instant value stored in `sample` for `variable`.\\n     */\\n    function instant(bytes32 sample, IPriceOracle.Variable variable) internal pure returns (int256) {\\n        if (variable == IPriceOracle.Variable.PAIR_PRICE) {\\n            return _instLogPairPrice(sample);\\n        } else if (variable == IPriceOracle.Variable.BPT_PRICE) {\\n            return _instLogBptPrice(sample);\\n        } else {\\n            // variable == IPriceOracle.Variable.INVARIANT\\n            return _instLogInvariant(sample);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the accumulator value stored in `sample` for `variable`.\\n     */\\n    function accumulator(bytes32 sample, IPriceOracle.Variable variable) internal pure returns (int256) {\\n        if (variable == IPriceOracle.Variable.PAIR_PRICE) {\\n            return _accLogPairPrice(sample);\\n        } else if (variable == IPriceOracle.Variable.BPT_PRICE) {\\n            return _accLogBptPrice(sample);\\n        } else {\\n            // variable == IPriceOracle.Variable.INVARIANT\\n            return _accLogInvariant(sample);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s timestamp.\\n     */\\n    function timestamp(bytes32 sample) internal pure returns (uint256) {\\n        return sample.decodeUint31(_TIMESTAMP_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s instant value for the logarithm of the pair price.\\n     */\\n    function _instLogPairPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt22(_INST_LOG_PAIR_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s accumulator of the logarithm of the pair price.\\n     */\\n    function _accLogPairPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt53(_ACC_LOG_PAIR_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s instant value for the logarithm of the BPT price.\\n     */\\n    function _instLogBptPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt22(_INST_LOG_BPT_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s accumulator of the logarithm of the BPT price.\\n     */\\n    function _accLogBptPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt53(_ACC_LOG_BPT_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s instant value for the logarithm of the invariant.\\n     */\\n    function _instLogInvariant(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt22(_INST_LOG_INVARIANT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s accumulator of the logarithm of the invariant.\\n     */\\n    function _accLogInvariant(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt53(_ACC_LOG_INVARIANT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns a sample created by packing together its components.\\n     */\\n    function pack(\\n        int256 instLogPairPrice,\\n        int256 accLogPairPrice,\\n        int256 instLogBptPrice,\\n        int256 accLogBptPrice,\\n        int256 instLogInvariant,\\n        int256 accLogInvariant,\\n        uint256 _timestamp\\n    ) internal pure returns (bytes32) {\\n        return\\n            instLogPairPrice.encodeInt22(_INST_LOG_PAIR_PRICE_OFFSET) |\\n            accLogPairPrice.encodeInt53(_ACC_LOG_PAIR_PRICE_OFFSET) |\\n            instLogBptPrice.encodeInt22(_INST_LOG_BPT_PRICE_OFFSET) |\\n            accLogBptPrice.encodeInt53(_ACC_LOG_BPT_PRICE_OFFSET) |\\n            instLogInvariant.encodeInt22(_INST_LOG_INVARIANT_OFFSET) |\\n            accLogInvariant.encodeInt53(_ACC_LOG_INVARIANT_OFFSET) |\\n            _timestamp.encodeUint(_TIMESTAMP_OFFSET); // Using 31 bits\\n    }\\n\\n    /**\\n     * @dev Unpacks a sample into its components.\\n     */\\n    function unpack(bytes32 sample)\\n        internal\\n        pure\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 _timestamp\\n        )\\n    {\\n        logPairPrice = _instLogPairPrice(sample);\\n        accLogPairPrice = _accLogPairPrice(sample);\\n        logBptPrice = _instLogBptPrice(sample);\\n        accLogBptPrice = _accLogBptPrice(sample);\\n        logInvariant = _instLogInvariant(sample);\\n        accLogInvariant = _accLogInvariant(sample);\\n        _timestamp = timestamp(sample);\\n    }\\n}\\n\",\"keccak256\":\"0xa50d592f3c131f2d4d03648393b9cde52df26423d4f5901bacece45812c17ab9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/weighted/WeightedMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./../math/FixedPoint.sol\\\";\\nimport \\\"./../math/Math.sol\\\";\\nimport \\\"../helpers/InputHelpers.sol\\\";\\n\\n// These functions start with an underscore, as if they were part of a contract and not a library. At some point this\\n// should be fixed.\\n// solhint-disable private-vars-leading-underscore\\n\\nlibrary WeightedMath {\\n    using FixedPoint for uint256;\\n    // A minimum normalized weight imposes a maximum weight ratio. We need this due to limitations in the\\n    // implementation of the power function, as these ratios are often exponents.\\n    uint256 internal constant _MIN_WEIGHT = 0.01e18;\\n    // Having a minimum normalized weight imposes a limit on the maximum number of tokens;\\n    // i.e., the largest possible pool is one where all tokens have exactly the minimum weight.\\n    uint256 internal constant _MAX_WEIGHTED_TOKENS = 100;\\n\\n    // Pool limits that arise from limitations in the fixed point power function (and the imposed 1:100 maximum weight\\n    // ratio).\\n\\n    // Swap limits: amounts swapped may not be larger than this percentage of total balance.\\n    uint256 internal constant _MAX_IN_RATIO = 0.3e18;\\n    uint256 internal constant _MAX_OUT_RATIO = 0.3e18;\\n\\n    // Invariant growth limit: non-proportional joins cannot cause the invariant to increase by more than this ratio.\\n    uint256 internal constant _MAX_INVARIANT_RATIO = 3e18;\\n    // Invariant shrink limit: non-proportional exits cannot cause the invariant to decrease by less than this ratio.\\n    uint256 internal constant _MIN_INVARIANT_RATIO = 0.7e18;\\n\\n    // About swap fees on joins and exits:\\n    // Any join or exit that is not perfectly balanced (e.g. all single token joins or exits) is mathematically\\n    // equivalent to a perfectly balanced join or  exit followed by a series of swaps. Since these swaps would charge\\n    // swap fees, it follows that (some) joins and exits should as well.\\n    // On these operations, we split the token amounts in 'taxable' and 'non-taxable' portions, where the 'taxable' part\\n    // is the one to which swap fees are applied.\\n\\n    // Invariant is used to collect protocol swap fees by comparing its value between two times.\\n    // So we can round always to the same direction. It is also used to initiate the BPT amount\\n    // and, because there is a minimum BPT, we round down the invariant.\\n    function _calculateInvariant(uint256[] memory normalizedWeights, uint256[] memory balances)\\n        internal\\n        pure\\n        returns (uint256 invariant)\\n    {\\n        /**********************************************************************************************\\n        // invariant               _____                                                             //\\n        // wi = weight index i      | |      wi                                                      //\\n        // bi = balance index i     | |  bi ^   = i                                                  //\\n        // i = invariant                                                                             //\\n        **********************************************************************************************/\\n\\n        invariant = FixedPoint.ONE;\\n        for (uint256 i = 0; i < normalizedWeights.length; i++) {\\n            invariant = invariant.mulDown(balances[i].powDown(normalizedWeights[i]));\\n        }\\n\\n        require(invariant > 0, \\\"ZERO_INVARIANT\\\");\\n    }\\n\\n    // Computes how many tokens can be taken out of a pool if `amountIn` are sent, given the\\n    // current balances and weights.\\n    function _calcOutGivenIn(\\n        uint256 balanceIn,\\n        uint256 weightIn,\\n        uint256 balanceOut,\\n        uint256 weightOut,\\n        uint256 amountIn\\n    ) internal pure returns (uint256) {\\n        /**********************************************************************************************\\n        // outGivenIn                                                                                //\\n        // aO = amountOut                                                                            //\\n        // bO = balanceOut                                                                           //\\n        // bI = balanceIn              /      /            bI             \\\\    (wI / wO) \\\\           //\\n        // aI = amountIn    aO = bO * |  1 - | --------------------------  | ^            |          //\\n        // wI = weightIn               \\\\      \\\\       ( bI + aI )         /              /           //\\n        // wO = weightOut                                                                            //\\n        **********************************************************************************************/\\n\\n        // Amount out, so we round down overall.\\n\\n        // The multiplication rounds down, and the subtrahend (power) rounds up (so the base rounds up too).\\n        // Because bI / (bI + aI) <= 1, the exponent rounds down.\\n\\n        // Cannot exceed maximum in ratio\\n        require(amountIn <= balanceIn.mulDown(_MAX_IN_RATIO), \\\"MAX_IN_RATIO\\\");\\n\\n        uint256 denominator = balanceIn + amountIn;\\n        uint256 base = balanceIn.divUp(denominator);\\n        uint256 exponent = weightIn.divDown(weightOut);\\n        uint256 power = base.powUp(exponent);\\n\\n        return balanceOut.mulDown(power.complement());\\n    }\\n\\n    // Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\\n    // current balances and weights.\\n    function _calcInGivenOut(\\n        uint256 balanceIn,\\n        uint256 weightIn,\\n        uint256 balanceOut,\\n        uint256 weightOut,\\n        uint256 amountOut\\n    ) internal pure returns (uint256) {\\n        /**********************************************************************************************\\n        // inGivenOut                                                                                //\\n        // aO = amountOut                                                                            //\\n        // bO = balanceOut                                                                           //\\n        // bI = balanceIn              /  /            bO             \\\\    (wO / wI)      \\\\          //\\n        // aI = amountIn    aI = bI * |  | --------------------------  | ^            - 1  |         //\\n        // wI = weightIn               \\\\  \\\\       ( bO - aO )         /                   /          //\\n        // wO = weightOut                                                                            //\\n        **********************************************************************************************/\\n\\n        // Amount in, so we round up overall.\\n\\n        // The multiplication rounds up, and the power rounds up (so the base rounds up too).\\n        // Because b0 / (b0 - a0) >= 1, the exponent rounds up.\\n\\n        // Cannot exceed maximum out ratio\\n        require(amountOut <= balanceOut.mulDown(_MAX_OUT_RATIO), \\\"MAX_OUT_RATIO\\\");\\n\\n        uint256 base = balanceOut.divUp(balanceOut - amountOut);\\n        uint256 exponent = weightOut.divUp(weightIn);\\n        uint256 power = base.powUp(exponent);\\n\\n        // Because the base is larger than one (and the power rounds up), the power should always be larger than one, so\\n        // the following subtraction should never revert.\\n        uint256 ratio = power - FixedPoint.ONE;\\n\\n        return balanceIn.mulUp(ratio);\\n    }\\n\\n    function _calcBptOutGivenExactTokensIn(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256, uint256[] memory) {\\n        // BPT out, so we round down overall.\\n\\n        uint256[] memory balanceRatiosWithFee = new uint256[](amountsIn.length);\\n\\n        uint256 invariantRatioWithFees = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            balanceRatiosWithFee[i] = (balances[i] +amountsIn[i]).divDown(balances[i]);\\n            invariantRatioWithFees = invariantRatioWithFees + (balanceRatiosWithFee[i].mulDown(normalizedWeights[i]));\\n        }\\n\\n        (uint256 invariantRatio, uint256[] memory swapFees) = _computeJoinExactTokensInInvariantRatio(\\n            balances,\\n            normalizedWeights,\\n            amountsIn,\\n            balanceRatiosWithFee,\\n            invariantRatioWithFees,\\n            swapFeePercentage\\n        );\\n\\n        uint256 bptOut = (invariantRatio > FixedPoint.ONE)\\n            ? bptTotalSupply.mulDown(invariantRatio - FixedPoint.ONE)\\n            : 0;\\n        return (bptOut, swapFees);\\n    }\\n\\n    /**\\n     * @dev Intermediate function to avoid stack-too-deep \\\"\\n     */\\n    function _computeJoinExactTokensInInvariantRatio(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsIn,\\n        uint256[] memory balanceRatiosWithFee,\\n        uint256 invariantRatioWithFees,\\n        uint256 swapFeePercentage\\n    ) private pure returns (uint256 invariantRatio, uint256[] memory swapFees) {\\n        // Swap fees are charged on all tokens that are being added in a larger proportion than the overall invariant\\n        // increase.\\n        swapFees = new uint256[](amountsIn.length);\\n        invariantRatio = FixedPoint.ONE;\\n\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            uint256 amountInWithoutFee;\\n\\n            if (balanceRatiosWithFee[i] > invariantRatioWithFees) {\\n                uint256 nonTaxableAmount = balances[i].mulDown(invariantRatioWithFees-FixedPoint.ONE);\\n                uint256 taxableAmount = amountsIn[i] - nonTaxableAmount;\\n                uint256 swapFee = taxableAmount.mulUp(swapFeePercentage);\\n\\n                amountInWithoutFee = nonTaxableAmount + (taxableAmount - swapFee);\\n                swapFees[i] = swapFee;\\n            } else {\\n                amountInWithoutFee = amountsIn[i];\\n            }\\n\\n            uint256 balanceRatio = (balances[i] + amountInWithoutFee).divDown(balances[i]);\\n\\n            invariantRatio = invariantRatio.mulDown(balanceRatio.powDown(normalizedWeights[i]));\\n        }\\n    }\\n\\n    function _calcTokenInGivenExactBptOut(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 bptAmountOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256 amountIn, uint256 swapFee) {\\n        /******************************************************************************************\\n        // tokenInForExactBPTOut                                                                 //\\n        // a = amountIn                                                                          //\\n        // b = balance                      /  /    totalBPT + bptOut      \\\\    (1 / w)       \\\\  //\\n        // bptOut = bptAmountOut   a = b * |  | --------------------------  | ^          - 1  |  //\\n        // bpt = totalBPT                   \\\\  \\\\       totalBPT            /                  /  //\\n        // w = weight                                                                            //\\n        ******************************************************************************************/\\n\\n        // Token in, so we round up overall.\\n\\n        // Calculate the factor by which the invariant will increase after minting BPTAmountOut\\n        uint256 invariantRatio = (bptTotalSupply + bptAmountOut).divUp(bptTotalSupply);\\n        require(invariantRatio <= _MAX_INVARIANT_RATIO, \\\"MAX_OUT_BPT_FOR_TOKEN_IN\\\");\\n\\n        // Calculate by how much the token balance has to increase to match the invariantRatio\\n        uint256 balanceRatio = invariantRatio.powUp(FixedPoint.ONE.divUp(normalizedWeight));\\n\\n        uint256 amountInWithoutFee = balance.mulUp(balanceRatio - FixedPoint.ONE);\\n\\n        // We can now compute how much extra balance is being deposited and used in virtual swaps, and charge swap fees\\n        // accordingly.\\n        uint256 taxablePercentage = normalizedWeight.complement();\\n        uint256 taxableAmount = amountInWithoutFee.mulUp(taxablePercentage);\\n        uint256 nonTaxableAmount = amountInWithoutFee - taxableAmount;\\n\\n        uint256 taxableAmountPlusFees = taxableAmount.divUp(FixedPoint.ONE - swapFeePercentage);\\n\\n        swapFee = taxableAmountPlusFees - taxableAmount;\\n        amountIn = nonTaxableAmount + taxableAmountPlusFees;\\n    }\\n\\n    function _calcAllTokensInGivenExactBptOut(\\n        uint256[] memory balances,\\n        uint256 bptAmountOut,\\n        uint256 totalBPT\\n    ) internal pure returns (uint256[] memory) {\\n        /************************************************************************************\\n        // tokensInForExactBptOut                                                          //\\n        // (per token)                                                                     //\\n        // aI = amountIn                   /   bptOut   \\\\                                  //\\n        // b = balance           aI = b * | ------------ |                                 //\\n        // bptOut = bptAmountOut           \\\\  totalBPT  /                                  //\\n        // bpt = totalBPT                                                                  //\\n        ************************************************************************************/\\n\\n        // Tokens in, so we round up overall.\\n        uint256 bptRatio = bptAmountOut.divUp(totalBPT);\\n\\n        uint256[] memory amountsIn = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsIn[i] = balances[i].mulUp(bptRatio);\\n        }\\n\\n        return amountsIn;\\n    }\\n\\n    function _calcBptInGivenExactTokensOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256, uint256[] memory) {\\n        // BPT in, so we round up overall.\\n\\n        uint256[] memory balanceRatiosWithoutFee = new uint256[](amountsOut.length);\\n        uint256 invariantRatioWithoutFees = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            balanceRatiosWithoutFee[i] = (balances[i] - amountsOut[i]).divUp(balances[i]);\\n            invariantRatioWithoutFees = invariantRatioWithoutFees + (\\n                balanceRatiosWithoutFee[i].mulUp(normalizedWeights[i])\\n            );\\n        }\\n\\n        (uint256 invariantRatio, uint256[] memory swapFees) = _computeExitExactTokensOutInvariantRatio(\\n            balances,\\n            normalizedWeights,\\n            amountsOut,\\n            balanceRatiosWithoutFee,\\n            invariantRatioWithoutFees,\\n            swapFeePercentage\\n        );\\n\\n        uint256 bptIn = bptTotalSupply.mulUp(invariantRatio.complement());\\n        return (bptIn, swapFees);\\n    }\\n\\n    /**\\n     * @dev Intermediate function to avoid stack-too-deep \\\"\\n     */\\n    function _computeExitExactTokensOutInvariantRatio(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsOut,\\n        uint256[] memory balanceRatiosWithoutFee,\\n        uint256 invariantRatioWithoutFees,\\n        uint256 swapFeePercentage\\n    ) private pure returns (uint256 invariantRatio, uint256[] memory swapFees) {\\n        swapFees = new uint256[](amountsOut.length);\\n        invariantRatio = FixedPoint.ONE;\\n\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it to\\n            // 'token out'. This results in slightly larger price impact.\\n\\n            uint256 amountOutWithFee;\\n            if (invariantRatioWithoutFees > balanceRatiosWithoutFee[i]) {\\n                uint256 nonTaxableAmount = balances[i].mulDown(invariantRatioWithoutFees.complement());\\n                uint256 taxableAmount = amountsOut[i] - nonTaxableAmount;\\n                uint256 taxableAmountPlusFees = taxableAmount.divUp(FixedPoint.ONE - swapFeePercentage);\\n\\n                swapFees[i] = taxableAmountPlusFees - taxableAmount;\\n                amountOutWithFee = nonTaxableAmount + taxableAmountPlusFees;\\n            } else {\\n                amountOutWithFee = amountsOut[i];\\n            }\\n\\n            uint256 balanceRatio = (balances[i] - amountOutWithFee).divDown(balances[i]);\\n\\n            invariantRatio = invariantRatio.mulDown(balanceRatio.powDown(normalizedWeights[i]));\\n        }\\n    }\\n\\n    function _calcTokenOutGivenExactBptIn(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 bptAmountIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256 amountOut, uint256 swapFee) {\\n        /*****************************************************************************************\\n        // exactBPTInForTokenOut                                                                //\\n        // a = amountOut                                                                        //\\n        // b = balance                     /      /    totalBPT - bptIn       \\\\    (1 / w)  \\\\   //\\n        // bptIn = bptAmountIn    a = b * |  1 - | --------------------------  | ^           |  //\\n        // bpt = totalBPT                  \\\\      \\\\       totalBPT            /             /   //\\n        // w = weight                                                                           //\\n        *****************************************************************************************/\\n\\n        // Token out, so we round down overall. The multiplication rounds down, but the power rounds up (so the base\\n        // rounds up). Because (totalBPT - bptIn) / totalBPT <= 1, the exponent rounds down.\\n\\n        // Calculate the factor by which the invariant will decrease after burning BPTAmountIn\\n        uint256 invariantRatio = (bptTotalSupply - bptAmountIn).divUp(bptTotalSupply);\\n        require(invariantRatio >= _MIN_INVARIANT_RATIO, \\\"MIN_BPT_IN_FOR_TOKEN_OUT\\\");\\n\\n        // Calculate by how much the token balance has to decrease to match invariantRatio\\n        uint256 balanceRatio = invariantRatio.powUp(FixedPoint.ONE.divDown(normalizedWeight));\\n\\n        // Because of rounding up, balanceRatio can be greater than one. Using complement prevents reverts.\\n        uint256 amountOutWithoutFee = balance.mulDown(balanceRatio.complement());\\n\\n        // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps, which result\\n        // in swap fees.\\n        uint256 taxablePercentage = normalizedWeight.complement();\\n\\n        // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it\\n        // to 'token out'. This results in slightly larger price impact. Fees are rounded up.\\n        uint256 taxableAmount = amountOutWithoutFee.mulUp(taxablePercentage);\\n        uint256 nonTaxableAmount = amountOutWithoutFee - taxableAmount;\\n\\n        swapFee = taxableAmount.mulUp(swapFeePercentage);\\n        amountOut = nonTaxableAmount + (taxableAmount - swapFee);\\n    }\\n\\n    function _calcTokensOutGivenExactBptIn(\\n        uint256[] memory balances,\\n        uint256 bptAmountIn,\\n        uint256 totalBPT\\n    ) internal pure returns (uint256[] memory) {\\n        /**********************************************************************************************\\n        // exactBPTInForTokensOut                                                                    //\\n        // (per token)                                                                               //\\n        // aO = amountOut                  /        bptIn         \\\\                                  //\\n        // b = balance           a0 = b * | ---------------------  |                                 //\\n        // bptIn = bptAmountIn             \\\\       totalBPT       /                                  //\\n        // bpt = totalBPT                                                                            //\\n        **********************************************************************************************/\\n\\n        // Since we're computing an amount out, we round down overall. This means rounding down on both the\\n        // multiplication and division.\\n\\n        uint256 bptRatio = bptAmountIn.divDown(totalBPT);\\n\\n        uint256[] memory amountsOut = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsOut[i] = balances[i].mulDown(bptRatio);\\n        }\\n\\n        return amountsOut;\\n    }\\n\\n    function _calcDueTokenProtocolSwapFeeAmount(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 previousInvariant,\\n        uint256 currentInvariant,\\n        uint256 protocolSwapFeePercentage\\n    ) internal pure returns (uint256) {\\n        /*********************************************************************************\\n        /*  protocolSwapFeePercentage * balanceToken * ( 1 - (previousInvariant / currentInvariant) ^ (1 / weightToken))\\n        *********************************************************************************/\\n\\n        if (currentInvariant <= previousInvariant) {\\n            // This shouldn't happen outside of rounding errors, but have this safeguard nonetheless to prevent the Pool\\n            // from entering a locked state in which joins and exits revert while computing accumulated swap fees.\\n            return 0;\\n        }\\n\\n        // We round down to prevent issues in the Pool's accounting, even if it means paying slightly less in protocol\\n        // fees to the Vault.\\n\\n        // Fee percentage and balance multiplications round down, while the subtrahend (power) rounds up (as does the\\n        // base). Because previousInvariant / currentInvariant <= 1, the exponent rounds down.\\n\\n        uint256 base = previousInvariant.divUp(currentInvariant);\\n        uint256 exponent = FixedPoint.ONE.divDown(normalizedWeight);\\n\\n        // Because the exponent is larger than one, the base of the power function has a lower bound. We cap to this\\n        // value to avoid numeric issues, which means in the extreme case (where the invariant growth is larger than\\n        // 1 / min exponent) the Pool will pay less in protocol fees than it should.\\n        base = Math.max(base, FixedPoint.MIN_POW_BASE_FREE_EXPONENT);\\n\\n        uint256 power = base.powUp(exponent);\\n\\n        uint256 tokenAccruedFees = balance.mulDown(power.complement());\\n        return tokenAccruedFees.mulDown(protocolSwapFeePercentage);\\n    }\\n}\\n\",\"keccak256\":\"0x7b16a4e89f839a55370add9717eca97c57bb94b0a950dcc0d4d16f3002b9f505\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/weighted/WeightedOracleMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../math/FixedPoint.sol\\\";\\nimport \\\"../LogCompression.sol\\\";\\n\\ncontract WeightedOracleMath {\\n    using FixedPoint for uint256;\\n\\n    /**\\n     * @dev Calculates the logarithm of the spot price of token B in token A.\\n     *\\n     * The return value is a 4 decimal fixed-point number: use `LogCompression.fromLowResLog`\\n     * to recover the original value.\\n     */\\n    function _calcLogSpotPrice(\\n        uint256 normalizedWeightA,\\n        uint256 balanceA,\\n        uint256 normalizedWeightB,\\n        uint256 balanceB\\n    ) internal pure returns (int256) {\\n        // Max balances are 2^112 and min weights are 0.01, so the division never overflows.\\n\\n        // The rounding direction is irrelevant as we're about to introduce a much larger error when converting to log\\n        // space. We use `divUp` as it prevents the result from being zero, which would make the logarithm revert. A\\n        // result of zero is therefore only possible with zero balances, which are prevented via other means.\\n        uint256 spotPrice = balanceA.divUp(normalizedWeightA).divUp(balanceB.divUp(normalizedWeightB));\\n        return LogCompression.toLowResLog(spotPrice);\\n    }\\n\\n    /**\\n     * @dev Calculates the price of BPT in a token. `logBptTotalSupply` should be the result of calling `toLowResLog`\\n     * with the current BPT supply.\\n     *\\n     * The return value is a 4 decimal fixed-point number: use `LogCompression.fromLowResLog`\\n     * to recover the original value.\\n     */\\n    function _calcLogBPTPrice(\\n        uint256 normalizedWeight,\\n        uint256 balance,\\n        int256 logBptTotalSupply\\n    ) internal pure returns (int256) {\\n        // BPT price = (balance / weight) / total supply\\n        // Since we already have ln(total supply) and want to compute ln(BPT price), we perform the computation in log\\n        // space directly: ln(BPT price) = ln(balance / weight) - ln(total supply)\\n\\n        // The rounding direction is irrelevant as we're about to introduce a much larger error when converting to log\\n        // space. We use `divUp` as it prevents the result from being zero, which would make the logarithm revert. A\\n        // result of zero is therefore only possible with zero balances, which are prevented via other means.\\n        uint256 balanceOverWeight = balance.divUp(normalizedWeight);\\n        int256 logBalanceOverWeight = LogCompression.toLowResLog(balanceOverWeight);\\n\\n        // Because we're subtracting two values in log space, this value has a larger error (+-0.0001 instead of\\n        // +-0.00005), which results in a final larger relative error of around 0.1%.\\n        return logBalanceOverWeight - logBptTotalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0x080ad2bf8efa6b9908f6ab6e8f12a0b63af688a3a0247460b744a86fc5b1b57e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/weighted/WeightedPool2TokensMiscData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../helpers/WordCodec.sol\\\";\\n\\n/**\\n * @dev This module provides an interface to store seemingly unrelated pieces of information, in particular used by\\n * pools with a price oracle.\\n *\\n * These pieces of information are all kept together in a single storage slot to reduce the number of storage reads. In\\n * particular, we not only store configuration values (such as the swap fee percentage), but also cache\\n * reduced-precision versions of the total BPT supply and invariant, which lets us not access nor compute these values\\n * when producing oracle updates during a swap.\\n *\\n * Data is stored with the following structure:\\n *\\n * [ swap fee pct | oracle enabled | oracle index | oracle sample initial timestamp | log supply | log invariant ]\\n * [    uint64    |      bool      |    uint10    |              uint31             |    int22   |     int22     ]\\n *\\n * Note that we are not using the most-significant 106 bits.\\n */\\nlibrary WeightedPool2TokensMiscData {\\n    using WordCodec for bytes32;\\n    using WordCodec for uint256;\\n\\n    uint256 private constant _LOG_INVARIANT_OFFSET = 0;\\n    uint256 private constant _LOG_TOTAL_SUPPLY_OFFSET = 22;\\n    uint256 private constant _ORACLE_SAMPLE_CREATION_TIMESTAMP_OFFSET = 44;\\n    uint256 private constant _ORACLE_INDEX_OFFSET = 75;\\n    uint256 private constant _ORACLE_ENABLED_OFFSET = 85;\\n    uint256 private constant _SWAP_FEE_PERCENTAGE_OFFSET = 86;\\n\\n    /**\\n     * @dev Returns the cached logarithm of the invariant.\\n     */\\n    function logInvariant(bytes32 data) internal pure returns (int256) {\\n        return data.decodeInt22(_LOG_INVARIANT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns the cached logarithm of the total supply.\\n     */\\n    function logTotalSupply(bytes32 data) internal pure returns (int256) {\\n        return data.decodeInt22(_LOG_TOTAL_SUPPLY_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp of the creation of the oracle's latest sample.\\n     */\\n    function oracleSampleCreationTimestamp(bytes32 data) internal pure returns (uint256) {\\n        return data.decodeUint31(_ORACLE_SAMPLE_CREATION_TIMESTAMP_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns the index of the oracle's latest sample.\\n     */\\n    function oracleIndex(bytes32 data) internal pure returns (uint256) {\\n        return data.decodeUint10(_ORACLE_INDEX_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns true if the oracle is enabled.\\n     */\\n    function oracleEnabled(bytes32 data) internal pure returns (bool) {\\n        return data.decodeBool(_ORACLE_ENABLED_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns the swap fee percentage.\\n     */\\n    function swapFeePercentage(bytes32 data) internal pure returns (uint256) {\\n        return data.decodeUint64(_SWAP_FEE_PERCENTAGE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Sets the logarithm of the invariant in `data`, returning the updated value.\\n     */\\n    function setLogInvariant(bytes32 data, int256 _logInvariant) internal pure returns (bytes32) {\\n        return data.insertInt22(_logInvariant, _LOG_INVARIANT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Sets the logarithm of the total supply in `data`, returning the updated value.\\n     */\\n    function setLogTotalSupply(bytes32 data, int256 _logTotalSupply) internal pure returns (bytes32) {\\n        return data.insertInt22(_logTotalSupply, _LOG_TOTAL_SUPPLY_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Sets the timestamp of the creation of the oracle's latest sample in `data`, returning the updated value.\\n     */\\n    function setOracleSampleCreationTimestamp(bytes32 data, uint256 _initialTimestamp) internal pure returns (bytes32) {\\n        return data.insertUint31(_initialTimestamp, _ORACLE_SAMPLE_CREATION_TIMESTAMP_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Sets the index of the  oracle's latest sample in `data`, returning the updated value.\\n     */\\n    function setOracleIndex(bytes32 data, uint256 _oracleIndex) internal pure returns (bytes32) {\\n        return data.insertUint10(_oracleIndex, _ORACLE_INDEX_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Enables or disables the oracle in `data`, returning the updated value.\\n     */\\n    function setOracleEnabled(bytes32 data, bool _oracleEnabled) internal pure returns (bytes32) {\\n        return data.insertBool(_oracleEnabled, _ORACLE_ENABLED_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Sets the swap fee percentage in `data`, returning the updated value.\\n     */\\n    function setSwapFeePercentage(bytes32 data, uint256 _swapFeePercentage) internal pure returns (bytes32) {\\n        return data.insertUint64(_swapFeePercentage, _SWAP_FEE_PERCENTAGE_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x8abd8dc98c4f50f1f1666698481dc32967a676c946fce3b7eb3ff0534662d81f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/weighted/WeightedPoolUserDataHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../interfaces/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../BaseWeightedPool.sol\\\";\\n\\nlibrary WeightedPoolUserDataHelpers {\\n    function joinKind(bytes memory self) internal pure returns (BaseWeightedPool.JoinKind) {\\n        return abi.decode(self, (BaseWeightedPool.JoinKind));\\n    }\\n\\n    function exitKind(bytes memory self) internal pure returns (BaseWeightedPool.ExitKind) {\\n        return abi.decode(self, (BaseWeightedPool.ExitKind));\\n    }\\n\\n    // Joins\\n\\n    function initialAmountsIn(bytes memory self) internal pure returns (uint256[] memory amountsIn) {\\n        (, amountsIn) = abi.decode(self, (BaseWeightedPool.JoinKind, uint256[]));\\n    }\\n\\n    function exactTokensInForBptOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountOut)\\n    {\\n        (, amountsIn, minBPTAmountOut) = abi.decode(self, (BaseWeightedPool.JoinKind, uint256[], uint256));\\n    }\\n\\n    function tokenInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut, uint256 tokenIndex) {\\n        (, bptAmountOut, tokenIndex) = abi.decode(self, (BaseWeightedPool.JoinKind, uint256, uint256));\\n    }\\n\\n    function allTokensInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut) {\\n        (, bptAmountOut) = abi.decode(self, (BaseWeightedPool.JoinKind, uint256));\\n    }\\n\\n    // Exits\\n\\n    function exactBptInForTokenOut(bytes memory self) internal pure returns (uint256 bptAmountIn, uint256 tokenIndex) {\\n        (, bptAmountIn, tokenIndex) = abi.decode(self, (BaseWeightedPool.ExitKind, uint256, uint256));\\n    }\\n\\n    function exactBptInForTokensOut(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (BaseWeightedPool.ExitKind, uint256));\\n    }\\n\\n    function bptInForExactTokensOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsOut, uint256 maxBPTAmountIn)\\n    {\\n        (, amountsOut, maxBPTAmountIn) = abi.decode(self, (BaseWeightedPool.ExitKind, uint256[], uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x4da085ca56e70b49032b421b3da70b5f775d6d9966e3efa661f41864c69b4691\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200754e3803806200754e8339810160408190526200003591620001e7565b81604051806020016200004890620001c0565b601f1982820381018352601f909101166040528051819060006200006e6002836200023c565b60a0819052905060006200008382846200025f565b60e0819052828552905083620000a5816200012a602090811b6200037e17901c565b6001600160a01b03166080528285018051838252620000d0826200012a602090811b6200037e17901c565b6001600160a01b0390811660c05295909252525050929092166101005250620000ff90506276a7004262000279565b61012052600180546001600160a01b0319166001600160a01b03929092169190911790555062000294565b80517f602038038060206000396000f3fefefefefefefefefefefefefefefefefefefe808352600091602081018484f090845291506001600160a01b038216620001ba5760405162461bcd60e51b815260206004820152601660248201527f434f44455f4445504c4f594d454e545f4641494c454400000000000000000000604482015260640160405180910390fd5b50919050565b6167a38062000dab83390190565b6001600160a01b0381168114620001e457600080fd5b50565b60008060408385031215620001fb57600080fd5b82516200020881620001ce565b60208401519092506200021b81620001ce565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6000826200025a57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101562000274576200027462000226565b500390565b600082198211156200028f576200028f62000226565b500190565b60805160a05160c05160e0516101005161012051610ab4620002f7600039600081816102f3015261031f0152600061035c0152600061047301526000818160ed01526104520152600061043101526000818160c801526104100152610ab46000f3fe608060405234801561001057600080fd5b506004361061006c5760003560e01c8062c194db146100715780631596019b1461008f578063174481fa146100ba5780632da47c40146101185780634b75f54f146101355780636634b753146101485780638d928af814610184575b600080fd5b61007961018c565b6040516100869190610635565b60405180910390f35b6100a261009d366004610827565b6101ab565b6040516001600160a01b039091168152602001610086565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602082015201610086565b6101206102ed565b60408051928352602083019190915201610086565b6001546100a2906001600160a01b031681565b61017461015636600461090b565b6001600160a01b031660009081526020819052604090205460ff1690565b6040519015158152602001610086565b6100a261035a565b60606101a66040518060200160405280600081525061040c565b905090565b60008060006101b86102ed565b915091506000604051806101a001604052806101d261035a565b6001600160a01b031681526020018c81526020018b81526020018a6000815181106101ff576101ff610928565b60200260200101516001600160a01b031681526020018a60018151811061022857610228610928565b60200260200101516001600160a01b031681526020018960008151811061025157610251610928565b602002602001015181526020018960018151811061027157610271610928565b602002602001015181526020018881526020018481526020018381526020018715158152602001866001600160a01b03168152602001306001600160a01b031681525090506102de816040516020016102ca919061093e565b6040516020818303038152906040526104f8565b9b9a5050505050505050505050565b600080427f000000000000000000000000000000000000000000000000000000000000000081101561034f57610343817f0000000000000000000000000000000000000000000000000000000000000000610a4f565b9362278d009350915050565b506000928392509050565b7f000000000000000000000000000000000000000000000000000000000000000090565b80517f602038038060206000396000f3fefefefefefefefefefefefefefefefefefefe808352600091602081018484f090845291506001600160a01b0382166104065760405162461bcd60e51b815260206004820152601660248201527510d3d11157d111541313d65351539517d1905253115160521b604482015260640160405180910390fd5b50919050565b60607f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600061049e8285610a66565b875190915060006104af8284610a66565b9050604051975060208101880160405280885260208801866000828a3c846000888301883c50602089810190898501016104ea818386610558565b505050505050505050919050565b600080610504836105ae565b6001600160a01b038116600081815260208190526040808220805460ff191660011790555192935090917f83a48fbcfc991335314e74d0496aab6a1987e992ddc85dddbcc4d6dd6ef2e9fc9190a292915050565b60208110610590578151835261056f602084610a66565b925061057c602083610a66565b9150610589602082610a4f565b9050610558565b905182516020929092036101000a6000190180199091169116179052565b6000806105ba8361040c565b905060008151602083016000f090506001600160a01b0381166105e1573d6000803e3d6000fd5b9392505050565b6000815180845260005b8181101561060e576020818501810151868301820152016105f2565b81811115610620576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006105e160208301846105e8565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561068657610686610648565b604052919050565b600082601f83011261069f57600080fd5b81356001600160401b038111156106b8576106b8610648565b6106cb601f8201601f191660200161065e565b8181528460208386010111156106e057600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b0382111561071657610716610648565b5060051b60200190565b6001600160a01b038116811461073557600080fd5b50565b600082601f83011261074957600080fd5b8135602061075e610759836106fd565b61065e565b82815260059290921b8401810191818101908684111561077d57600080fd5b8286015b848110156107a157803561079481610720565b8352918301918301610781565b509695505050505050565b600082601f8301126107bd57600080fd5b813560206107cd610759836106fd565b82815260059290921b840181019181810190868411156107ec57600080fd5b8286015b848110156107a157803583529183019183016107f0565b8035801515811461081757600080fd5b919050565b803561081781610720565b600080600080600080600060e0888a03121561084257600080fd5b87356001600160401b038082111561085957600080fd5b6108658b838c0161068e565b985060208a013591508082111561087b57600080fd5b6108878b838c0161068e565b975060408a013591508082111561089d57600080fd5b6108a98b838c01610738565b965060608a01359150808211156108bf57600080fd5b506108cc8a828b016107ac565b945050608088013592506108e260a08901610807565b91506108f060c0890161081c565b905092959891949750929550565b6001600160a01b03169052565b60006020828403121561091d57600080fd5b81356105e181610720565b634e487b7160e01b600052603260045260246000fd5b602081526109506020820183516108fe565b600060208301516101a080604085015261096e6101c08501836105e8565b91506040850151601f1985840301606086015261098b83826105e8565b92505060608501516109a060808601826108fe565b5060808501516109b360a08601826108fe565b5060a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120818187015280870151915050610140818187015280870151915050610160610a0a8187018315159052565b8601519050610180610a1e868201836108fe565b8601519050610a2f858301826108fe565b5090949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610a6157610a61610a39565b500390565b60008219821115610a7957610a79610a39565b50019056fea26469706673582212203795794eb70866d75b3e49482406247f223b9e32e4bdeb00bbd44291bdae6d6064736f6c634300080a00336102c06040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b50604051620067a3380380620067a38339810160408190526200005a9162000a5e565b6101008101516101208201516020808401516040808601518651825180840190935260018352603160f81b838601526101608801513360601b6080526001600160a01b031660a05283519394919390928592839283918791620000c4916003919085019062000872565b508051620000da90600490602084019062000872565b50506005805460ff1916601217905550815160209283012060c05280519082012060e0527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610100526001600160a01b0390921661014052506200015592506276a70085111591506101949062001352620005a7821b17901c565b6200017462278d00821115610195620005a760201b620013521760201c565b600062000182834262000bc1565b610160819052905062000196828262000bc1565b61018052505050610140810151620001ae90620005c7565b60e0810151620001be906200061f565b80516040516309b2760f60e01b81526000916001600160a01b0316906309b2760f90620001f19060029060040162000bdc565b6020604051808303816000875af115801562000211573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000237919062000c05565b604080516002808252606082018352929350600092909160208301908036833701905050905082606001518160008151811062000278576200027862000c1f565b60200260200101906001600160a01b031690816001600160a01b031681525050826080015181600181518110620002b357620002b362000c1f565b6001600160a01b0392831660209182029290920101528351166366a9c7d283836002604051908082528060200260200182016040528015620002ff578160200160208202803683370190505b506040518463ffffffff1660e01b8152600401620003209392919062000c35565b600060405180830381600087803b1580156200033b57600080fd5b505af115801562000350573d6000803e3d6000fd5b5050506101a0839052506060830180516001600160a01b039081166101c0526080850151166101e052516200038590620006b2565b6102605260808301516200039990620006b2565b61028081815250508261018001516001600160a01b0316634b75f54f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200040b919062000cd1565b6001600160a01b03166102a081905260408051631060c1e160e21b815290516200049c929163418307849160048083019260209291908290030181865afa1580156200045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000481919062000c05565b8460a00151101561012e620005a760201b620013521760201c565b620005236102a0516001600160a01b031663418307846040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000508919062000c05565b8460c00151101561012e620005a760201b620013521760201c565b6000620005478460c001518560a001516200074560201b620013641790919060201c565b90506200056c670de0b6b3a76400008214610134620005a760201b620013521760201c565b60a0840180516102005260c0850180516102205251905110156200059257600162000595565b60005b60ff16610240525062000e7892505050565b81620005c357620005c381620007a360201b620013b91760201c565b5050565b620005e381600954620007f660201b6200140c1790919060201c565b60095560405181151581527f3e350b41e86a8e10f804ade6d35340d620be35569cc75ac943e8bb14ab80ead1906020015b60405180910390a150565b6200063f64e8d4a5100082101560cb620005a760201b620013521760201c565b6200066267016345785d8a000082111560ca620005a760201b620013521760201c565b6200067e816009546200081560201b6200141a1790919060201c565b6009556040518181527fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc9060200162000614565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620006f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200071a919062000cf1565b60ff16905060006200072e82601262000d16565b90506200073d81600a62000e2d565b949350505050565b60008062000754838562000bc1565b9050838110156200079a5760405162461bcd60e51b815260206004820152600c60248201526b4144445f4f564552464c4f5760a01b604482015260640160405180910390fd5b90505b92915050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006200079a826055856200083460201b62001428179092919060201c565b60006200079a826056856200085d60201b6200144f179092919060201c565b60006001821b19841682846200084c5760006200084f565b60015b60ff16901b17949350505050565b6001600160401b03811b1992909216911b1790565b828054620008809062000e3b565b90600052602060002090601f016020900481019282620008a45760008555620008ef565b82601f10620008bf57805160ff1916838001178555620008ef565b82800160010185558215620008ef579182015b82811115620008ef578251825591602001919060010190620008d2565b50620008fd92915062000901565b5090565b5b80821115620008fd576000815560010162000902565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b038111828210171562000954576200095462000918565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000985576200098562000918565b604052919050565b6001600160a01b0381168114620009a357600080fd5b50565b8051620009b3816200098d565b919050565b600082601f830112620009ca57600080fd5b81516001600160401b03811115620009e657620009e662000918565b6020620009fc601f8301601f191682016200095a565b828152858284870101111562000a1157600080fd5b60005b8381101562000a3157858101830151828201840152820162000a14565b8381111562000a435760008385840101525b5095945050505050565b80518015158114620009b357600080fd5b60006020828403121562000a7157600080fd5b81516001600160401b038082111562000a8957600080fd5b908301906101a0828603121562000a9f57600080fd5b62000aa96200092e565b62000ab483620009a6565b815260208301518281111562000ac957600080fd5b62000ad787828601620009b8565b60208301525060408301518281111562000af057600080fd5b62000afe87828601620009b8565b60408301525062000b1260608401620009a6565b606082015262000b2560808401620009a6565b608082015260a0838101519082015260c0808401519082015260e0808401519082015261010080840151908201526101208084015190820152610140915062000b7082840162000a4d565b82820152610160915062000b86828401620009a6565b82820152610180915062000b9c828401620009a6565b91810191909152949350505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111562000bd75762000bd762000bab565b500190565b602081016003831062000bff57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121562000c1857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000606082018583526020606081850152818651808452608086019150828801935060005b8181101562000c815784516001600160a01b03168352938301939183019160010162000c5a565b50508481036040860152855180825290820192508186019060005b8181101562000cc35782516001600160a01b03168552938301939183019160010162000c9c565b509298975050505050505050565b60006020828403121562000ce457600080fd5b81516200079a816200098d565b60006020828403121562000d0457600080fd5b815160ff811681146200079a57600080fd5b60008282101562000d2b5762000d2b62000bab565b500390565b600181815b8085111562000d7157816000190482111562000d555762000d5562000bab565b8085161562000d6357918102915b93841c939080029062000d35565b509250929050565b60008262000d8a575060016200079d565b8162000d99575060006200079d565b816001811462000db2576002811462000dbd5762000ddd565b60019150506200079d565b60ff84111562000dd15762000dd162000bab565b50506001821b6200079d565b5060208310610133831016604e8410600b841016171562000e02575081810a6200079d565b62000e0e838362000d30565b806000190482111562000e255762000e2562000bab565b029392505050565b60006200079a838362000d79565b600181811c9082168062000e5057607f821691505b6020821081141562000e7257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516157d562000fce60003960008181610fc601528181611a3201528181611b2501528181611efc01528181611fcc015281816123990152818161244c015281816126ff01528181612bfd01528181613adc01528181613bf001528181613ccd01528181613df101528181613eed0152613f41015260006120ea01526000612110015260008181612c2d01528181612c670152612d0501526000818161213e01526121da015260008181612164015281816121b801526122080152600050506000610d1a015260006108f2015260006115b40152600061159001526000610cc0015260006110740152600061186a015260006118ac0152600061188b01526000610c9c01526000610c1401526157d56000f3fe608060405234801561001057600080fd5b50600436106101ee5760003560e01c806306fdde03146101f3578063095ea7b31461021157806316c38b3c1461023457806318160ddd146102495780631c0de0511461025b5780631dccd8301461028057806323b872dd146102a0578063292c914a146102b3578063313ce567146102bb5780633331bc36146102d05780633644e515146102e357806338e9922e146102eb57806338fff2d0146102fe57806339509351146103065780634a6b0b151461031957806355c67628146103505780636028bfd41461035857806360d1507c14610379578063679aefce146103c15780636b843239146103c957806370a08231146103e957806374f3b009146104125780637ecebe0014610433578063851c1bb31461045c57806387ec68171461046f578063893d20e8146104825780638d928af8146104a257806395d89b41146104aa5780639b02cdde146104b25780639d2c110c146104ba578063a457c2d7146104cd578063a9059cbb146104e0578063aaabadc5146104f3578063b10be739146104fb578063b48b5b401461050e578063c0ff1a1514610516578063c45a01551461051e578063d505accf14610531578063d5c096c414610544578063dd62ed3e14610557578063f89f27ed1461056a578063ffd088eb14610572575b600080fd5b6101fb61057b565b60405161020891906148ba565b60405180910390f35b61022461021f36600461492f565b61060d565b6040519015158152602001610208565b610247610242366004614969565b610624565b005b6002545b604051908152602001610208565b610263610638565b604080519315158452602084019290925290820152606001610208565b61029361028e366004614a6b565b610661565b6040516102089190614b6f565b6102246102ae366004614b82565b610719565b6102476107df565b60055460405160ff9091168152602001610208565b6102476102de366004614bc3565b610814565b61024d6108c8565b6102476102f9366004614be5565b6108d7565b61024d6108f0565b61022461031436600461492f565b610914565b61032161094b565b6040805196875260208701959095529385019290925260608401521515608083015260a082015260c001610208565b61024d6109a6565b61036b610366366004614c6d565b6109b3565b604051610208929190614d69565b61038c610387366004614be5565b6109e4565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610208565b61024d610a67565b6103dc6103d7366004614d82565b610a8e565b6040516102089190614e33565b61024d6103f7366004614e77565b6001600160a01b031660009081526020819052604090205490565b610425610420366004614c6d565b610b6b565b604051610208929190614e94565b61024d610441366004614e77565b6001600160a01b031660009081526006602052604090205490565b61024d61046a366004614eb9565b610c10565b61036b61047d366004614c6d565b610c75565b61048a610c9a565b6040516001600160a01b039091168152602001610208565b61048a610cbe565b6101fb610ce2565b600a5461024d565b61024d6104c8366004614ef2565b610cf1565b6102246104db36600461492f565b610ea5565b6102246104ee36600461492f565b610ee5565b61048a610ef2565b61024d610509366004614fe7565b610efc565b61040061024d565b61024d610f11565b600b5461048a906001600160a01b031681565b61024761053f366004615002565b611045565b610425610552366004614c6d565b6111b5565b61024d610565366004615079565b6112e9565b610293611348565b6201de2061024d565b60606003805461058a906150b2565b80601f01602080910402602001604051908101604052809291908181526020018280546105b6906150b2565b80156106035780601f106105d857610100808354040283529160200191610603565b820191906000526020600020905b8154815290600101906020018083116105e657829003601f168201915b5050505050905090565b600061061a338484611464565b5060015b92915050565b61062c6114c6565b610635816114f4565b50565b6000806000610645611571565b15925061065061158e565b915061065a6115b2565b9050909192565b606081516001600160401b0381111561067c5761067c614986565b6040519080825280602002602001820160405280156106a5578160200160208202803683370190505b50905060006106b26115d6565b905060005b8351811015610712576106e560088583815181106106d7576106d76150ed565b6020026020010151846115e3565b8382815181106106f7576106f76150ed565b602090810291909101015261070b81615119565b90506106b7565b5050919050565b60008061072685336112e9565b9050336001600160a01b038616148061073f5750828110155b6107905760405162461bcd60e51b815260206004820181905260248201527f45524332305f5452414e534645525f455843454544535f414c4c4f57414e434560448201526064015b60405180910390fd5b61079b858585611698565b336001600160a01b038616148015906107bb57506001600160801b038114155b156107d4576107d485336107cf8685615134565b611464565b506001949350505050565b6107e761175b565b6107ef6114c6565b6107f9600161176e565b600061080460025490565b1115610812576108126117b0565b565b808210801561082557506104008111155b6108615760405162461bcd60e51b815260206004820152600d60248201526c4f55545f4f465f424f554e445360981b6044820152606401610787565b600061087660016000806000806000806117f9565b9050825b828110156108c25760008181526008602052604090205461089a90611858565b6108b05760008181526008602052604090208290555b806108ba81615119565b91505061087a565b50505050565b60006108d2611866565b905090565b6108df6114c6565b6108e761175b565b6106358161190c565b7f000000000000000000000000000000000000000000000000000000000000000090565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161061a9185906107cf90869061514b565b6000806000806000806000600954905061096481611975565b965061096f81611981565b955061097a8161198e565b9450610985816119a0565b9350610990816119b0565b925061099b816119c1565b915050909192939495565b60006108d26009546119c1565b600060606109c3865160026119d6565b6109d8898989898989896119e3611bae611c44565b97509795505050505050565b60008060008060008060006104008810610a375760405162461bcd60e51b815260206004820152601460248201527309ea48286988abe929cac82989288be929c888ab60631b6044820152606401610787565b600088815260086020526040902054610a4f81611d62565b959f949e50929c50909a509850965090945092505050565b60006108d2610a7560025490565b610a7d610f11565b610a88906002615163565b90611dc5565b606081516001600160401b03811115610aa957610aa9614986565b604051908082528060200260200182016040528015610ad2578160200160208202803683370190505b5090506000610adf6115d6565b9050610afb604080518082019091526000808252602082015290565b60005b8451811015610b6357848181518110610b1957610b196150ed565b60200260200101519150610b368260000151848460200151611e49565b848281518110610b4857610b486150ed565b6020908102919091010152610b5c81615119565b9050610afe565b505050919050565b60608088610b95610b7a610cbe565b6001600160a01b0316336001600160a01b03161460cd611352565b610baa610ba06108f0565b82146101f4611352565b610bb387611e60565b6000806000610bc78d8d8d8d8d8d8d6119e3565b925092509250610bd78c84611edd565b610be082611bae565b610be981611bae565b610bf1611571565b15610bfe57610bfe6117b0565b909c909b509950505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001610c589291909182526001600160e01b031916602082015260240190565b604051602081830303815290604052805190602001209050919050565b60006060610c85865160026119d6565b6109d889898989898989611ee7612071611c44565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60606004805461058a906150b2565b6000610cfb61175b565b8360800151610d0b610b7a610cbe565b610d16610ba06108f0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686602001516001600160a01b03161490506000610d5e826120e1565b90506000610d6c83156120e1565b90506000610d7984612135565b90506000610d878515612135565b9050610d938985612189565b9850610d9f8884612189565b9750610dc78a60a0015186610db45789610db6565b8a5b87610dc1578b612195565b8a612195565b60008a516001811115610ddc57610ddc615182565b1415610e4a576000610dfa610def6109a6565b60608d015190612296565b9050610e1c610e16828d6060015161232d90919063ffffffff16565b86612189565b60608c01526000610e308c8c8c878761237a565b9050610e3c8186612421565b985050505050505050610e9d565b610e588a6060015184612189565b60608b01526000610e6c8b8b8b868661242d565b9050610e788186612487565b9050610e94610e8d610e886109a6565b612493565b82906124bd565b97505050505050505b509392505050565b600080610eb233856112e9565b9050808310610ecc57610ec733856000611464565b610edb565b610edb33856107cf8685615134565b5060019392505050565b600061061a338484611698565b60006108d261253b565b600061061e600883610f0c6115d6565b6125a6565b600080610f1c610cbe565b6001600160a01b031663f94d4668610f326108f0565b6040518263ffffffff1660e01b8152600401610f5091815260200190565b600060405180830381865afa158015610f6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f9591908101906151fe565b50915050610fa281611e60565b6000610fac6125f3565b60405163572c58a360e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063572c58a390610ffd9084908690600401614e94565b602060405180830381865afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e91906152cb565b9250505090565b6110538442111560d1611352565b6001600160a01b0387811660008181526006602090815260408083205481517f00000000000000000000000000000000000000000000000000000000000000008185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e090940190528251920191909120906110df8261266e565b6040805160008082526020820180845284905260ff8a169282019290925260608101889052608081018790529192509060019060a0016020604051602081039080840390855afa158015611137573d6000803e3d6000fd5b5050604051601f190151915061117990506001600160a01b0382161580159061117157508b6001600160a01b0316826001600160a01b0316145b6101f8611352565b61118484600161514b565b6001600160a01b038c166000908152600660205260409020556111a88b8b8b611464565b5050505050505050505050565b606080886111c4610b7a610cbe565b6111cf610ba06108f0565b6111d761175b565b60006111e260025490565b611259576111f28b8b8b8861269d565b94509050611207620f424082101560cc611352565b6112156000620f42406127b3565b61122b89611226620f424084615134565b6127b3565b61123484612071565b60408051600280825260608201835290916020830190803683370190505092506112d3565b61126288611e60565b6112a18789600081518110611279576112796150ed565b60200260200101518a600181518110611294576112946150ed565b6020026020010151612195565b6112b08b8b8b8b8b8b8b611ee7565b909550935090506112c189826127b3565b6112ca84612071565b6112d383611bae565b6112db6117b0565b505097509795505050505050565b60006112f3610cbe565b6001600160a01b0316826001600160a01b0316141561131a57506001600160801b0361061e565b6001600160a01b038084166000908152600160209081526040808320938616835292905220545b905061061e565b60606108d26125f3565b8161136057611360816113b9565b5050565b600080611371838561514b565b9050838110156113b25760405162461bcd60e51b815260206004820152600c60248201526b4144445f4f564552464c4f5760a01b6044820152606401610787565b9392505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006113b283836055611428565b60006113b28383605661144f565b60006001821b198416828461143e576000611441565b60015b60ff16901b17949350505050565b6001600160401b03811b1992909216911b1790565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006114dd6000356001600160e01b031916610c10565b90506106356114ec82336127bd565b610191611352565b80156115145761150f61150561158e565b4210610193611352565b611529565b61152961151f6115b2565b42106101a9611352565b6007805460ff19168215159081179091556040519081527f9e3a5e37224532dea67b89face185703738a228a6e8a23dee546960180d3be64906020015b60405180910390a150565b600061157b6115b2565b4211806108d257505060075460ff161590565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006108d26009546119a0565b600082602001516000141561162c5760405162461bcd60e51b815260206004820152600f60248201526e4f5241434c455f4241445f5345435360881b6044820152606401610787565b6000611651858560000151858760200151886040015161164c919061514b565b6128a0565b905060006116698686600001518688604001516128a0565b905061168e8560200151838361167f91906152e4565b6116899190615339565b612af4565b9695505050505050565b6116af6001600160a01b0384161515610198611352565b6116c66001600160a01b0383161515610199611352565b6001600160a01b0383166000908152602081905260409020546116ec90826101a0612b0e565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461171c90829061514b565b6001600160a01b0383811660008181526020818152604091829020949094555184815290929186169160008051602061578083398151915291016114b9565b610812611766611571565b610192611352565b60095461177b908261140c565b60095560405181151581527f3e350b41e86a8e10f804ade6d35340d620be35569cc75ac943e8bb14ab80ead190602001611566565b6009546117bc816119b0565b15610635576117d66117cf600a54612b29565b8290612b77565b90506117f36117ec6117e760025490565b612b29565b8290612b84565b60095550565b60008161180784601f612b92565b623fffff60541b605487901b1661181f88606a612b92565b623fffff609f1b609f8b901b166118378c60b5612b92565b6001600160ea1b031960ea8f901b1617171717171798975050505050505050565b6000637fffffff821661061e565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61191f64e8d4a5100082101560cb611352565b61193567016345785d8a000082111560ca611352565b600954611942908261141a565b6009556040518181527fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc90602001611566565b600061061e8282612ba3565b600061061e826016612ba3565b6000602c82901c637fffffff1661061e565b6000604b82901c6103ff1661061e565b60006001605583901c81161461061e565b6000605682901c6001600160401b031661061e565b6113608183146067611352565b600060608060006119f26125f3565b90506119fc611571565b15611ad057611a188789600081518110611279576112796150ed565b60405163572c58a360e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063572c58a390611a699085908d90600401614e94565b602060405180830381865afa158015611a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaa91906152cb565b9050611abb8983600a54848b612bca565b9250611aca898461232d612d49565b50611af1565b60408051600280825260608201835290916020830190803683370190505091505b611afc888287612dff565b9094509250611b0e888461232d612d49565b60405163572c58a360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063572c58a390611b5c9084908c90600401614e94565b602060405180830381865afa158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d91906152cb565b600a55509750975097945050505050565b611bdb81600081518110611bc457611bc46150ed565b6020026020010151611bd660016120e1565b612e9d565b81600081518110611bee57611bee6150ed565b602002602001018181525050611c2281600181518110611c1057611c106150ed565b6020026020010151611bd660006120e1565b81600181518110611c3557611c356150ed565b60200260200101818152505050565b333014611d02576000306001600160a01b0316600036604051611c68929190615367565b6000604051808303816000865af19150503d8060008114611ca5576040519150601f19603f3d011682016040523d82523d6000602084013e611caa565b606091505b505090508060008114611cb957fe5b60046000803e6000516001600160e01b0319166343adbafb60e01b8114611ce4573d6000803e3d6000fd5b506020600460003e604060205260243d03602460403e601c3d016000f35b611d0b86611e60565b600080611d218b8b8b8b8b8b8b8b63ffffffff16565b5091509150611d33818463ffffffff16565b8051601f1982018390526343adbafb603f1983015260200260231982016044820181fd5b505050505050505050565b6000806000806000806000611d7688612eb6565b9650611d8188612ec3565b9550611d8c88612ed0565b9450611d9788612edd565b9350611da288612eea565b9250611dad88612ef7565b9150611db888611858565b9050919395979092949650565b600081611de45760405162461bcd60e51b815260040161078790615377565b82611df15750600061061e565b6000611e05670de0b6b3a764000085615163565b9050670de0b6b3a7640000611e1a858361539e565b14611e375760405162461bcd60e51b8152600401610787906153b2565b611e41838261539e565b91505061061e565b6000611e5860088585856128a0565b949350505050565b611e6a60016120e1565b81600081518110611e7d57611e7d6150ed565b6020026020010151611e8f9190615163565b81600081518110611ea257611ea26150ed565b602002602001018181525050611eb860006120e1565b81600181518110611ecb57611ecb6150ed565b6020026020010151611c229190615163565b6113608282612f04565b60006060806000611ef66125f3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663572c58a3838b6040518363ffffffff1660e01b8152600401611f48929190614e94565b602060405180830381865afa158015611f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8991906152cb565b90506000611f9c8a84600a54858c612bca565b9050611fab8a8261232d612d49565b600080611fb98c868b612f9f565b91509150611fca8c82611364612d49565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663572c58a3868e6040518363ffffffff1660e01b8152600401612018929190614e94565b602060405180830381865afa158015612035573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205991906152cb565b600a55909e909d50909b509950505050505050505050565b61209e81600081518110612087576120876150ed565b602002602001015161209960016120e1565b613029565b816000815181106120b1576120b16150ed565b602002602001018181525050611c22816001815181106120d3576120d36150ed565b602002602001015161209960005b60008161210e577f000000000000000000000000000000000000000000000000000000000000000061061e565b7f000000000000000000000000000000000000000000000000000000000000000092915050565b600081612162577f000000000000000000000000000000000000000000000000000000000000000061061e565b7f000000000000000000000000000000000000000000000000000000000000000092915050565b60006113b28284615163565b6009546121a1816119b0565b80156121ac57508343115b156108c25760006121ff7f0000000000000000000000000000000000000000000000000000000000000000857f000000000000000000000000000000000000000000000000000000000000000086613066565b905060006122367f00000000000000000000000000000000000000000000000000000000000000008661223186611981565b613091565b90506000612243846119a0565b905060006122508561198e565b90506000612269828487876122648b611975565b6130b7565b9050808314611d575761227c8682613125565b9550612288864261313b565b600955505050505050505050565b6000806122a38385615163565b90508315806122ba5750826122b8858361539e565b145b6122f55760405162461bcd60e51b815260206004820152600c60248201526b4d554c5f4f564552464c4f5760a01b6044820152606401610787565b8061230457600091505061061e565b670de0b6b3a7640000612318600183615134565b612322919061539e565b611e4190600161514b565b60008282111561236e5760405162461bcd60e51b815260206004820152600c60248201526b5355425f4f564552464c4f5760a01b6044820152606401610787565b6000611e588385615134565b6060850151604051630b9c7bab60e31b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691635ce3dd58916123d491899188918a9189916004016153d8565b602060405180830381865afa1580156123f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241591906152cb565b90505b95945050505050565b60006113b28383612e9d565b606085015160405163e9be73ef60e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163e9be73ef916123d491899188918a9189916004016153d8565b60006113b28383613029565b6000670de0b6b3a764000082106124ab57600061061e565b61061e82670de0b6b3a7640000615134565b6000816124dc5760405162461bcd60e51b815260040161078790615377565b826124e95750600061061e565b60006124fd670de0b6b3a764000085615163565b9050670de0b6b3a7640000612512858361539e565b1461252f5760405162461bcd60e51b8152600401610787906153b2565b82612318600183615134565b6000612545610cbe565b6001600160a01b031663aaabadc56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d291906153fb565b600081815260208490526040812054816125bf82611858565b116125dc5760405162461bcd60e51b815260040161078790615418565b60006125e88286613153565b905061168e81612af4565b604080516002808252606080830184529260009291906020830190803683370190505090506126226001612135565b81600081518110612635576126356150ed565b60200260200101818152505061264b6000612135565b8160018151811061265e5761265e6150ed565b6020908102919091010152919050565b6000612678611866565b60405161190160f01b6020820152602281019190915260428101839052606201610c58565b6000606060006126ac846131a3565b90506126cd60008260038111156126c5576126c5615182565b1460ce611352565b60006126d8856131b9565b90506126e6815160026119d6565b6126ef81611e60565b60006126f96125f3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663572c58a383856040518363ffffffff1660e01b815260040161274b929190614e94565b602060405180830381865afa158015612768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278c91906152cb565b9050600061279b826002615163565b600a9290925550945090925050505b94509492505050565b61136082826131cf565b600073ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b6127dc610c9a565b6001600160a01b0316141580156127f757506127f783613240565b1561281f57612804610c9a565b6001600160a01b0316336001600160a01b031614905061061e565b61282761253b565b6040516326f8aa2160e21b8152600481018590526001600160a01b0384811660248301523060448301529190911690639be2a88490606401602060405180830381865afa15801561287c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190615448565b6000814210156128f15760405162461bcd60e51b815260206004820152601c60248201527b4f5241434c455f494e56414c49445f5345434f4e44535f515545525960201b6044820152606401610787565b60006128fd8342615134565b60008581526020889052604081205491925061291882611858565b90506000811161293a5760405162461bcd60e51b815260040161078790615418565b82811161298357600061294d8285615134565b90508061295a848a613153565b6129649190615465565b61296e848a613272565b61297891906154ea565b945050505050611e58565b60008061298f886132c2565b600081815260208c905260408120549192506129aa82611858565b905080156129bc5761040093506129db565b600080805260208d90526040812054939450926129d890611858565b90505b86811115612a225760405162461bcd60e51b815260206004820152601460248201527313d49050d31157d45551549657d513d3d7d3d31160621b6044820152606401610787565b5050600080612a338c8885876132cf565b915091506000612a4283611858565b612a4b83611858565b612a559190615134565b90508015612ad9576000612a69848e613272565b612a73848f613272565b612a7d91906152e4565b90506000612a8a85611858565b612a94908b615134565b905082612aa18284615465565b612aab9190615339565b612abe8f8761327290919063ffffffff16565b612ac891906154ea565b9a5050505050505050505050611e58565b612ae3838d613272565b9d9c50505050505050505050505050565b600061061e612b09655af3107a400084615465565b6133d3565b6000612b1d8484111583611352565b60006124188486615134565b600080612b3583613a03565b90506000808213612b5557612b50652d79883d2000836152e4565b612b65565b612b65652d79883d2000836154ea565b9050611e58655af3107a400082615339565b60006113b2838383613a78565b60006113b283836016613a78565b661fffffffffffff91909116901b90565b600082821c623fffff16621fffff8113612bbd5780611e58565b623fffff19179392505050565b6040805160028082526060808301845292600092919060208301908036833701905050905082612bfb579050612418565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f8ce54ae887f000000000000000000000000000000000000000000000000000000000000000081518110612c5c57612c5c6150ed565b6020026020010151887f000000000000000000000000000000000000000000000000000000000000000081518110612c9657612c966150ed565b60200260200101518888886040518663ffffffff1660e01b8152600401612cc19594939291906153d8565b602060405180830381865afa158015612cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0291906152cb565b817f000000000000000000000000000000000000000000000000000000000000000081518110612d3457612d346150ed565b60209081029190910101529695505050505050565b612d8b83600081518110612d5f57612d5f6150ed565b602002602001015183600081518110612d7a57612d7a6150ed565b60200260200101518363ffffffff16565b83600081518110612d9e57612d9e6150ed565b602002602001018181525050612ddb83600181518110612dc057612dc06150ed565b602002602001015183600181518110612d7a57612d7a6150ed565b83600181518110612dee57612dee6150ed565b602002602001018181525050505050565b600060606000612e0e846131a3565b90506000816003811115612e2457612e24615182565b1415612e3f57612e35868686613a8f565b9250925050612e95565b6001816003811115612e5357612e53615182565b1415612e6357612e358685613bdb565b6002816003811115612e7757612e77615182565b1415612e8857612e35868686613c98565b612e936101506113b9565b505b935093915050565b6000612eac8215156004611352565b6113b2828461539e565b600061061e8260ea612ba3565b600061061e8260b5613d91565b600061061e82609f612ba3565b600061061e82606a613d91565b600061061e826054612ba3565b600061061e82601f613d91565b612f1b6001600160a01b038316151561019b611352565b6001600160a01b038216600090815260208190526040902054612f4190826101a1612b0e565b6001600160a01b038316600090815260208190526040902055600254612f68908290615134565b6002556040518181526000906001600160a01b03841690600080516020615780833981519152906020015b60405180910390a35050565b600060606000612fae846131a3565b90506001816003811115612fc457612fc4615182565b1415612fd557612e35868686613dc4565b6002816003811115612fe957612fe9615182565b1415612ffa57612e35868686613ea8565b600381600381111561300e5761300e615182565b141561301e57612e358685613f2c565b612e936101366113b9565b60006130388215156004611352565b826130455750600061061e565b81613051600185615134565b61305b919061539e565b61134190600161514b565b60008061308661307684866124bd565b61308087896124bd565b906124bd565b905061168e81612b29565b60008061309e84866124bd565b905060006130ab82612b29565b905061168e84826152e4565b6000806130e0858585426130d78b60009081526008602052604090205490565b93929190613f79565b9050600060786130f08942615134565b10159050806130ff5786613108565b613108876132c2565b600081815260086020526040902092909255509695505050505050565b6000604b82901b6103ff604b1b198416176113b2565b6000602c82901b637fffffff602c1b198416176113b2565b60008082600281111561316857613168615182565b14156131775761134183612eb6565b600182600281111561318b5761318b615182565b141561319a5761134183612ed0565b61134183612eea565b60008180602001905181019061061e9190615538565b6060818060200190518101906113b29190615555565b806002546131dd919061514b565b6002556001600160a01b03821660009081526020819052604090205461320490829061514b565b6001600160a01b038316600081815260208181526040808320949094559251848152919290916000805160206157808339815191529101612f93565b6000613252631c74c91760e11b610c10565b82148061061e575061326a6350dd6ed960e01b610c10565b821492915050565b60008082600281111561328757613287615182565b14156132965761134183612ec3565b60018260028111156132aa576132aa615182565b14156132b95761134183612edd565b61134183612ef7565b600061061e826001614011565b60008080806132df600186615134565b905060008060005b83851161337c57600060026132fc878761514b565b613306919061539e565b9050613312818b614011565b600081815260208e90526040902054909450925061332f83611858565b91508a82101561334b5761334481600161514b565b9550613376565b8a8211156133655761335e600182615134565b9450613376565b8283975097505050505050506127aa565b506132e7565b8981106133a4578a600061338f8561402a565b815260200190815260200160002054826133c1565b818b60006133b1866132c2565b8152602001908152602001600020545b96509650505050505094509492505050565b6000613402680238fd42c5cf03ffff1983121580156133fb575068070c1cc73b00c800008313155b6009611352565b600082121561343357613417612b09836155a5565b613429670de0b6b3a764000080615465565b61061e9190615339565b60006806f05b59d3b20000008312613478576134586806f05b59d3b2000000846152e4565b925072195e54c5dd42177f53a27172fa9ec63026282760241b90506134b5565b6803782dace9d900000083126134b15761349b6803782dace9d9000000846152e4565b92506b1425982cf597cd205cef738090506134b5565b5060015b6134c0606484615465565b925068056bc75e2d6310000068ad78ebc5ac620000008412613521576134ef68ad78ebc5ac62000000856152e4565b935068056bc75e2d631000006135146e01855144814a7ff805980ff008400083615465565b61351e9190615339565b90505b6856bc75e2d6310000008412613573576135446856bc75e2d631000000856152e4565b935068056bc75e2d631000006135666b02df0ab5a80a22c61ab5a70083615465565b6135709190615339565b90505b682b5e3af16b1880000084126135c357613596682b5e3af16b18800000856152e4565b935068056bc75e2d631000006135b6693f1fce3da636ea5cf85083615465565b6135c09190615339565b90505b6815af1d78b58c4000008412613613576135e66815af1d78b58c400000856152e4565b935068056bc75e2d63100000613606690127fa27722cc06cc5e283615465565b6136109190615339565b90505b680ad78ebc5ac6200000841261366257613636680ad78ebc5ac6200000856152e4565b935068056bc75e2d6310000061365568280e60114edb805d0383615465565b61365f9190615339565b90505b68056bc75e2d6310000084126136b15761368568056bc75e2d63100000856152e4565b935068056bc75e2d631000006136a4680ebc5fb4174612111083615465565b6136ae9190615339565b90505b6802b5e3af16b18800008412613700576136d46802b5e3af16b1880000856152e4565b935068056bc75e2d631000006136f36808f00f760a4b2db55d83615465565b6136fd9190615339565b90505b68015af1d78b58c40000841261374f5761372368015af1d78b58c40000856152e4565b935068056bc75e2d631000006137426806f5f177578893793783615465565b61374c9190615339565b90505b68056bc75e2d631000008461376481836154ea565b9150600268056bc75e2d6310000061377c8884615465565b6137869190615339565b6137909190615339565b905061379c81836154ea565b9150600368056bc75e2d631000006137b48884615465565b6137be9190615339565b6137c89190615339565b90506137d481836154ea565b9150600468056bc75e2d631000006137ec8884615465565b6137f69190615339565b6138009190615339565b905061380c81836154ea565b9150600568056bc75e2d631000006138248884615465565b61382e9190615339565b6138389190615339565b905061384481836154ea565b9150600668056bc75e2d6310000061385c8884615465565b6138669190615339565b6138709190615339565b905061387c81836154ea565b9150600768056bc75e2d631000006138948884615465565b61389e9190615339565b6138a89190615339565b90506138b481836154ea565b9150600868056bc75e2d631000006138cc8884615465565b6138d69190615339565b6138e09190615339565b90506138ec81836154ea565b9150600968056bc75e2d631000006139048884615465565b61390e9190615339565b6139189190615339565b905061392481836154ea565b9150600a68056bc75e2d6310000061393c8884615465565b6139469190615339565b6139509190615339565b905061395c81836154ea565b9150600b68056bc75e2d631000006139748884615465565b61397e9190615339565b6139889190615339565b905061399481836154ea565b9150600c68056bc75e2d631000006139ac8884615465565b6139b69190615339565b6139c09190615339565b90506139cc81836154ea565b915060648468056bc75e2d631000006139e58587615465565b6139ef9190615339565b6139f99190615465565b61168e9190615339565b6000613a13600083136064611352565b81613a2e67016345785d8a0000670de0b6b3a76400006152e4565b128015613a535750613a50670de0b6b3a764000067016345785d8a00006154ea565b82125b15613a6a57670de0b6b3a764000061342983614037565b61061e8261426e565b919050565b623fffff828116821b90821b198416179392505050565b60006060613a9b61175b565b600080613aa785614850565b91509150613ab9600282106064611352565b6040805160028082526060820183526000926020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cac2832b898481518110613b1b57613b1b6150ed565b6020026020010151898581518110613b3557613b356150ed565b602002602001015186613b4760025490565b613b4f6109a6565b6040518663ffffffff1660e01b8152600401613b6f9594939291906153d8565b6040805180830381865afa158015613b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613baf91906155c2565b50818381518110613bc257613bc26150ed565b6020908102919091010152919791965090945050505050565b600060606000613bea84614872565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632d09954d8784613c2860025490565b6040518463ffffffff1660e01b8152600401613c46939291906155e6565b600060405180830381865afa158015613c63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613c8b919081019061560b565b9196919550909350505050565b60006060613ca461175b565b600080613cb085614888565b91509150613cc0825160026119d6565b613cc982611e60565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631152af7a898986613d0660025490565b613d0e6109a6565b6040518663ffffffff1660e01b8152600401613d2e95949392919061563f565b600060405180830381865afa158015613d4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d73919081019061568d565b509050613d848282111560cf611352565b9791965090945050505050565b600082821c661fffffffffffff16660fffffffffffff8113613db35780611e58565b661fffffffffffff19179392505050565b60006060600080613dd485614888565b91509150613de4825160026119d6565b613ded82611e60565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e89dd41f898986613e2a60025490565b613e326109a6565b6040518663ffffffff1660e01b8152600401613e5295949392919061563f565b600060405180830381865afa158015613e6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e97919081019061568d565b509050613d848282101560d0611352565b60006060600080613eb885614850565b91509150613eca600282106064611352565b6040805160028082526060820183526000926020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a8c79d69898481518110613b1b57613b1b6150ed565b600060606000613f3b84614872565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663906c41758784613c2860025490565b600080613f8587611858565b613f8f9084615134565b90506000613f9d8288615465565b613fa689612ec3565b613fb091906154ea565b90506000613fbe8388615465565b613fc78a612edd565b613fd191906154ea565b90506000613fdf8488615465565b613fe88b612ef7565b613ff291906154ea565b905061400389848a858b868c6117f9565b9a9950505050505050505050565b6000610400614020838561514b565b6113b291906156be565b600061061e8260016148a0565b600061404b670de0b6b3a764000083615465565b915060006140676a0c097ce7bc90715b34b9f160241b846154ea565b6a0c097ce7bc90715b34b9f160241b61408081866152e4565b61408a9190615465565b6140949190615339565b905060006a0c097ce7bc90715b34b9f160241b6140b18380615465565b6140bb9190615339565b905081806a0c097ce7bc90715b34b9f160241b6140d88483615465565b6140e29190615339565b91506140ef600383615339565b6140f990826154ea565b90506a0c097ce7bc90715b34b9f160241b6141148484615465565b61411e9190615339565b915061412b600583615339565b61413590826154ea565b90506a0c097ce7bc90715b34b9f160241b6141508484615465565b61415a9190615339565b9150614167600783615339565b61417190826154ea565b90506a0c097ce7bc90715b34b9f160241b61418c8484615465565b6141969190615339565b91506141a3600983615339565b6141ad90826154ea565b90506a0c097ce7bc90715b34b9f160241b6141c88484615465565b6141d29190615339565b91506141df600b83615339565b6141e990826154ea565b90506a0c097ce7bc90715b34b9f160241b6142048484615465565b61420e9190615339565b915061421b600d83615339565b61422590826154ea565b90506a0c097ce7bc90715b34b9f160241b6142408484615465565b61424a9190615339565b9150614257600f83615339565b61426190826154ea565b905061168e816002615465565b6000670de0b6b3a76400008212156142ae576142a582614296670de0b6b3a764000080615465565b6142a09190615339565b61426e565b61061e906155a5565b60006142d8670de0b6b3a764000072195e54c5dd42177f53a27172fa9ec63026282760241b615465565b8312614316576142fe72195e54c5dd42177f53a27172fa9ec63026282760241b84615339565b92506143136806f05b59d3b2000000826154ea565b90505b614334670de0b6b3a76400006b1425982cf597cd205cef7380615465565b8312614368576143506b1425982cf597cd205cef738084615339565b92506143656803782dace9d9000000826154ea565b90505b614373606482615465565b9050614380606484615465565b92506e01855144814a7ff805980ff008400083126143dd576e01855144814a7ff805980ff00840006143bb68056bc75e2d6310000085615465565b6143c59190615339565b92506143da68ad78ebc5ac62000000826154ea565b90505b6b02df0ab5a80a22c61ab5a7008312614432576b02df0ab5a80a22c61ab5a70061441068056bc75e2d6310000085615465565b61441a9190615339565b925061442f6856bc75e2d631000000826154ea565b90505b693f1fce3da636ea5cf850831261448357693f1fce3da636ea5cf85061446168056bc75e2d6310000085615465565b61446b9190615339565b9250614480682b5e3af16b18800000826154ea565b90505b690127fa27722cc06cc5e283126144d457690127fa27722cc06cc5e26144b268056bc75e2d6310000085615465565b6144bc9190615339565b92506144d16815af1d78b58c400000826154ea565b90505b68280e60114edb805d0383126145235768280e60114edb805d0361450168056bc75e2d6310000085615465565b61450b9190615339565b9250614520680ad78ebc5ac6200000826154ea565b90505b680ebc5fb41746121110831261457257680ebc5fb4174612111061455068056bc75e2d6310000085615465565b61455a9190615339565b925061456f68056bc75e2d63100000826154ea565b90505b6808f00f760a4b2db55d83126145c1576808f00f760a4b2db55d61459f68056bc75e2d6310000085615465565b6145a99190615339565b92506145be6802b5e3af16b1880000826154ea565b90505b6806f5f17757889379378312614610576806f5f17757889379376145ee68056bc75e2d6310000085615465565b6145f89190615339565b925061460d68015af1d78b58c40000826154ea565b90505b6806248f33704b286603831261465e576806248f33704b28660361463d68056bc75e2d6310000085615465565b6146479190615339565b925061465b67ad78ebc5ac620000826154ea565b90505b6805c548670b9510e7ac83126146ac576805c548670b9510e7ac61468b68056bc75e2d6310000085615465565b6146959190615339565b92506146a96756bc75e2d6310000826154ea565b90505b60006146c168056bc75e2d63100000856154ea565b68056bc75e2d631000006146d581876152e4565b6146df9190615465565b6146e99190615339565b9050600068056bc75e2d631000006147018380615465565b61470b9190615339565b9050818068056bc75e2d631000006147238483615465565b61472d9190615339565b915061473a600383615339565b61474490826154ea565b905068056bc75e2d6310000061475a8484615465565b6147649190615339565b9150614771600583615339565b61477b90826154ea565b905068056bc75e2d631000006147918484615465565b61479b9190615339565b91506147a8600783615339565b6147b290826154ea565b905068056bc75e2d631000006147c88484615465565b6147d29190615339565b91506147df600983615339565b6147e990826154ea565b905068056bc75e2d631000006147ff8484615465565b6148099190615339565b9150614816600b83615339565b61482090826154ea565b905061482d600282615465565b9050606461483b82876154ea565b6148459190615339565b979650505050505050565b6000808280602001905181019061486791906156d2565b909590945092505050565b6000818060200190518101906113b29190615709565b60606000828060200190518101906148679190615737565b6000610400826148b0828661514b565b6140209190615134565b600060208083528351808285015260005b818110156148e7578581018301518582016040015282016148cb565b818111156148f9576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461063557600080fd5b8035613a738161490f565b6000806040838503121561494257600080fd5b823561494d8161490f565b946020939093013593505050565b801515811461063557600080fd5b60006020828403121561497b57600080fd5b81356113b28161495b565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156149be576149be614986565b60405290565b604080519081016001600160401b03811182821017156149be576149be614986565b60405161012081016001600160401b03811182821017156149be576149be614986565b604051601f8201601f191681016001600160401b0381118282101715614a3157614a31614986565b604052919050565b60006001600160401b03821115614a5257614a52614986565b5060051b60200190565b803560038110613a7357600080fd5b60006020808385031215614a7e57600080fd5b82356001600160401b03811115614a9457600080fd5b8301601f81018513614aa557600080fd5b8035614ab8614ab382614a39565b614a09565b81815260609182028301840191848201919088841115614ad757600080fd5b938501935b83851015614b285780858a031215614af45760008081fd5b614afc61499c565b614b0586614a5c565b815285870135878201526040808701359082015283529384019391850191614adc565b50979650505050505050565b600081518084526020808501945080840160005b83811015614b6457815187529582019590820190600101614b48565b509495945050505050565b6020815260006113b26020830184614b34565b600080600060608486031215614b9757600080fd5b8335614ba28161490f565b92506020840135614bb28161490f565b929592945050506040919091013590565b60008060408385031215614bd657600080fd5b50508035926020909101359150565b600060208284031215614bf757600080fd5b5035919050565b600082601f830112614c0f57600080fd5b81356001600160401b03811115614c2857614c28614986565b614c3b601f8201601f1916602001614a09565b818152846020838601011115614c5057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a031215614c8857600080fd5b87359650602080890135614c9b8161490f565b96506040890135614cab8161490f565b955060608901356001600160401b0380821115614cc757600080fd5b818b0191508b601f830112614cdb57600080fd5b8135614ce9614ab382614a39565b81815260059190911b8301840190848101908e831115614d0857600080fd5b938501935b82851015614d2657843582529385019390850190614d0d565b9850505060808b0135955060a08b0135945060c08b0135925080831115614d4c57600080fd5b5050614d5a8a828b01614bfe565b91505092959891949750929550565b828152604060208201526000611e586040830184614b34565b60006020808385031215614d9557600080fd5b82356001600160401b03811115614dab57600080fd5b8301601f81018513614dbc57600080fd5b8035614dca614ab382614a39565b81815260069190911b82018301908381019087831115614de957600080fd5b928401925b828410156148455760408489031215614e075760008081fd5b614e0f6149c4565b614e1885614a5c565b81528486013586820152825260409093019290840190614dee565b6020808252825182820181905260009190848201906040850190845b81811015614e6b57835183529284019291840191600101614e4f565b50909695505050505050565b600060208284031215614e8957600080fd5b81356113b28161490f565b604081526000614ea76040830185614b34565b82810360208401526124188185614b34565b600060208284031215614ecb57600080fd5b81356001600160e01b0319811681146113b257600080fd5b803560028110613a7357600080fd5b600080600060608486031215614f0757600080fd5b83356001600160401b0380821115614f1e57600080fd5b908501906101208288031215614f3357600080fd5b614f3b6149e6565b614f4483614ee3565b8152614f5260208401614924565b6020820152614f6360408401614924565b6040820152606083013560608201526080830135608082015260a083013560a0820152614f9260c08401614924565b60c0820152614fa360e08401614924565b60e08201526101008084013583811115614fbc57600080fd5b614fc88a828701614bfe565b9183019190915250976020870135975060409096013595945050505050565b600060208284031215614ff957600080fd5b6113b282614a5c565b600080600080600080600060e0888a03121561501d57600080fd5b87356150288161490f565b965060208801356150388161490f565b95506040880135945060608801359350608088013560ff8116811461505c57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561508c57600080fd5b82356150978161490f565b915060208301356150a78161490f565b809150509250929050565b600181811c908216806150c657607f821691505b602082108114156150e757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561512d5761512d615103565b5060010190565b60008282101561514657615146615103565b500390565b6000821982111561515e5761515e615103565b500190565b600081600019048311821515161561517d5761517d615103565b500290565b634e487b7160e01b600052602160045260246000fd5b600082601f8301126151a957600080fd5b815160206151b9614ab383614a39565b82815260059290921b840181019181810190868411156151d857600080fd5b8286015b848110156151f357805183529183019183016151dc565b509695505050505050565b60008060006060848603121561521357600080fd5b83516001600160401b038082111561522a57600080fd5b818601915086601f83011261523e57600080fd5b8151602061524e614ab383614a39565b82815260059290921b8401810191818101908a84111561526d57600080fd5b948201945b838610156152945785516152858161490f565b82529482019490820190615272565b918901519197509093505050808211156152ad57600080fd5b506152ba86828701615198565b925050604084015190509250925092565b6000602082840312156152dd57600080fd5b5051919050565b60008083128015600160ff1b85018412161561530257615302615103565b6001600160ff1b038401831381161561531d5761531d615103565b50500390565b634e487b7160e01b600052601260045260246000fd5b60008261534857615348615323565b600160ff1b82146000198414161561536257615362615103565b500590565b8183823760009101908152919050565b6020808252600d908201526c2d22a927afa224ab24a9a4a7a760991b604082015260600190565b6000826153ad576153ad615323565b500490565b6020808252600c908201526b11125597d25395115493905360a21b604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b60006020828403121561540d57600080fd5b81516113b28161490f565b60208082526016908201527513d49050d31157d393d517d25392551250531256915160521b604082015260600190565b60006020828403121561545a57600080fd5b81516113b28161495b565b60006001600160ff1b038184138284138082168684048611161561548b5761548b615103565b600160ff1b60008712828116878305891216156154aa576154aa615103565b600087129250878205871284841616156154c6576154c6615103565b878505871281841616156154dc576154dc615103565b505050929093029392505050565b600080821280156001600160ff1b038490038513161561550c5761550c615103565b600160ff1b839003841281161561552557615525615103565b50500190565b6004811061063557600080fd5b60006020828403121561554a57600080fd5b81516113b28161552b565b6000806040838503121561556857600080fd5b82516155738161552b565b60208401519092506001600160401b0381111561558f57600080fd5b61559b85828601615198565b9150509250929050565b6000600160ff1b8214156155bb576155bb615103565b5060000390565b600080604083850312156155d557600080fd5b505080516020909101519092909150565b6060815260006155f96060830186614b34565b60208301949094525060400152919050565b60006020828403121561561d57600080fd5b81516001600160401b0381111561563357600080fd5b611e5884828501615198565b60a08152600061565260a0830188614b34565b82810360208401526156648188614b34565b905082810360408401526156788187614b34565b60608401959095525050608001529392505050565b600080604083850312156156a057600080fd5b825160208401519092506001600160401b0381111561558f57600080fd5b6000826156cd576156cd615323565b500690565b6000806000606084860312156156e757600080fd5b83516156f28161552b565b602085015160409095015190969495509392505050565b6000806040838503121561571c57600080fd5b82516157278161552b565b6020939093015192949293505050565b60008060006060848603121561574c57600080fd5b83516157578161552b565b60208501519093506001600160401b0381111561577357600080fd5b6152ba8682870161519856feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220989b1c70d0cafe0c5136b72515def4f2073cfa8e62a2b4536b5403e5ec577fed64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061006c5760003560e01c8062c194db146100715780631596019b1461008f578063174481fa146100ba5780632da47c40146101185780634b75f54f146101355780636634b753146101485780638d928af814610184575b600080fd5b61007961018c565b6040516100869190610635565b60405180910390f35b6100a261009d366004610827565b6101ab565b6040516001600160a01b039091168152602001610086565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602082015201610086565b6101206102ed565b60408051928352602083019190915201610086565b6001546100a2906001600160a01b031681565b61017461015636600461090b565b6001600160a01b031660009081526020819052604090205460ff1690565b6040519015158152602001610086565b6100a261035a565b60606101a66040518060200160405280600081525061040c565b905090565b60008060006101b86102ed565b915091506000604051806101a001604052806101d261035a565b6001600160a01b031681526020018c81526020018b81526020018a6000815181106101ff576101ff610928565b60200260200101516001600160a01b031681526020018a60018151811061022857610228610928565b60200260200101516001600160a01b031681526020018960008151811061025157610251610928565b602002602001015181526020018960018151811061027157610271610928565b602002602001015181526020018881526020018481526020018381526020018715158152602001866001600160a01b03168152602001306001600160a01b031681525090506102de816040516020016102ca919061093e565b6040516020818303038152906040526104f8565b9b9a5050505050505050505050565b600080427f000000000000000000000000000000000000000000000000000000000000000081101561034f57610343817f0000000000000000000000000000000000000000000000000000000000000000610a4f565b9362278d009350915050565b506000928392509050565b7f000000000000000000000000000000000000000000000000000000000000000090565b80517f602038038060206000396000f3fefefefefefefefefefefefefefefefefefefe808352600091602081018484f090845291506001600160a01b0382166104065760405162461bcd60e51b815260206004820152601660248201527510d3d11157d111541313d65351539517d1905253115160521b604482015260640160405180910390fd5b50919050565b60607f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600061049e8285610a66565b875190915060006104af8284610a66565b9050604051975060208101880160405280885260208801866000828a3c846000888301883c50602089810190898501016104ea818386610558565b505050505050505050919050565b600080610504836105ae565b6001600160a01b038116600081815260208190526040808220805460ff191660011790555192935090917f83a48fbcfc991335314e74d0496aab6a1987e992ddc85dddbcc4d6dd6ef2e9fc9190a292915050565b60208110610590578151835261056f602084610a66565b925061057c602083610a66565b9150610589602082610a4f565b9050610558565b905182516020929092036101000a6000190180199091169116179052565b6000806105ba8361040c565b905060008151602083016000f090506001600160a01b0381166105e1573d6000803e3d6000fd5b9392505050565b6000815180845260005b8181101561060e576020818501810151868301820152016105f2565b81811115610620576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006105e160208301846105e8565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561068657610686610648565b604052919050565b600082601f83011261069f57600080fd5b81356001600160401b038111156106b8576106b8610648565b6106cb601f8201601f191660200161065e565b8181528460208386010111156106e057600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b0382111561071657610716610648565b5060051b60200190565b6001600160a01b038116811461073557600080fd5b50565b600082601f83011261074957600080fd5b8135602061075e610759836106fd565b61065e565b82815260059290921b8401810191818101908684111561077d57600080fd5b8286015b848110156107a157803561079481610720565b8352918301918301610781565b509695505050505050565b600082601f8301126107bd57600080fd5b813560206107cd610759836106fd565b82815260059290921b840181019181810190868411156107ec57600080fd5b8286015b848110156107a157803583529183019183016107f0565b8035801515811461081757600080fd5b919050565b803561081781610720565b600080600080600080600060e0888a03121561084257600080fd5b87356001600160401b038082111561085957600080fd5b6108658b838c0161068e565b985060208a013591508082111561087b57600080fd5b6108878b838c0161068e565b975060408a013591508082111561089d57600080fd5b6108a98b838c01610738565b965060608a01359150808211156108bf57600080fd5b506108cc8a828b016107ac565b945050608088013592506108e260a08901610807565b91506108f060c0890161081c565b905092959891949750929550565b6001600160a01b03169052565b60006020828403121561091d57600080fd5b81356105e181610720565b634e487b7160e01b600052603260045260246000fd5b602081526109506020820183516108fe565b600060208301516101a080604085015261096e6101c08501836105e8565b91506040850151601f1985840301606086015261098b83826105e8565b92505060608501516109a060808601826108fe565b5060808501516109b360a08601826108fe565b5060a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120818187015280870151915050610140818187015280870151915050610160610a0a8187018315159052565b8601519050610180610a1e868201836108fe565b8601519050610a2f858301826108fe565b5090949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610a6157610a61610a39565b500390565b60008219821115610a7957610a79610a39565b50019056fea26469706673582212203795794eb70866d75b3e49482406247f223b9e32e4bdeb00bbd44291bdae6d6064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(string,string,address[],uint256[],uint256,bool,address)": {
        "details": "Deploys a new `Requiem2PoolTokens`."
      },
      "getCreationCode()": {
        "details": "Returns the creation code of the contract this factory creates."
      },
      "getCreationCodeContracts()": {
        "details": "Returns the two addresses where the creation code of the contract crated by this factory is stored."
      },
      "getPauseConfiguration()": {
        "details": "Returns the current `TemporarilyPausable` configuration that will be applied to Pools created by this factory. `pauseWindowDuration` will decrease over time until it reaches zero, at which point both it and `bufferPeriodDuration` will be zero forever, meaning deployed Pools will not be pausable."
      },
      "getVault()": {
        "details": "Returns the Vault's address."
      },
      "isPoolFromFactory(address)": {
        "details": "Returns true if `pool` was created by this factory."
      }
    },
    "stateVariables": {
      "formula": {
        "details": "Returns true if `account` can perform the action described by `actionId` in the contract `where`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23199,
        "contract": "contracts/Requiem2PoolTokensFactory.sol:Requiem2PoolTokensFactory",
        "label": "_isPoolFromFactory",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8575,
        "contract": "contracts/Requiem2PoolTokensFactory.sol:Requiem2PoolTokensFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}