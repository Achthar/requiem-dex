/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockAssetTransfersHandler,
  MockAssetTransfersHandlerInterface,
} from "../MockAssetTransfersHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWETH",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositToInternalBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "getInternalBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAsset",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "fromInternalBalance",
        type: "bool",
      },
    ],
    name: "receiveAsset",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAsset",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bool",
        name: "toInternalBalance",
        type: "bool",
      },
    ],
    name: "sendAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161087238038061087283398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516107e761008b600039600061012101526107e76000f3fe6080604052600436106100435760003560e01c80631f51af7d146100765780638a65d2e01461009657806390c185ae146100ec578063e65f97021461010c57600080fd5b366100715761006f61005361011f565b6001600160a01b0316336001600160a01b031614610206610143565b005b600080fd5b34801561008257600080fd5b5061006f610091366004610647565b610155565b3480156100a257600080fd5b506100da6100b136600461069a565b6001600160a01b0391821660009081526020818152604080832093909416825291909152205490565b60405190815260200160405180910390f35b3480156100f857600080fd5b5061006f6101073660046106d3565b610167565b61006f61011a366004610647565b61018c565b7f000000000000000000000000000000000000000000000000000000000000000090565b816101515761015181610198565b5050565b610161848484846101eb565b50505050565b61017c6001600160a01b0383168430846102c2565b61018783838361032d565b505050565b6101618484848461036c565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b826101f557610161565b6101fe84610441565b15610290576102108115610202610143565b61021861011f565b6001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b815260040161024591815260200190565b600060405180830381600087803b15801561025f57600080fd5b505af1158015610273573d6000803e3d6000fd5b5061028b925050506001600160a01b0383168461044e565b610161565b8381156102a7576102a283828661032d565b6102bb565b6102bb6001600160a01b03821684866104bf565b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526101619085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526104ef565b6001600160a01b038084166000908152602081815260408083209386168352929052908120805483929061036290849061072a565b9091555050505050565b8261037657610161565b61037f84610441565b15610400576103918115610202610143565b6103a083471015610204610143565b6103a861011f565b6001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103e257600080fd5b505af11580156103f6573d6000803e3d6000fd5b5050505050610161565b838115610426576000610416848387600161058e565b90506104228186610742565b9450505b83156102bb576102bb6001600160a01b0382168430876102c2565b6001600160a01b03161590565b61045d814710156101a3610143565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146104aa576040519150601f19603f3d011682016040523d82523d6000602084013e6104af565b606091505b50509050610187816101a4610143565b6040516001600160a01b03831660248201526044810182905261018790849063a9059cbb60e01b906064016102f6565b600080836001600160a01b03168360405161050a9190610759565b6000604051808303816000865af19150503d8060008114610547576040519150601f19603f3d011682016040523d82523d6000602084013e61054c565b606091505b50915091506000821415610564573d6000803e3d6000fd5b6101618151600014806105865750818060200190518101906105869190610794565b6101a2610143565b6001600160a01b03808516600090815260208181526040808320938716835292905290812054826105bf57836105c9565b6105c98185610609565b91506105d58282610742565b6001600160a01b03968716600090815260208181526040808320989099168252969096529590942094909455509192915050565b6000818310610618578161061a565b825b9392505050565b6001600160a01b038116811461063657600080fd5b50565b801515811461063657600080fd5b6000806000806080858703121561065d57600080fd5b843561066881610621565b935060208501359250604085013561067f81610621565b9150606085013561068f81610639565b939692955090935050565b600080604083850312156106ad57600080fd5b82356106b881610621565b915060208301356106c881610621565b809150509250929050565b6000806000606084860312156106e857600080fd5b83356106f381610621565b9250602084013561070381610621565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b6000821982111561073d5761073d610714565b500190565b60008282101561075457610754610714565b500390565b6000825160005b8181101561077a5760208186018101518583015201610760565b81811115610789576000828501525b509190910192915050565b6000602082840312156107a657600080fd5b815161061a8161063956fea264697066735822122023b9113401f01da195d3a6d55bd9a03bfc4ed1583cca907f62b2747032887f9464736f6c634300080a0033";

export class MockAssetTransfersHandler__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAssetTransfersHandler> {
    return super.deploy(
      weth,
      overrides || {}
    ) as Promise<MockAssetTransfersHandler>;
  }
  getDeployTransaction(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  attach(address: string): MockAssetTransfersHandler {
    return super.attach(address) as MockAssetTransfersHandler;
  }
  connect(signer: Signer): MockAssetTransfersHandler__factory {
    return super.connect(signer) as MockAssetTransfersHandler__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAssetTransfersHandlerInterface {
    return new utils.Interface(_abi) as MockAssetTransfersHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAssetTransfersHandler {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockAssetTransfersHandler;
  }
}
